{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1533085264607},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1533085264608},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1533085264609},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1533085264611},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1533085264612},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1533085264613},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1533085264614},{"_id":"themes/next/LICENSE.md","hash":"f0190c7d83a98464549a6b3a51bb206148d88e1b","modified":1533085264615},{"_id":"themes/next/README.md","hash":"2d142fa1bdfab00abf8e99f972346e15572c9b12","modified":1533085264616},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1533085264619},{"_id":"themes/next/bower.json","hash":"72d7f5ef565cca1da30ba64fc04075b9ac99e319","modified":1533085264618},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1533085264680},{"_id":"themes/next/package.json","hash":"735ace0b7fe3b1171c220c5424fcd4fe3aadd7f8","modified":1533085264820},{"_id":"themes/next/_config.yml","hash":"8cc3f14babbeb5f17b2ff194430c02bca29bbab9","modified":1533114775553},{"_id":"source/_posts/pic.md","hash":"a243c93e532512f929e9683d943d54568cf20105","modified":1533172415938},{"_id":"source/_posts/三月的烟雨.md","hash":"2e495fdfa649b0b56cda3d722bc6530de50b23f2","modified":1533171863864},{"_id":"source/_posts/四月的清风.md","hash":"36cfb978a26a82da87f4e1055b6748468e6d97d9","modified":1533171863902},{"_id":"source/_posts/小时候吃的.md","hash":"88e756abefb8227110648f9f5f2d569e9781f29c","modified":1533171863916},{"_id":"source/categories/index.md","hash":"e59c31249747c16ab710f2f8a0d7263d20d5092d","modified":1533092037843},{"_id":"source/tags/index.md","hash":"a7525bc7a300c2274c2e49464ad04d98b93ebe40","modified":1533092202840},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1533085264621},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1533085264623},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1533085264624},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1533085264625},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1533085264657},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"f2fd611a84dd6f9ed5395b63e187e29e9effbcd3","modified":1533085264659},{"_id":"themes/next/docs/LICENSE","hash":"5b702310012d480b40529fd10cf1872f687277a0","modified":1533085264660},{"_id":"themes/next/docs/MATH.md","hash":"34a46ca9a05b4570903beaadd4807e6759afb52e","modified":1533085264662},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1533085264663},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1533085264681},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1533085264683},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1533085264684},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1533085264685},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1533085264686},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1533085264687},{"_id":"themes/next/languages/ja.yml","hash":"7836f1de1f383d3a53770a03498cc39a37674f0c","modified":1533085264689},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1533085264690},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1533085264691},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1533085264692},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1533085264693},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1533085264694},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1533085264695},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1533085264696},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1533085264697},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1533085264698},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1533085264699},{"_id":"themes/next/layout/_layout.swig","hash":"2db9b03efc68be842b8f79fe2f0fd7fb09e8885a","modified":1533085264705},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1533085264813},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1533085264813},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1533085264814},{"_id":"themes/next/layout/page.swig","hash":"9ddf40303f82e3db76d59dc82b6d4eadfed203c6","modified":1533085264816},{"_id":"themes/next/layout/post.swig","hash":"0554f42f90f4a524666c2b520be30b689c1d6a87","modified":1533085264817},{"_id":"themes/next/layout/schedule.swig","hash":"d99b9eff0cff38caf095445f27c08aaf11a5b862","modified":1533085264818},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1533085264819},{"_id":"themes/next/scripts/helpers.js","hash":"7849f9b9a86fc82d6e186e32a5e26e1f27c49b47","modified":1533085264821},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1533085264823},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1533085264824},{"_id":"source/_posts/你好，世界.md","hash":"5067634223e2d19d21e9b371f0662c77baed2e25","modified":1533096163197},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1533085265123},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1533085265124},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1533085265125},{"_id":"source/_posts/神奇的reduce.md","hash":"aef3cb8b3782f9d5ef3beebf9a522676357356b5","modified":1533097094938},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085265012},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1533085264664},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1533085264665},{"_id":"themes/next/docs/ru/README.md","hash":"bbe7ac3ef6352b7fedbba2ab800915e33251adf8","modified":1533085264667},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1533085264668},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1533085264670},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1533085264671},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"f2a2d6e68c5f65e27303b40f5285a8a4a5adae4c","modified":1533085264672},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1533085264674},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1533085264675},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"7214fcd1b5830e62b3ac0836ad2d1b0fa391ae12","modified":1533085264676},{"_id":"themes/next/docs/zh-CN/README.md","hash":"74547943ee6cba2e2bbbd67d306ee4de9db1a2bd","modified":1533085264678},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"4d68054b062b3c8404b146a155d9624d2d25dd9b","modified":1533085264677},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1533085264679},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1533085264703},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1533085264702},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1533085264704},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"9b0eb348c131813160a8647f612ceb1278f60619","modified":1533105618545},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1533085264710},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"8ff97c3f4eb888207bdc50066053c97d890e0202","modified":1533085264711},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"e8dfb86eb62b9c2bc1435d6d1afa95d3b4c7b931","modified":1533085264712},{"_id":"themes/next/layout/_macro/post.swig","hash":"3d9b8b40012f1fa144449a0184266669b1ca6bed","modified":1533105692796},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56733f92352b891b0bb1baca293f68f6c8928b0b","modified":1533085264715},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a9519b4f82aa516e516317d0447bf5c5c7ffb544","modified":1533085264716},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"7a9b687087793bf5e218cbc345214f927fa5601a","modified":1533085264718},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"4b48fdbfe3bf41ddeda4ff74c1ff17ab9f15c14e","modified":1533085264719},{"_id":"themes/next/layout/_partials/comments.swig","hash":"412d2a0e18a237e490e1b8bce5547558768b9da3","modified":1533085264721},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7cba33ea7dd3c8948f29794d64c495823c88ad54","modified":1533107025723},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"206cbd6ac9ca6a219a8516f59beae25b3c770199","modified":1533085264733},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1533085264735},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"27fb1d81151b9b79683e488579df19eee7e654d6","modified":1533085264747},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"f544e21883d249d5a341c684c97bd25831008f07","modified":1533085264748},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"f8c7e729ad6e72b4c705a2c5d5041589c2b4cc52","modified":1533085264749},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f134aeb8d5bee351e5277edb92ac694af314b75f","modified":1533085264757},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"ed62ea83d3f2c9db2ea57bf23a7d765ed82504c2","modified":1533085264774},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c62c37474c8de78cf34e54c6219b503ec28d9815","modified":1533085264783},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"53861f78a1fb52e96a43cf6909e1530dcf6cbff8","modified":1533085264784},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"736cb278fa09d3b4ed6f305b56353941ea918793","modified":1533085264786},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1533085264791},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"ccf0035086e14dcefa24c2907301edf4c37d5448","modified":1533085264792},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1533085264793},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1533085264794},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"a174d4a0c9188f9c4a2652f49bfa7a60ad0a83e3","modified":1533085264795},{"_id":"themes/next/scripts/tags/button.js","hash":"510f3711a9c9d3e2a844250647d90e8359e7d130","modified":1533085264826},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1533085264827},{"_id":"themes/next/scripts/tags/exturl.js","hash":"83e48148d2f4f8543f6833effa8a26eb0b60f2f0","modified":1533085264828},{"_id":"themes/next/scripts/tags/full-image.js","hash":"ef2c2985a3edb9f69740740c5bc42d4b692c86fd","modified":1533085264829},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"2b969ca830862b2bc119b69ede4bd971e27a6ff8","modified":1533085264831},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"c68b1e6d4a8236d6731e4175ef3ddc284255d63b","modified":1533085264832},{"_id":"themes/next/scripts/tags/label.js","hash":"bb502616bfabe85de5de903074ec6afe627f8413","modified":1533085264833},{"_id":"themes/next/scripts/tags/note.js","hash":"bd3310a5890bded1bda9ba3ad6f98ee44ecb101a","modified":1533085264834},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2d257e26718d4011509fd6f530d2ea37e50e3e66","modified":1533085264835},{"_id":"themes/next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1533085265010},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1533085265014},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1533085265016},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1533085265018},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1533085265020},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1533085265023},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1533085265022},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1533085265025},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1533085265027},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1533085265028},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1533085265029},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1533085265030},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1533085265031},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533085265032},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1533085265033},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533085265035},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1533085265036},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1533085265037},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1533085265038},{"_id":"source/_posts/pic/1012308194.jpg","hash":"ee7ad825d1a115e34bea83bd3caa4fa1a0bd8f60","modified":1533172167645},{"_id":"source/_posts/pic/1762221382.jpg","hash":"3136e6f69e1f78324ceb62e4fc04bf48151dc5b9","modified":1533172401858},{"_id":"source/_posts/pic/3526.jpg","hash":"9750068ad04694a895842d9e0b0544ea161c567e","modified":1533172082227},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085264754},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085264755},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085264960},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085264961},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085264967},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085265006},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085265009},{"_id":"source/_posts/pic/431359834.jpg","hash":"1b8d94929830b34144aa0628dc9ec41e7bcdc40f","modified":1533172306782},{"_id":"source/_posts/pic/1917180847.jpg","hash":"1350a163c67409b6ab87784de31d73a16c4fe613","modified":1533096738930},{"_id":"source/_posts/四月的清风/1132638050.jpg","hash":"45820436c83d7b9ddb9b548a789c1831eb0a4c39","modified":1533171863916},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1533085264708},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"aab518204d3125e948796a9ba6b56b09cade2d92","modified":1533085264709},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1533085264724},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"0b8349710caf9691741a457aa746add35245048e","modified":1533085264726},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"09109a5c5a301e7cc5e3c7aec32b0164739fc7d4","modified":1533085264727},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"19050627bc23b0b2c2e65e7248c0f88468eb8ea5","modified":1533085264728},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1533085264729},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"f3ae3168801304af3d80ec3b84264e1d4201cb89","modified":1533085264731},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"3f11ae8e9084f39628cd2006931d39a2069b9dd6","modified":1533085264732},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1533085264737},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1533085264738},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1533085264739},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1533085264740},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1533085264742},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1533085264743},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1533085264744},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"580e9d9c4d8783ee6200d845ae16c98979bf1ea3","modified":1533085264752},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1533085264753},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1533085264756},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1533085264759},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1533085264761},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1533085264762},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"c43f41b7f3c0743d1e673af2e787ea34a67fc9cb","modified":1533085264763},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1533085264764},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1533085264765},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"d67d9a176a276cdab6f2bcb7eb3650fbca5459c4","modified":1533085264767},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1533085264768},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1533085264769},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"809f6d31c24ee0012e12631f5893a79f69e7bc84","modified":1533085264770},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1533085264771},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1533085264772},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1533085264773},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1533085264776},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"4a2d2269f23e90c1311bd867d22def0b4a092bf1","modified":1533085264777},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"292cdd1059b76d3d10486b71c99d9afb3e59ea44","modified":1533085264779},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"34cc66d4dbada2d561ba6f70fd9a75207c5adbd4","modified":1533085264780},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"694483f2d853c65b87a6a70e38dbc40e40eb1332","modified":1533085264781},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"d05e70a416963023ee1978e4168d58bcfd956ed3","modified":1533085264782},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"30e9e55d9af2ced6e6b156a042026a8b480f0ab0","modified":1533085264787},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1533085264789},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"c0c2fd87e71f0beb542aa50c0bc875da5aa5c44b","modified":1533085264790},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1533085264800},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"71c897f9b107dd0de1b7f649633cf583c206a9db","modified":1533085264801},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1533085264810},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1533085264812},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"9769e33d5119aac82b944c6709e4c190fcc1c818","modified":1533105862740},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1533085264959},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1533085264962},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0882d76333ab409e8d3362c284b91a0f0ae761ae","modified":1533085264965},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"8d6cf29f63c90364f4d3c336f7c9bb794b4c46cc","modified":1533085265004},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1533085265005},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"72927abd51d3a607a6ba32cf882390792b34e834","modified":1533085265007},{"_id":"themes/next/source/css/_variables/base.styl","hash":"1625e3e1da6c453108526e027dae25e311b18adf","modified":1533085265008},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1533085265041},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1533085265042},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1533085265045},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1533085265046},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1533085265085},{"_id":"themes/next/source/js/src/motion.js","hash":"6b5a2646b775609630b9ff6221fa58b6823a25fa","modified":1533085265087},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1533085265088},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1533085265091},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1533085265092},{"_id":"themes/next/source/js/src/utils.js","hash":"9cddff04f9ff64b1e3202e1726eff512a2ef8497","modified":1533085265093},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1533085265101},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1533085265103},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1533085265120},{"_id":"source/_posts/pic/1997264555.jpg","hash":"84c3d5ba4ca31370133474375b8346782c532863","modified":1533097849797},{"_id":"source/_posts/小时候吃的/1997264555.jpg","hash":"84c3d5ba4ca31370133474375b8346782c532863","modified":1533171863966},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1533085265096},{"_id":"source/_posts/pic/1132638050.jpg","hash":"45820436c83d7b9ddb9b548a789c1831eb0a4c39","modified":1533097849847},{"_id":"source/_posts/三月的烟雨/898024871.jpg","hash":"6d5c2f0c51d14361f2a7e776c7bd466c7373ad33","modified":1533171863901},{"_id":"source/_posts/神奇的reduce/1917180847.jpg","hash":"1350a163c67409b6ab87784de31d73a16c4fe613","modified":1533097059746},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6e076b5e183eedf425a445e99851f938789c3194","modified":1533085264797},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1533085264799},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1533085264838},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1533085264840},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1533085264861},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1533085264863},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1533085264865},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1533085264890},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1533085264922},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"fbb6be577529c750ef7c872fe7abdc7ab0faf0f8","modified":1533085264946},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"97bb39756e85f5b27bba7f43270105ad01d736c9","modified":1533085264947},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1533085264951},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1533085264953},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1533085264954},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1533085264955},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"52bc8ba71b91d954530b35dfc63b402a02b1321d","modified":1533085264956},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7e4e499964c2112d47e6f9d2b6e87c31ec8269e2","modified":1533085264970},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1533085264972},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1533085264974},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1533085264975},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f3aa863adf972569b72f2df6bc6a914e7daace99","modified":1533085264977},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa6c00fdaf8f0ca3b690a5a556671745fb67e2c9","modified":1533085264978},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1533085264979},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2ccb9bdc309b7c1ef183a3dbb0a4621bec54a328","modified":1533085264980},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1533085264986},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1533085264988},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"3cc7646583218d16925ced7b70865e63a901d4a7","modified":1533085264989},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1533085264991},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1533085264992},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1533085264995},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ccf5a4761cb0ce451b5e994cfabf8769248a45c1","modified":1533085264996},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"cc961108b12ab97d9216606ceb1cd1cd31ab20f0","modified":1533085264997},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1533085264999},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"df16dc995eb9ad498df2edcfc3e20528fc9aa133","modified":1533085265000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"be72740313a9a0477b8a22f62e4c8ffa6d23a2e5","modified":1533085265001},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1533085265002},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"6ed3f2389457daa382de96a08633d9faaaaf53fb","modified":1533085265090},{"_id":"source/_posts/你好，世界/1959017488.jpg","hash":"1b7b23482597376f03768d36698cacb7a22ac414","modified":1533095916996},{"_id":"source/_posts/pic/898024871.jpg","hash":"6d5c2f0c51d14361f2a7e776c7bd466c7373ad33","modified":1533097849823},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1533085265099},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7dd247c8869fdefb5a007045d00f3ef8ceecf300","modified":1533085264867},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"3f3d2a43d1a326bad25b633c8ec9ddd87867224c","modified":1533085264870},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1533085264872},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1533085264873},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1533085264875},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1533085264876},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1533085264877},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1533085264879},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"835c1340571bd6c4ec263c482cf13283fb047e49","modified":1533085264880},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1533085264882},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1533085264883},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"630be616447a982413030e561bbd3a80ac14b120","modified":1533085264885},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1533085264886},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1533085264887},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1533085264888},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1533085264889},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1533085264892},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1533085264893},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1533085264894},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1533085264895},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"317c9ceda655e9dc373ce8e7b71d20b794fce9a4","modified":1533085264897},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1533085264898},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1533085264899},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1533085264900},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1533085264901},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1533085264902},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1533085264903},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1533085264904},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"adfd6d2d3b34adc4b476a0ea91e19020456a3b1a","modified":1533085264906},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1533085264906},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5c3141d58970a0614896b6a62fd7a8a8caf4e401","modified":1533085264907},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bb8162bb7c7b0b255a0e8e234eb382a0879a4962","modified":1533085264908},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1533085264910},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"debe322cc9e2688ecf38d0b6afcd6b71ad02fbd0","modified":1533085264912},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1533085264913},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1533085264914},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1533085264915},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1533085264916},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9e05a2232faabb41bcebb51d545d897a76f077da","modified":1533085264917},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1533085264918},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"94d76e6da600a36d80e2470326ebb6b3be447ccb","modified":1533085264919},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1533085264920},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1533085264923},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"02ee0eb49c256ecb4e71bbc65072f9147418d7d7","modified":1533085264924},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1533085264925},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1533085264927},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1533085264928},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1533085264929},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1533085264930},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1533085264932},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1533085264933},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f4d8144c22544bdb89787c14ab9d39578dae4b7c","modified":1533085264935},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1533085264936},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1533085264938},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1533085264939},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1533085264940},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1533085264941},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"acfdd76b1c90d2e384affb3d0006a39b524609d2","modified":1533085264943},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"c31fbaec7e6373ecfb8588500b972d451695a6ad","modified":1533085264944},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1533085264982},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1533085264984},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1533085264993},{"_id":"source/_posts/pic/1959017488.jpg","hash":"1b7b23482597376f03768d36698cacb7a22ac414","modified":1533096726160},{"_id":"source/_posts/pic/2048547518.jpg","hash":"fb36ccd58e555f294a7dc296b06f312b77af7eda","modified":1533096736560},{"_id":"public/categories/index.html","hash":"9f8312890696f8bb2617128400304b10a87f3a9a","modified":1533173178732},{"_id":"public/tags/index.html","hash":"1a5094933c2b415899c7fdbead7fb865799dc03a","modified":1533173178733},{"_id":"public/archives/index.html","hash":"0cfb1d20c09d987ab48418c3baa9a06e6618af15","modified":1533173178734},{"_id":"public/archives/2018/index.html","hash":"d815b133439e477d2d751ee782047662d1b0dd90","modified":1533173178734},{"_id":"public/archives/2018/08/index.html","hash":"0c64a722a50b64369aa143ecae2750bca62c65db","modified":1533173178734},{"_id":"public/categories/杂记/index.html","hash":"e4545ae78530df556276989bdb430a2bb58b3c68","modified":1533173178733},{"_id":"public/categories/前端/index.html","hash":"d04643e92bbd501ab42576c5b5af9864a902a8e2","modified":1533173178733},{"_id":"public/tags/图库/index.html","hash":"9562728a88a4ff8bf1f292cbc782ae7c90a2337a","modified":1533173178734},{"_id":"public/tags/reduce/index.html","hash":"8f49f3640b4f44bd3215b3caf3fecfddb948f9d6","modified":1533173178734},{"_id":"public/tags/数组/index.html","hash":"4fe4b0b2ae11190b01bc34aa03ca943a173a7ac4","modified":1533173178734},{"_id":"public/2018/08/01/神奇的reduce/index.html","hash":"9b2fe7179b36ad1dea1b990dfb11098a22917a22","modified":1533173178734},{"_id":"public/2018/08/01/你好，世界/index.html","hash":"1b6d147728ce62e3d507a217fa25b71491783784","modified":1533173178734},{"_id":"public/2018/08/01/pic/index.html","hash":"04b78f5e19685c5d1f7e5570dc0127c494684b93","modified":1533173178734},{"_id":"public/index.html","hash":"fa0bd1fceb1506e26c889f1cea11eca60212bad3","modified":1533173178734},{"_id":"public/categories/生活/index.html","hash":"33aa50e22240f60fbb213ad361eab7cf403b5616","modified":1533173178733},{"_id":"public/2018/08/01/小时候吃的/index.html","hash":"591710c869e29badfe76b32393b998e169199f90","modified":1533173178734},{"_id":"public/2018/08/01/四月的清风/index.html","hash":"3faf00dcb700999ddddc6c336e4fe337b190ffb8","modified":1533173178734},{"_id":"public/2018/08/01/三月的烟雨/index.html","hash":"c858e7110ec460982d751d4ee4197765a001e575","modified":1533173178734},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1533172480789},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1533172480790},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1533172480790},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1533172480790},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1533172480790},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1533172480790},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1533172480790},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1533172480790},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1533172480790},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1533172480790},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1533172480791},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1533172480791},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533172480791},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1533172480791},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1533172480791},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1533172480791},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1533172480791},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533172480791},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1533172482228},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1533172482228},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1533172482229},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1533172482229},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1533172482229},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1533172482229},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1533172482229},{"_id":"public/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1533172482229},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1533172482229},{"_id":"public/css/main.css","hash":"84c2fabf6bba70ddc01bc33f6114fda332d9c7db","modified":1533172482229},{"_id":"public/2018/08/01/pic/1012308194.jpg","hash":"ee7ad825d1a115e34bea83bd3caa4fa1a0bd8f60","modified":1533172482229},{"_id":"public/2018/08/01/神奇的reduce/1917180847.jpg","hash":"1350a163c67409b6ab87784de31d73a16c4fe613","modified":1533172482230},{"_id":"public/2018/08/01/四月的清风/1132638050.jpg","hash":"45820436c83d7b9ddb9b548a789c1831eb0a4c39","modified":1533172482230},{"_id":"public/2018/08/01/pic/1762221382.jpg","hash":"3136e6f69e1f78324ceb62e4fc04bf48151dc5b9","modified":1533172482230},{"_id":"public/2018/08/01/pic/3526.jpg","hash":"9750068ad04694a895842d9e0b0544ea161c567e","modified":1533172482230},{"_id":"public/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1533172482240},{"_id":"public/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1533172482240},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1533172482240},{"_id":"public/2018/08/01/pic/1132638050.jpg","hash":"45820436c83d7b9ddb9b548a789c1831eb0a4c39","modified":1533172482240},{"_id":"public/2018/08/01/pic/1917180847.jpg","hash":"1350a163c67409b6ab87784de31d73a16c4fe613","modified":1533172482240},{"_id":"public/2018/08/01/你好，世界/1959017488.jpg","hash":"1b7b23482597376f03768d36698cacb7a22ac414","modified":1533172482240},{"_id":"public/2018/08/01/小时候吃的/1997264555.jpg","hash":"84c3d5ba4ca31370133474375b8346782c532863","modified":1533172482241},{"_id":"public/2018/08/01/pic/431359834.jpg","hash":"1b8d94929830b34144aa0628dc9ec41e7bcdc40f","modified":1533172482241},{"_id":"public/2018/08/01/pic/1997264555.jpg","hash":"84c3d5ba4ca31370133474375b8346782c532863","modified":1533172482251},{"_id":"public/2018/08/01/pic/1959017488.jpg","hash":"1b7b23482597376f03768d36698cacb7a22ac414","modified":1533172482251},{"_id":"public/2018/08/01/pic/2048547518.jpg","hash":"fb36ccd58e555f294a7dc296b06f312b77af7eda","modified":1533172482251},{"_id":"public/2018/08/01/三月的烟雨/898024871.jpg","hash":"6d5c2f0c51d14361f2a7e776c7bd466c7373ad33","modified":1533172482251},{"_id":"public/2018/08/01/pic/898024871.jpg","hash":"6d5c2f0c51d14361f2a7e776c7bd466c7373ad33","modified":1533172482254},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1533172482256},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1533172482256},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1533172482279},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1533172482282},{"_id":"source/_posts/vue较少关注的地方.md","hash":"3536dbce903b3df22387c905ff146383491aa931","modified":1533173149185},{"_id":"source/_posts/家乡.md","hash":"250bac94cfd94caf33dda695f7cb215f7a1dee4e","modified":1533172765474},{"_id":"source/_posts/牢骚.md","hash":"0f5480d335004a460b3f718d40a660d4a19d4834","modified":1533172830157},{"_id":"source/_posts/绕不开的promise.md","hash":"9cb17799690c33bae042a32d806967e71282c011","modified":1533173006890},{"_id":"source/_posts/vue较少关注的地方/3526.jpg","hash":"9750068ad04694a895842d9e0b0544ea161c567e","modified":1533173159050},{"_id":"source/_posts/家乡/1762221382.jpg","hash":"3136e6f69e1f78324ceb62e4fc04bf48151dc5b9","modified":1533172756286},{"_id":"source/_posts/绕不开的promise/1012308194.jpg","hash":"ee7ad825d1a115e34bea83bd3caa4fa1a0bd8f60","modified":1533173018537},{"_id":"source/_posts/牢骚/431359834.jpg","hash":"1b8d94929830b34144aa0628dc9ec41e7bcdc40f","modified":1533172836095},{"_id":"public/tags/promise/index.html","hash":"ced46d0c79b488cc07c24d4dd960e68644c0fe13","modified":1533173178751},{"_id":"public/tags/vue/index.html","hash":"c7c94f64f8536186f6a560ef678bc6cf2eb600ad","modified":1533173178751},{"_id":"public/2018/08/02/vue较少关注的地方/index.html","hash":"f787ba89ce7b2ca07a957b93936e6a63ed9c3967","modified":1533173178752},{"_id":"public/2018/08/02/绕不开的promise/index.html","hash":"21c30880f998e305cc2361cee07f34905377b6a5","modified":1533173178752},{"_id":"public/2018/08/02/牢骚/index.html","hash":"313b69cfa6605647b63a922f52d0f954895c6be6","modified":1533173178752},{"_id":"public/2018/08/02/家乡/index.html","hash":"d22c8efaa22937f2e9c4831194e65391e0b40803","modified":1533173178752},{"_id":"public/2018/08/02/家乡/1762221382.jpg","hash":"3136e6f69e1f78324ceb62e4fc04bf48151dc5b9","modified":1533173178762},{"_id":"public/2018/08/02/绕不开的promise/1012308194.jpg","hash":"ee7ad825d1a115e34bea83bd3caa4fa1a0bd8f60","modified":1533173178762},{"_id":"public/2018/08/02/vue较少关注的地方/3526.jpg","hash":"9750068ad04694a895842d9e0b0544ea161c567e","modified":1533173178762},{"_id":"public/2018/08/02/牢骚/431359834.jpg","hash":"1b8d94929830b34144aa0628dc9ec41e7bcdc40f","modified":1533173178773}],"Category":[{"name":"杂记","_id":"cjkbvb3q30004ssz74lz4k1ce"},{"name":"生活","_id":"cjkbvb3qa0009ssz7tvpmyzgm"},{"name":"前端","_id":"cjkbvb3s9000jssz7noz7v2vs"}],"Data":[],"Page":[{"title":"分类","date":"2018-08-01T02:53:57.843Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 日期\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-08-01T02:53:57.843Z","path":"categories/index.html","layout":"page","_id":"cjkbvb3px0001ssz7nj3g7blu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-08-01T02:56:42.840Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 日期\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-08-01T02:56:42.840Z","path":"tags/index.html","layout":"page","_id":"cjkbvb3q10003ssz7orwpd6m1","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"pic","date":"2018-08-01T04:10:42.000Z","_content":"\n# 收集一些图片作为文章的插图。\n\n[图片站点](https://en.gallerix.ru/album/Vincent-Van-Gogh)\n\n<!-- more -->\n\n## 2018/8/2\n\n![Johannes Vermeer – Girl with a Pearl Earring](pic/3526.jpg)\n\n> Johannes Vermeer – Girl with a Pearl Earring 1665-67\n\n---\n\n![Johannes Vermeer – The Milkmaid](pic/1012308194.jpg)\n\n> Johannes Vermeer – The Milkmaid 1658-61\n\n---\n\n![Johannes Vermeer – Officer and Laughing Girl](pic/431359834.jpg)\n\n> Johannes Vermeer – Officer and Laughing Girl 1655-60\n\n---\n\n![Johannes Vermeer – View of Delft](pic/1762221382.jpg)\n\n> Johannes Vermeer – View of Delft 1660-61\n\n---\n\n## 2018/8/1\n\n![Vincent van Gogh – Cafe Terrace in Arles at Night](pic/1959017488.jpg)\n\n> Vincent van Gogh – Cafe Terrace in Arles at Night 1888\n\n---\n\n![Vincent van Gogh – The Parsonage at Nuenen](pic/1917180847.jpg)\n\n> Vincent van Gogh – The Parsonage at Nuenen 1885\n\n---\n\n![Vincent van Gogh – Canal with Women Washing](pic/2048547518.jpg)\n\n> Vincent van Gogh – Canal with Women Washing 1888\n\n---\n\n![Vincent van Gogh – Sunny Lawn in a Public Park](pic/898024871.jpg)\n\n> Vincent van Gogh – Sunny Lawn in a Public Park 1888\n\n---\n\n![Vincent van Gogh – Old Man in Sorrow](pic/1132638050.jpg)\n\n> Vincent van Gogh – Old Man in Sorrow 1890\n\n---\n\n![Vincent van Gogh – Noon Rest from (after Millet)](pic/1997264555.jpg)\n\n> Vincent van Gogh – Noon Rest from (after Millet) 1890\n\n---\n","source":"_posts/pic.md","raw":"---\ntitle: pic\ndate: 2018-08-01 12:10:42\ntags: 图库\ncategories: 杂记\n---\n\n# 收集一些图片作为文章的插图。\n\n[图片站点](https://en.gallerix.ru/album/Vincent-Van-Gogh)\n\n<!-- more -->\n\n## 2018/8/2\n\n![Johannes Vermeer – Girl with a Pearl Earring](pic/3526.jpg)\n\n> Johannes Vermeer – Girl with a Pearl Earring 1665-67\n\n---\n\n![Johannes Vermeer – The Milkmaid](pic/1012308194.jpg)\n\n> Johannes Vermeer – The Milkmaid 1658-61\n\n---\n\n![Johannes Vermeer – Officer and Laughing Girl](pic/431359834.jpg)\n\n> Johannes Vermeer – Officer and Laughing Girl 1655-60\n\n---\n\n![Johannes Vermeer – View of Delft](pic/1762221382.jpg)\n\n> Johannes Vermeer – View of Delft 1660-61\n\n---\n\n## 2018/8/1\n\n![Vincent van Gogh – Cafe Terrace in Arles at Night](pic/1959017488.jpg)\n\n> Vincent van Gogh – Cafe Terrace in Arles at Night 1888\n\n---\n\n![Vincent van Gogh – The Parsonage at Nuenen](pic/1917180847.jpg)\n\n> Vincent van Gogh – The Parsonage at Nuenen 1885\n\n---\n\n![Vincent van Gogh – Canal with Women Washing](pic/2048547518.jpg)\n\n> Vincent van Gogh – Canal with Women Washing 1888\n\n---\n\n![Vincent van Gogh – Sunny Lawn in a Public Park](pic/898024871.jpg)\n\n> Vincent van Gogh – Sunny Lawn in a Public Park 1888\n\n---\n\n![Vincent van Gogh – Old Man in Sorrow](pic/1132638050.jpg)\n\n> Vincent van Gogh – Old Man in Sorrow 1890\n\n---\n\n![Vincent van Gogh – Noon Rest from (after Millet)](pic/1997264555.jpg)\n\n> Vincent van Gogh – Noon Rest from (after Millet) 1890\n\n---\n","slug":"pic","published":1,"updated":"2018-08-02T01:13:35.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbvb3ps0000ssz7fg5al510","content":"<h1 id=\"收集一些图片作为文章的插图。\"><a href=\"#收集一些图片作为文章的插图。\" class=\"headerlink\" title=\"收集一些图片作为文章的插图。\"></a>收集一些图片作为文章的插图。</h1><p><a href=\"https://en.gallerix.ru/album/Vincent-Van-Gogh\" target=\"_blank\" rel=\"noopener\">图片站点</a></p>\n<a id=\"more\"></a>\n<h2 id=\"2018-8-2\"><a href=\"#2018-8-2\" class=\"headerlink\" title=\"2018/8/2\"></a>2018/8/2</h2><p><img src=\"/newBlog/2018/08/01/pic/3526.jpg\" alt=\"Johannes Vermeer – Girl with a Pearl Earring\"></p>\n<blockquote>\n<p>Johannes Vermeer – Girl with a Pearl Earring 1665-67</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/1012308194.jpg\" alt=\"Johannes Vermeer – The Milkmaid\"></p>\n<blockquote>\n<p>Johannes Vermeer – The Milkmaid 1658-61</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/431359834.jpg\" alt=\"Johannes Vermeer – Officer and Laughing Girl\"></p>\n<blockquote>\n<p>Johannes Vermeer – Officer and Laughing Girl 1655-60</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/1762221382.jpg\" alt=\"Johannes Vermeer – View of Delft\"></p>\n<blockquote>\n<p>Johannes Vermeer – View of Delft 1660-61</p>\n</blockquote>\n<hr>\n<h2 id=\"2018-8-1\"><a href=\"#2018-8-1\" class=\"headerlink\" title=\"2018/8/1\"></a>2018/8/1</h2><p><img src=\"/newBlog/2018/08/01/pic/1959017488.jpg\" alt=\"Vincent van Gogh – Cafe Terrace in Arles at Night\"></p>\n<blockquote>\n<p>Vincent van Gogh – Cafe Terrace in Arles at Night 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/1917180847.jpg\" alt=\"Vincent van Gogh – The Parsonage at Nuenen\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Parsonage at Nuenen 1885</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/2048547518.jpg\" alt=\"Vincent van Gogh – Canal with Women Washing\"></p>\n<blockquote>\n<p>Vincent van Gogh – Canal with Women Washing 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/898024871.jpg\" alt=\"Vincent van Gogh – Sunny Lawn in a Public Park\"></p>\n<blockquote>\n<p>Vincent van Gogh – Sunny Lawn in a Public Park 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/1132638050.jpg\" alt=\"Vincent van Gogh – Old Man in Sorrow\"></p>\n<blockquote>\n<p>Vincent van Gogh – Old Man in Sorrow 1890</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/1997264555.jpg\" alt=\"Vincent van Gogh – Noon Rest from (after Millet)\"></p>\n<blockquote>\n<p>Vincent van Gogh – Noon Rest from (after Millet) 1890</p>\n</blockquote>\n<hr>\n","site":{"data":{}},"excerpt":"<h1 id=\"收集一些图片作为文章的插图。\"><a href=\"#收集一些图片作为文章的插图。\" class=\"headerlink\" title=\"收集一些图片作为文章的插图。\"></a>收集一些图片作为文章的插图。</h1><p><a href=\"https://en.gallerix.ru/album/Vincent-Van-Gogh\" target=\"_blank\" rel=\"noopener\">图片站点</a></p>","more":"<h2 id=\"2018-8-2\"><a href=\"#2018-8-2\" class=\"headerlink\" title=\"2018/8/2\"></a>2018/8/2</h2><p><img src=\"/newBlog/2018/08/01/pic/3526.jpg\" alt=\"Johannes Vermeer – Girl with a Pearl Earring\"></p>\n<blockquote>\n<p>Johannes Vermeer – Girl with a Pearl Earring 1665-67</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/1012308194.jpg\" alt=\"Johannes Vermeer – The Milkmaid\"></p>\n<blockquote>\n<p>Johannes Vermeer – The Milkmaid 1658-61</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/431359834.jpg\" alt=\"Johannes Vermeer – Officer and Laughing Girl\"></p>\n<blockquote>\n<p>Johannes Vermeer – Officer and Laughing Girl 1655-60</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/1762221382.jpg\" alt=\"Johannes Vermeer – View of Delft\"></p>\n<blockquote>\n<p>Johannes Vermeer – View of Delft 1660-61</p>\n</blockquote>\n<hr>\n<h2 id=\"2018-8-1\"><a href=\"#2018-8-1\" class=\"headerlink\" title=\"2018/8/1\"></a>2018/8/1</h2><p><img src=\"/newBlog/2018/08/01/pic/1959017488.jpg\" alt=\"Vincent van Gogh – Cafe Terrace in Arles at Night\"></p>\n<blockquote>\n<p>Vincent van Gogh – Cafe Terrace in Arles at Night 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/1917180847.jpg\" alt=\"Vincent van Gogh – The Parsonage at Nuenen\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Parsonage at Nuenen 1885</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/2048547518.jpg\" alt=\"Vincent van Gogh – Canal with Women Washing\"></p>\n<blockquote>\n<p>Vincent van Gogh – Canal with Women Washing 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/898024871.jpg\" alt=\"Vincent van Gogh – Sunny Lawn in a Public Park\"></p>\n<blockquote>\n<p>Vincent van Gogh – Sunny Lawn in a Public Park 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/1132638050.jpg\" alt=\"Vincent van Gogh – Old Man in Sorrow\"></p>\n<blockquote>\n<p>Vincent van Gogh – Old Man in Sorrow 1890</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/1997264555.jpg\" alt=\"Vincent van Gogh – Noon Rest from (after Millet)\"></p>\n<blockquote>\n<p>Vincent van Gogh – Noon Rest from (after Millet) 1890</p>\n</blockquote>\n<hr>"},{"title":"三月的烟雨","date":"2018-08-01T11:44:41.000Z","_content":"\n# 三月的烟雨\n\n>三月的烟雨，飘荡的南方\n\n有很多次想写一写关于生活的笔记，碍于自己的描述表达能力不行迟迟都没有开始。所以这篇算是开山第一篇了，以后也终于可以在想说话、想表达、想发泄的时候能合理的释放情绪了。\n\n## 回不去\n\n从2016.11.3来杭实习到现在的2018.3.27，竟然也快过去了一年半了，不得不感叹时间真的过得很快，我有时候也经常想起大学的时光，想起来的那些人那些事，所有这些的过去开始一点点模糊，大家也都有了新的生活，就是这种淡淡的感觉里承载着四年时间里的酸甜苦辣，五味陈杂的感觉总让我想去触摸它却又始终不敢也不可能去触摸得到。\n\n## 情绪\n\n我有时候是个很悲观的人，容易积累负面情绪，我喜欢这样想：`发生这样的事情还不如回到以前`，所以表现出一点恋旧的情绪，同时也有一种`弱者情绪`，我定义的`弱者情绪`就是喜欢从弱者的视角去过度同情他，因为在我的想法里我一直是这样的`弱者`\n\n## 民谣\n\n始终听不腻民谣，这种失意人的共鸣真的让自己心生怜悯，难免也会同情自己有多可怜，其实我也没有那么多痛痒的青春故事和一直低谷的情绪，可能就是喜欢吉他的声音吧。\n\n## 健身\n\n最近我也开始了在keep的帮助下健身，从来没想过去健身的我竟然也开始了锻炼身体。我给自己定了目标，每天锻炼二十分钟，虽然我感觉我坚持不了几天了，但是这几天自律健身，我也开始想着去识图合理分配下班后到家剩下来的时间。这是一个好的开始，希望能好好地坚持！！！\n\n---\n\n![Vincent van Gogh – Sunny Lawn in a Public Park](三月的烟雨/898024871.jpg)\n\n> Vincent van Gogh – Sunny Lawn in a Public Park 1888\n","source":"_posts/三月的烟雨.md","raw":"---\ntitle: 三月的烟雨\ndate: 2018-08-01 19:44:41\ntags: \ncategories: 生活\n---\n\n# 三月的烟雨\n\n>三月的烟雨，飘荡的南方\n\n有很多次想写一写关于生活的笔记，碍于自己的描述表达能力不行迟迟都没有开始。所以这篇算是开山第一篇了，以后也终于可以在想说话、想表达、想发泄的时候能合理的释放情绪了。\n\n## 回不去\n\n从2016.11.3来杭实习到现在的2018.3.27，竟然也快过去了一年半了，不得不感叹时间真的过得很快，我有时候也经常想起大学的时光，想起来的那些人那些事，所有这些的过去开始一点点模糊，大家也都有了新的生活，就是这种淡淡的感觉里承载着四年时间里的酸甜苦辣，五味陈杂的感觉总让我想去触摸它却又始终不敢也不可能去触摸得到。\n\n## 情绪\n\n我有时候是个很悲观的人，容易积累负面情绪，我喜欢这样想：`发生这样的事情还不如回到以前`，所以表现出一点恋旧的情绪，同时也有一种`弱者情绪`，我定义的`弱者情绪`就是喜欢从弱者的视角去过度同情他，因为在我的想法里我一直是这样的`弱者`\n\n## 民谣\n\n始终听不腻民谣，这种失意人的共鸣真的让自己心生怜悯，难免也会同情自己有多可怜，其实我也没有那么多痛痒的青春故事和一直低谷的情绪，可能就是喜欢吉他的声音吧。\n\n## 健身\n\n最近我也开始了在keep的帮助下健身，从来没想过去健身的我竟然也开始了锻炼身体。我给自己定了目标，每天锻炼二十分钟，虽然我感觉我坚持不了几天了，但是这几天自律健身，我也开始想着去识图合理分配下班后到家剩下来的时间。这是一个好的开始，希望能好好地坚持！！！\n\n---\n\n![Vincent van Gogh – Sunny Lawn in a Public Park](三月的烟雨/898024871.jpg)\n\n> Vincent van Gogh – Sunny Lawn in a Public Park 1888\n","slug":"三月的烟雨","published":1,"updated":"2018-08-02T01:04:23.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbvb3pz0002ssz7wr6lzi08","content":"<h1 id=\"三月的烟雨\"><a href=\"#三月的烟雨\" class=\"headerlink\" title=\"三月的烟雨\"></a>三月的烟雨</h1><blockquote>\n<p>三月的烟雨，飘荡的南方</p>\n</blockquote>\n<p>有很多次想写一写关于生活的笔记，碍于自己的描述表达能力不行迟迟都没有开始。所以这篇算是开山第一篇了，以后也终于可以在想说话、想表达、想发泄的时候能合理的释放情绪了。</p>\n<h2 id=\"回不去\"><a href=\"#回不去\" class=\"headerlink\" title=\"回不去\"></a>回不去</h2><p>从2016.11.3来杭实习到现在的2018.3.27，竟然也快过去了一年半了，不得不感叹时间真的过得很快，我有时候也经常想起大学的时光，想起来的那些人那些事，所有这些的过去开始一点点模糊，大家也都有了新的生活，就是这种淡淡的感觉里承载着四年时间里的酸甜苦辣，五味陈杂的感觉总让我想去触摸它却又始终不敢也不可能去触摸得到。</p>\n<h2 id=\"情绪\"><a href=\"#情绪\" class=\"headerlink\" title=\"情绪\"></a>情绪</h2><p>我有时候是个很悲观的人，容易积累负面情绪，我喜欢这样想：<code>发生这样的事情还不如回到以前</code>，所以表现出一点恋旧的情绪，同时也有一种<code>弱者情绪</code>，我定义的<code>弱者情绪</code>就是喜欢从弱者的视角去过度同情他，因为在我的想法里我一直是这样的<code>弱者</code></p>\n<h2 id=\"民谣\"><a href=\"#民谣\" class=\"headerlink\" title=\"民谣\"></a>民谣</h2><p>始终听不腻民谣，这种失意人的共鸣真的让自己心生怜悯，难免也会同情自己有多可怜，其实我也没有那么多痛痒的青春故事和一直低谷的情绪，可能就是喜欢吉他的声音吧。</p>\n<h2 id=\"健身\"><a href=\"#健身\" class=\"headerlink\" title=\"健身\"></a>健身</h2><p>最近我也开始了在keep的帮助下健身，从来没想过去健身的我竟然也开始了锻炼身体。我给自己定了目标，每天锻炼二十分钟，虽然我感觉我坚持不了几天了，但是这几天自律健身，我也开始想着去识图合理分配下班后到家剩下来的时间。这是一个好的开始，希望能好好地坚持！！！</p>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/三月的烟雨/898024871.jpg\" alt=\"Vincent van Gogh – Sunny Lawn in a Public Park\"></p>\n<blockquote>\n<p>Vincent van Gogh – Sunny Lawn in a Public Park 1888</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"三月的烟雨\"><a href=\"#三月的烟雨\" class=\"headerlink\" title=\"三月的烟雨\"></a>三月的烟雨</h1><blockquote>\n<p>三月的烟雨，飘荡的南方</p>\n</blockquote>\n<p>有很多次想写一写关于生活的笔记，碍于自己的描述表达能力不行迟迟都没有开始。所以这篇算是开山第一篇了，以后也终于可以在想说话、想表达、想发泄的时候能合理的释放情绪了。</p>\n<h2 id=\"回不去\"><a href=\"#回不去\" class=\"headerlink\" title=\"回不去\"></a>回不去</h2><p>从2016.11.3来杭实习到现在的2018.3.27，竟然也快过去了一年半了，不得不感叹时间真的过得很快，我有时候也经常想起大学的时光，想起来的那些人那些事，所有这些的过去开始一点点模糊，大家也都有了新的生活，就是这种淡淡的感觉里承载着四年时间里的酸甜苦辣，五味陈杂的感觉总让我想去触摸它却又始终不敢也不可能去触摸得到。</p>\n<h2 id=\"情绪\"><a href=\"#情绪\" class=\"headerlink\" title=\"情绪\"></a>情绪</h2><p>我有时候是个很悲观的人，容易积累负面情绪，我喜欢这样想：<code>发生这样的事情还不如回到以前</code>，所以表现出一点恋旧的情绪，同时也有一种<code>弱者情绪</code>，我定义的<code>弱者情绪</code>就是喜欢从弱者的视角去过度同情他，因为在我的想法里我一直是这样的<code>弱者</code></p>\n<h2 id=\"民谣\"><a href=\"#民谣\" class=\"headerlink\" title=\"民谣\"></a>民谣</h2><p>始终听不腻民谣，这种失意人的共鸣真的让自己心生怜悯，难免也会同情自己有多可怜，其实我也没有那么多痛痒的青春故事和一直低谷的情绪，可能就是喜欢吉他的声音吧。</p>\n<h2 id=\"健身\"><a href=\"#健身\" class=\"headerlink\" title=\"健身\"></a>健身</h2><p>最近我也开始了在keep的帮助下健身，从来没想过去健身的我竟然也开始了锻炼身体。我给自己定了目标，每天锻炼二十分钟，虽然我感觉我坚持不了几天了，但是这几天自律健身，我也开始想着去识图合理分配下班后到家剩下来的时间。这是一个好的开始，希望能好好地坚持！！！</p>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/三月的烟雨/898024871.jpg\" alt=\"Vincent van Gogh – Sunny Lawn in a Public Park\"></p>\n<blockquote>\n<p>Vincent van Gogh – Sunny Lawn in a Public Park 1888</p>\n</blockquote>\n"},{"title":"四月的清风","date":"2018-08-01T12:04:57.000Z","_content":"\n# 四月的清风\n\n我忍不住地感叹时间的快速流逝，这已经又到了四月份了，啊，时间请慢点走。\n\n## 压力\n\n做一个底层的`js`程序员，虽然表面上看起来没什么压力，可是我的内心总是被无形的压力给压迫着，像是一块重重的石头，压得喘不过气，我知道此时的我不能停下来，憋住气努力去学习。学习是一件持久的事，急躁不得，急躁不得，急躁不得。\n\n## 4.9总结\n\n过完清明节，玩了三天后，整个人好像有点零散了，注意力很难集中去做一件事，也可能是最近没什么项目可以做，有点无头苍蝇一般，不知道去做什么，心里也是因此有点烦躁啊，没有进步就是退步，希望找到一个点，平衡下，潜下心，去做一些事情。\n\n---\n\n![Vincent van Gogh – Old Man in Sorrow](四月的清风/1132638050.jpg)\n\n> Vincent van Gogh – Old Man in Sorrow 1890","source":"_posts/四月的清风.md","raw":"---\ntitle: 四月的清风\ndate: 2018-08-01 20:04:57\ntags:\ncategories: 生活\n---\n\n# 四月的清风\n\n我忍不住地感叹时间的快速流逝，这已经又到了四月份了，啊，时间请慢点走。\n\n## 压力\n\n做一个底层的`js`程序员，虽然表面上看起来没什么压力，可是我的内心总是被无形的压力给压迫着，像是一块重重的石头，压得喘不过气，我知道此时的我不能停下来，憋住气努力去学习。学习是一件持久的事，急躁不得，急躁不得，急躁不得。\n\n## 4.9总结\n\n过完清明节，玩了三天后，整个人好像有点零散了，注意力很难集中去做一件事，也可能是最近没什么项目可以做，有点无头苍蝇一般，不知道去做什么，心里也是因此有点烦躁啊，没有进步就是退步，希望找到一个点，平衡下，潜下心，去做一些事情。\n\n---\n\n![Vincent van Gogh – Old Man in Sorrow](四月的清风/1132638050.jpg)\n\n> Vincent van Gogh – Old Man in Sorrow 1890","slug":"四月的清风","published":1,"updated":"2018-08-02T01:04:23.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbvb3q50006ssz7w3y3vst0","content":"<h1 id=\"四月的清风\"><a href=\"#四月的清风\" class=\"headerlink\" title=\"四月的清风\"></a>四月的清风</h1><p>我忍不住地感叹时间的快速流逝，这已经又到了四月份了，啊，时间请慢点走。</p>\n<h2 id=\"压力\"><a href=\"#压力\" class=\"headerlink\" title=\"压力\"></a>压力</h2><p>做一个底层的<code>js</code>程序员，虽然表面上看起来没什么压力，可是我的内心总是被无形的压力给压迫着，像是一块重重的石头，压得喘不过气，我知道此时的我不能停下来，憋住气努力去学习。学习是一件持久的事，急躁不得，急躁不得，急躁不得。</p>\n<h2 id=\"4-9总结\"><a href=\"#4-9总结\" class=\"headerlink\" title=\"4.9总结\"></a>4.9总结</h2><p>过完清明节，玩了三天后，整个人好像有点零散了，注意力很难集中去做一件事，也可能是最近没什么项目可以做，有点无头苍蝇一般，不知道去做什么，心里也是因此有点烦躁啊，没有进步就是退步，希望找到一个点，平衡下，潜下心，去做一些事情。</p>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/四月的清风/1132638050.jpg\" alt=\"Vincent van Gogh – Old Man in Sorrow\"></p>\n<blockquote>\n<p>Vincent van Gogh – Old Man in Sorrow 1890</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"四月的清风\"><a href=\"#四月的清风\" class=\"headerlink\" title=\"四月的清风\"></a>四月的清风</h1><p>我忍不住地感叹时间的快速流逝，这已经又到了四月份了，啊，时间请慢点走。</p>\n<h2 id=\"压力\"><a href=\"#压力\" class=\"headerlink\" title=\"压力\"></a>压力</h2><p>做一个底层的<code>js</code>程序员，虽然表面上看起来没什么压力，可是我的内心总是被无形的压力给压迫着，像是一块重重的石头，压得喘不过气，我知道此时的我不能停下来，憋住气努力去学习。学习是一件持久的事，急躁不得，急躁不得，急躁不得。</p>\n<h2 id=\"4-9总结\"><a href=\"#4-9总结\" class=\"headerlink\" title=\"4.9总结\"></a>4.9总结</h2><p>过完清明节，玩了三天后，整个人好像有点零散了，注意力很难集中去做一件事，也可能是最近没什么项目可以做，有点无头苍蝇一般，不知道去做什么，心里也是因此有点烦躁啊，没有进步就是退步，希望找到一个点，平衡下，潜下心，去做一些事情。</p>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/四月的清风/1132638050.jpg\" alt=\"Vincent van Gogh – Old Man in Sorrow\"></p>\n<blockquote>\n<p>Vincent van Gogh – Old Man in Sorrow 1890</p>\n</blockquote>\n"},{"title":"小时候吃的","date":"2018-08-01T12:08:13.000Z","_content":"\n# 小时候吃的\n\n今天在公交车上回家的路上，看着车窗外城市慢慢被黑夜蒙住，街上下班的人来来往往，匆匆忙忙地，大大小小的店铺也都亮起了灯。每一天几乎同样的生活，同样的城市，好\n像什么都没有改变，只有我的年纪不断不断地在增长，有那么一瞬间，我恍惚地想起了小时候吃过的猪脏面。\n\n哈哈，我也不知道为什么突然想起了这个，小时候没什么钱，有太多太多想吃而不舍得吃的东西，长大了，也开始自己打工上班了，虽然钱不多，多少也还是积存了一小部分的钱，但小时候的味道好像很久没吃过了，垃圾街的小吃一条街也吃过几回，真的没有什么好吃的。但是小时候一碗早餐的糯米饭是真的棒啊，还有一碗紫菜汤，我在杭州打工的这段时间也吃过几次，嗯，差得远了。这么简单的糯米饭竟然做的还没有小时候的好吃，我觉得可能不是这家店没做好的原因，也可能人老了，味蕾也退化了，再也没有小时候那种的感觉了，那是种什么感觉呢，碗上的米粒全部吃干净，一粒都不剩，真是喜欢吃啊那个时候。\n\n那个时候竟然隔了那么久了，我现在依然还记得走路去小学时候的样子，在学校拐角的地方，棚子的下面，就是那家常吃的早饭店。我每天都要犹豫犹豫到底是吃糯米饭呢还是炒粉干呢，毕竟都很好吃啊，我的兜里就那么一两块，吃完早饭最多也就剩个五毛钱，那时候的物价真是让人无比的怀念啊！\n\n初中的时候，最喜欢吃的是学校出门左转一百来米的路边，都是卖的垃圾食品，大家也都喜欢中午跑那边吃吃东西，还蛮有想法，来一条两块的饭团，哎，真便宜啊，两块一条的饭团量还挺多啊，我都吃不完，旁边还有炸鸡柳，这个炸鸡柳是真的无敌好吃，我现在有点怀疑是不是加了什么罂粟壳之类的东西，怎么能那么好吃，我偶尔吃一次，，一块五一小杯，有钱人家小孩就会买个两三块钱那个装鸡柳的杯子被压的满满的看的羡慕死了，自己加料，一般也就孜然粉再来点醋，有的人喜欢加半杯醋，真的太可怕啦。\n\n高中，被关着，老实说，很少吃到好吃的东西，这几年基本没有什么特别喜欢吃的东西。\n\n大学，没有被关着，家里不是每个月固定给钱，钱不够就可以用，我没好意思向家里多要，所以也不怎么花钱，所以徐州也没留下什么特别喜欢吃的，前几天烤面筋突然火起来了，烤面筋勉强算的上还不错的廉价小食。\n\n开始打工了，自由了，也有自己的钱了，依然穷人想法，能省则省，攒钱很快乐，偶尔吃吃，和小时候的物价比起来，总感觉好多东西都消失了再也回不来了，就算同样是吃糯米饭好像带给我的感受已经完全没有小时候期待的那种感觉了，毕竟这价格和小时候的一比，根本就是对过去的回忆是一个冲击嘛！\n\n找个什么放假的时候，想找个猪脏粉的店吃一吃。在公交车上的时候查了一下，哟，这价格果然挺高啊，再考虑考虑。\n\n真想带上现在的钱，回到过去对小学拐角处棚子下的早饭店的老板说：\n\n“糯米饭和炒粉干都来一份！”\n\n---\n\n![Vincent van Gogh – Noon Rest from (after Millet)](小时候吃的/1997264555.jpg)\n\n> Vincent van Gogh – Noon Rest from (after Millet) 1890\n","source":"_posts/小时候吃的.md","raw":"---\ntitle: 小时候吃的\ndate: 2018-08-01 20:08:13\ntags:\ncategories: 生活\n---\n\n# 小时候吃的\n\n今天在公交车上回家的路上，看着车窗外城市慢慢被黑夜蒙住，街上下班的人来来往往，匆匆忙忙地，大大小小的店铺也都亮起了灯。每一天几乎同样的生活，同样的城市，好\n像什么都没有改变，只有我的年纪不断不断地在增长，有那么一瞬间，我恍惚地想起了小时候吃过的猪脏面。\n\n哈哈，我也不知道为什么突然想起了这个，小时候没什么钱，有太多太多想吃而不舍得吃的东西，长大了，也开始自己打工上班了，虽然钱不多，多少也还是积存了一小部分的钱，但小时候的味道好像很久没吃过了，垃圾街的小吃一条街也吃过几回，真的没有什么好吃的。但是小时候一碗早餐的糯米饭是真的棒啊，还有一碗紫菜汤，我在杭州打工的这段时间也吃过几次，嗯，差得远了。这么简单的糯米饭竟然做的还没有小时候的好吃，我觉得可能不是这家店没做好的原因，也可能人老了，味蕾也退化了，再也没有小时候那种的感觉了，那是种什么感觉呢，碗上的米粒全部吃干净，一粒都不剩，真是喜欢吃啊那个时候。\n\n那个时候竟然隔了那么久了，我现在依然还记得走路去小学时候的样子，在学校拐角的地方，棚子的下面，就是那家常吃的早饭店。我每天都要犹豫犹豫到底是吃糯米饭呢还是炒粉干呢，毕竟都很好吃啊，我的兜里就那么一两块，吃完早饭最多也就剩个五毛钱，那时候的物价真是让人无比的怀念啊！\n\n初中的时候，最喜欢吃的是学校出门左转一百来米的路边，都是卖的垃圾食品，大家也都喜欢中午跑那边吃吃东西，还蛮有想法，来一条两块的饭团，哎，真便宜啊，两块一条的饭团量还挺多啊，我都吃不完，旁边还有炸鸡柳，这个炸鸡柳是真的无敌好吃，我现在有点怀疑是不是加了什么罂粟壳之类的东西，怎么能那么好吃，我偶尔吃一次，，一块五一小杯，有钱人家小孩就会买个两三块钱那个装鸡柳的杯子被压的满满的看的羡慕死了，自己加料，一般也就孜然粉再来点醋，有的人喜欢加半杯醋，真的太可怕啦。\n\n高中，被关着，老实说，很少吃到好吃的东西，这几年基本没有什么特别喜欢吃的东西。\n\n大学，没有被关着，家里不是每个月固定给钱，钱不够就可以用，我没好意思向家里多要，所以也不怎么花钱，所以徐州也没留下什么特别喜欢吃的，前几天烤面筋突然火起来了，烤面筋勉强算的上还不错的廉价小食。\n\n开始打工了，自由了，也有自己的钱了，依然穷人想法，能省则省，攒钱很快乐，偶尔吃吃，和小时候的物价比起来，总感觉好多东西都消失了再也回不来了，就算同样是吃糯米饭好像带给我的感受已经完全没有小时候期待的那种感觉了，毕竟这价格和小时候的一比，根本就是对过去的回忆是一个冲击嘛！\n\n找个什么放假的时候，想找个猪脏粉的店吃一吃。在公交车上的时候查了一下，哟，这价格果然挺高啊，再考虑考虑。\n\n真想带上现在的钱，回到过去对小学拐角处棚子下的早饭店的老板说：\n\n“糯米饭和炒粉干都来一份！”\n\n---\n\n![Vincent van Gogh – Noon Rest from (after Millet)](小时候吃的/1997264555.jpg)\n\n> Vincent van Gogh – Noon Rest from (after Millet) 1890\n","slug":"小时候吃的","published":1,"updated":"2018-08-02T01:04:23.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbvb3q70007ssz7fgtioyhn","content":"<h1 id=\"小时候吃的\"><a href=\"#小时候吃的\" class=\"headerlink\" title=\"小时候吃的\"></a>小时候吃的</h1><p>今天在公交车上回家的路上，看着车窗外城市慢慢被黑夜蒙住，街上下班的人来来往往，匆匆忙忙地，大大小小的店铺也都亮起了灯。每一天几乎同样的生活，同样的城市，好<br>像什么都没有改变，只有我的年纪不断不断地在增长，有那么一瞬间，我恍惚地想起了小时候吃过的猪脏面。</p>\n<p>哈哈，我也不知道为什么突然想起了这个，小时候没什么钱，有太多太多想吃而不舍得吃的东西，长大了，也开始自己打工上班了，虽然钱不多，多少也还是积存了一小部分的钱，但小时候的味道好像很久没吃过了，垃圾街的小吃一条街也吃过几回，真的没有什么好吃的。但是小时候一碗早餐的糯米饭是真的棒啊，还有一碗紫菜汤，我在杭州打工的这段时间也吃过几次，嗯，差得远了。这么简单的糯米饭竟然做的还没有小时候的好吃，我觉得可能不是这家店没做好的原因，也可能人老了，味蕾也退化了，再也没有小时候那种的感觉了，那是种什么感觉呢，碗上的米粒全部吃干净，一粒都不剩，真是喜欢吃啊那个时候。</p>\n<p>那个时候竟然隔了那么久了，我现在依然还记得走路去小学时候的样子，在学校拐角的地方，棚子的下面，就是那家常吃的早饭店。我每天都要犹豫犹豫到底是吃糯米饭呢还是炒粉干呢，毕竟都很好吃啊，我的兜里就那么一两块，吃完早饭最多也就剩个五毛钱，那时候的物价真是让人无比的怀念啊！</p>\n<p>初中的时候，最喜欢吃的是学校出门左转一百来米的路边，都是卖的垃圾食品，大家也都喜欢中午跑那边吃吃东西，还蛮有想法，来一条两块的饭团，哎，真便宜啊，两块一条的饭团量还挺多啊，我都吃不完，旁边还有炸鸡柳，这个炸鸡柳是真的无敌好吃，我现在有点怀疑是不是加了什么罂粟壳之类的东西，怎么能那么好吃，我偶尔吃一次，，一块五一小杯，有钱人家小孩就会买个两三块钱那个装鸡柳的杯子被压的满满的看的羡慕死了，自己加料，一般也就孜然粉再来点醋，有的人喜欢加半杯醋，真的太可怕啦。</p>\n<p>高中，被关着，老实说，很少吃到好吃的东西，这几年基本没有什么特别喜欢吃的东西。</p>\n<p>大学，没有被关着，家里不是每个月固定给钱，钱不够就可以用，我没好意思向家里多要，所以也不怎么花钱，所以徐州也没留下什么特别喜欢吃的，前几天烤面筋突然火起来了，烤面筋勉强算的上还不错的廉价小食。</p>\n<p>开始打工了，自由了，也有自己的钱了，依然穷人想法，能省则省，攒钱很快乐，偶尔吃吃，和小时候的物价比起来，总感觉好多东西都消失了再也回不来了，就算同样是吃糯米饭好像带给我的感受已经完全没有小时候期待的那种感觉了，毕竟这价格和小时候的一比，根本就是对过去的回忆是一个冲击嘛！</p>\n<p>找个什么放假的时候，想找个猪脏粉的店吃一吃。在公交车上的时候查了一下，哟，这价格果然挺高啊，再考虑考虑。</p>\n<p>真想带上现在的钱，回到过去对小学拐角处棚子下的早饭店的老板说：</p>\n<p>“糯米饭和炒粉干都来一份！”</p>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/小时候吃的/1997264555.jpg\" alt=\"Vincent van Gogh – Noon Rest from (after Millet)\"></p>\n<blockquote>\n<p>Vincent van Gogh – Noon Rest from (after Millet) 1890</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"小时候吃的\"><a href=\"#小时候吃的\" class=\"headerlink\" title=\"小时候吃的\"></a>小时候吃的</h1><p>今天在公交车上回家的路上，看着车窗外城市慢慢被黑夜蒙住，街上下班的人来来往往，匆匆忙忙地，大大小小的店铺也都亮起了灯。每一天几乎同样的生活，同样的城市，好<br>像什么都没有改变，只有我的年纪不断不断地在增长，有那么一瞬间，我恍惚地想起了小时候吃过的猪脏面。</p>\n<p>哈哈，我也不知道为什么突然想起了这个，小时候没什么钱，有太多太多想吃而不舍得吃的东西，长大了，也开始自己打工上班了，虽然钱不多，多少也还是积存了一小部分的钱，但小时候的味道好像很久没吃过了，垃圾街的小吃一条街也吃过几回，真的没有什么好吃的。但是小时候一碗早餐的糯米饭是真的棒啊，还有一碗紫菜汤，我在杭州打工的这段时间也吃过几次，嗯，差得远了。这么简单的糯米饭竟然做的还没有小时候的好吃，我觉得可能不是这家店没做好的原因，也可能人老了，味蕾也退化了，再也没有小时候那种的感觉了，那是种什么感觉呢，碗上的米粒全部吃干净，一粒都不剩，真是喜欢吃啊那个时候。</p>\n<p>那个时候竟然隔了那么久了，我现在依然还记得走路去小学时候的样子，在学校拐角的地方，棚子的下面，就是那家常吃的早饭店。我每天都要犹豫犹豫到底是吃糯米饭呢还是炒粉干呢，毕竟都很好吃啊，我的兜里就那么一两块，吃完早饭最多也就剩个五毛钱，那时候的物价真是让人无比的怀念啊！</p>\n<p>初中的时候，最喜欢吃的是学校出门左转一百来米的路边，都是卖的垃圾食品，大家也都喜欢中午跑那边吃吃东西，还蛮有想法，来一条两块的饭团，哎，真便宜啊，两块一条的饭团量还挺多啊，我都吃不完，旁边还有炸鸡柳，这个炸鸡柳是真的无敌好吃，我现在有点怀疑是不是加了什么罂粟壳之类的东西，怎么能那么好吃，我偶尔吃一次，，一块五一小杯，有钱人家小孩就会买个两三块钱那个装鸡柳的杯子被压的满满的看的羡慕死了，自己加料，一般也就孜然粉再来点醋，有的人喜欢加半杯醋，真的太可怕啦。</p>\n<p>高中，被关着，老实说，很少吃到好吃的东西，这几年基本没有什么特别喜欢吃的东西。</p>\n<p>大学，没有被关着，家里不是每个月固定给钱，钱不够就可以用，我没好意思向家里多要，所以也不怎么花钱，所以徐州也没留下什么特别喜欢吃的，前几天烤面筋突然火起来了，烤面筋勉强算的上还不错的廉价小食。</p>\n<p>开始打工了，自由了，也有自己的钱了，依然穷人想法，能省则省，攒钱很快乐，偶尔吃吃，和小时候的物价比起来，总感觉好多东西都消失了再也回不来了，就算同样是吃糯米饭好像带给我的感受已经完全没有小时候期待的那种感觉了，毕竟这价格和小时候的一比，根本就是对过去的回忆是一个冲击嘛！</p>\n<p>找个什么放假的时候，想找个猪脏粉的店吃一吃。在公交车上的时候查了一下，哟，这价格果然挺高啊，再考虑考虑。</p>\n<p>真想带上现在的钱，回到过去对小学拐角处棚子下的早饭店的老板说：</p>\n<p>“糯米饭和炒粉干都来一份！”</p>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/小时候吃的/1997264555.jpg\" alt=\"Vincent van Gogh – Noon Rest from (after Millet)\"></p>\n<blockquote>\n<p>Vincent van Gogh – Noon Rest from (after Millet) 1890</p>\n</blockquote>\n"},{"title":"你好，世界","date":"2018-08-01T03:14:20.000Z","_content":"\n折腾了一天,终于用 `hexo` 搭出来博客了,一开始上手的时候感觉很简单,应该小半天就能把原来的文章迁移过来，结果还是遇到了不少的坑。中途在 `gitee` 和 `github` 上来回折腾，`github` 实在是太卡了，无形中增加了不少搭建的时间。所幸，最终还是弄好了，下一步就是把之前写在另一个仓库下的文章迁移过来了。\n\n`hexo` 最大的方便就是完成了基本的配置和主题的选择之后，只要专心写好 `markdown` 就好了，文章页面就交由 `hexo` 处理即可，大大提升对文章本身的专注力。\n\n最后还是要说一句：“你好，世界！”\n\n---\n\n![Cafe Terrace in Arles at Night](你好，世界/1959017488.jpg)\n> Vincent van Gogh – Cafe Terrace in Arles at Night 1888\n","source":"_posts/你好，世界.md","raw":"---\ntitle: 你好，世界\ndate: 2018-08-01 11:14:20\ntags:\ncategories: 杂记\n---\n\n折腾了一天,终于用 `hexo` 搭出来博客了,一开始上手的时候感觉很简单,应该小半天就能把原来的文章迁移过来，结果还是遇到了不少的坑。中途在 `gitee` 和 `github` 上来回折腾，`github` 实在是太卡了，无形中增加了不少搭建的时间。所幸，最终还是弄好了，下一步就是把之前写在另一个仓库下的文章迁移过来了。\n\n`hexo` 最大的方便就是完成了基本的配置和主题的选择之后，只要专心写好 `markdown` 就好了，文章页面就交由 `hexo` 处理即可，大大提升对文章本身的专注力。\n\n最后还是要说一句：“你好，世界！”\n\n---\n\n![Cafe Terrace in Arles at Night](你好，世界/1959017488.jpg)\n> Vincent van Gogh – Cafe Terrace in Arles at Night 1888\n","slug":"你好，世界","published":1,"updated":"2018-08-01T04:02:43.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbvb3q80008ssz7vx2wd736","content":"<p>折腾了一天,终于用 <code>hexo</code> 搭出来博客了,一开始上手的时候感觉很简单,应该小半天就能把原来的文章迁移过来，结果还是遇到了不少的坑。中途在 <code>gitee</code> 和 <code>github</code> 上来回折腾，<code>github</code> 实在是太卡了，无形中增加了不少搭建的时间。所幸，最终还是弄好了，下一步就是把之前写在另一个仓库下的文章迁移过来了。</p>\n<p><code>hexo</code> 最大的方便就是完成了基本的配置和主题的选择之后，只要专心写好 <code>markdown</code> 就好了，文章页面就交由 <code>hexo</code> 处理即可，大大提升对文章本身的专注力。</p>\n<p>最后还是要说一句：“你好，世界！”</p>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/你好，世界/1959017488.jpg\" alt=\"Cafe Terrace in Arles at Night\"></p>\n<blockquote>\n<p>Vincent van Gogh – Cafe Terrace in Arles at Night 1888</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>折腾了一天,终于用 <code>hexo</code> 搭出来博客了,一开始上手的时候感觉很简单,应该小半天就能把原来的文章迁移过来，结果还是遇到了不少的坑。中途在 <code>gitee</code> 和 <code>github</code> 上来回折腾，<code>github</code> 实在是太卡了，无形中增加了不少搭建的时间。所幸，最终还是弄好了，下一步就是把之前写在另一个仓库下的文章迁移过来了。</p>\n<p><code>hexo</code> 最大的方便就是完成了基本的配置和主题的选择之后，只要专心写好 <code>markdown</code> 就好了，文章页面就交由 <code>hexo</code> 处理即可，大大提升对文章本身的专注力。</p>\n<p>最后还是要说一句：“你好，世界！”</p>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/你好，世界/1959017488.jpg\" alt=\"Cafe Terrace in Arles at Night\"></p>\n<blockquote>\n<p>Vincent van Gogh – Cafe Terrace in Arles at Night 1888</p>\n</blockquote>\n"},{"title":"神奇的reduce","date":"2018-08-01T04:06:23.000Z","_content":"\n# 神奇的reduce\n\n这是一个用得好就很装逼的方法，简约而强大。\n\n## 干什么用的\n\n> reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。\n说的挺复杂，看个mdn例子先：\n\n```js\nconst arrary1 = [1, 2, 3, 4]\nconst reducer = (accumulator, currentValue) => accumulator + currentValue\n//1+2+3+4\nconsole.log(array1.reduce(reducer))\n\n//5+1+2+3+4\nconsole.log(array1.reduce(reducer, 5))\n```\n\n## 语法\n\n```js\narr.reduce(callback[,initalValue])\n```\n\n### 参数\n\n* callback 回调函数\n  * accumulator **累加器累加回调的返回值**\n  * currentValue **数组中正在处理的元素**\n  * currentIndex(optional) 数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。\n  * array(optional) 调用reduce的数组\n\n* initalValue(optional) 用作第一个调用 callback的第一个参数的值\n\n### 返回值\n\n函数累计处理的结果\n\n## 描述\n\n`reduce`为数组中的每一个元素依次执行`callback`函数，不包括数组中被删除或从未被赋值的元素，接受四个参数。\n\n回调函数第一次执行时，`accumulator`和`currentValue`的取值有两种情况：调用`reduce`时提供`initialValue`，`accumulator`取值为`initialValue`，`currentValue`取数组中的第一个值；没有提供 `initialValue`，`accumulator`取数组中的第一个值，`currentValue`取数组中的第二个值。\n\n> 如果没有提供`initialValue`，`reduce` 会从索引1的地方开始执行 `callback` 方法，跳过第一个索引。如果提供`initialValue`，从索引0开始。\n\n如果数组为空且没有提供`initialValue`，会抛出`TypeError` 。如果数组仅有一个元素（无论位置如何）并且没有提供`initialValue`， 或者有提供`initialValue`但是数组为空，那么此唯一值将被返回并且`callback`不会被执行。\n\n提供初始值通常更安全，正如下面的例子，如果没有提供initialValue，则可能有三种输出：\n\n```js\nvar maxCallback = ( pre, cur ) => Math.max( pre.x, cur.x );\nvar maxCallback2 = ( max, cur ) => Math.max( max, cur );\n\n// reduce() without initialValue\n[ { x: 22 }, { x: 42 } ].reduce( maxCallback ); // 42\n[ { x: 22 }            ].reduce( maxCallback ); // { x: 22 }\n[                      ].reduce( maxCallback ); // TypeError\n\n// map/reduce; better solution, also works for empty arrays\n[ { x: 22 }, { x: 42 } ].map( el => el.x )\n                        .reduce( maxCallback2, -Infinity );\n```\n\n### reduce如何运行\n\n假如运行下段代码：\n\n```js\n[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array){\n  return accumulator + currentValue;\n});\n```\n\n| callback    | accumulator | currentValue | currentIndex | array           | return value |\n| ----------- | ----------- | ------------ | ------------ | --------------- | ------------ |\n| first call  | 0           | 1            | 1            | [0, 1, 2, 3, 4] | 1            |\n| second call | 1           | 2            | 2            | [0, 1, 2, 3, 4] | 3            |\n| third call  | 3           | 3            | 3            | [0, 1, 2, 3, 4] | 6            |\n| fourth call | 6           | 4            | 4            | [0, 1, 2, 3, 4] | 10           |\n由`reduce`返回的值将是上次回调调用的值`（10）`。\n\n你同样可以使用箭头函数的形式，下面的代码会输出跟前面一样的结果\n\n您还可以提供[Arrow Function](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions) 代替完整功能。 下面的代码将产生与上面的代码中相同的输出：\n\n```js\n[0, 1, 2, 3, 4].reduce((prev, curr) => prev + curr );\n```\n\n如果你打算提供一个初始值作为`reduce`方法的第二个参数，以下是运行过程及结果：\n\n```js\n[0, 1, 2, 3, 4].reduce((accumulator, currentValue, currentIndex, array) => { return accumulator + currentValue; }, 10 )\n```\n\n| callback    | accumulator | currentValue | currentIndex | array           | return value |\n| ----------- | ----------- | ------------ | ------------ | --------------- | ------------ |\n| first call  | 10          | 0            | 0            | [0, 1, 2, 3, 4] | 10           |\n| second call | 10          | 1            | 1            | [0, 1, 2, 3, 4] | 11           |\n| third call  | 11          | 2            | 2            | [0, 1, 2, 3, 4] | 13           |\n| fourth call | 13          | 3            | 3            | [0, 1, 2, 3, 4] | 16           |\n| fourth call | 16          | 4            | 4            | [0, 1, 2, 3, 4] | 20           |\n这种情况下reduce返回的值是`20`。\n\n## 例子\n\n数组里所有值的和\n\n```js\nvar sum = [0, 1, 2, 3].reduce(function (a, b) {\n  return a + b;\n}, 0);\n// sum is 6\n```\n\n你也可以写成箭头函数的形式：\n\n```js\nvar total = [ 0, 1, 2, 3 ].reduce(\n  ( acc, cur ) => acc + cur,\n  0\n);\n```\n\n### 将二维数组转化为一维\n\n```js\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  function(a, b) {\n    return a.concat(b);\n  },\n  []\n);\n// flattened is [0, 1, 2, 3, 4, 5]\n```\n\n你也可以写成箭头函数的形式：\n\n```js\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n ( acc, cur ) => acc.concat(cur),\n []\n);\n```\n\n### 计算数组中每个元素出现的次数\n\n```js\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nvar countedNames = names.reduce(function (allNames, name) { \n  if (name in allNames) {\n    allNames[name]++;\n  }\n  else {\n    allNames[name] = 1;\n  }\n  return allNames;\n}, {});\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n\n### 使用扩展运算符和initialValue绑定包含在对象数组中的数组\n\n```js\n// friends - an array of objects \n// where object field \"books\" - list of favorite books \nvar friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}];\n\n// allbooks - list which will contain all friends' books +  \n// additional list contained in initialValue\nvar allbooks = friends.reduce(function(prev, curr) {\n  return [...prev, ...curr.books];\n}, ['Alphabet']);\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', \n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n```\n\n### 数组去重\n\n```js\nlet arr = [1,2,1,2,3,5,4,5,3,4,4,4,4];\nlet result = arr.sort().reduce((init, current)=>{\n    if(init.length===0 || init[init.length-1]!==current){\n        init.push(current);\n    }\n    return init;\n}, []);\nconsole.log(result); //[1,2,3,4,5]\n```\n\n### 同时实现map和filter\n\n```js\nconst numbers = [10, 20, 30, 40];\nconst doubledOver50 = numbers.reduce((finalList, num) => {\n  \n  num = num * 2; \n  \n  if (num > 50) {\n    finalList.push(num);\n  }\n  return finalList;\n}, []);\ndoubledOver50; // [60, 80]\n```\n\n### 匹配圆括号\n\nreduce的另外一个用途是能够匹配给定字符串中的圆括号。对于一个含有圆括号的字符串，我们需要知道(和)的数量是否一致，并且(是否出现在)之前。\n\n下面的代码中我们使用reduce可以轻松地解决这个问题。我们只需要先声明一个counter变量，初值为0。在遇到(时counter加一，遇到)时counter减一。如果左右括号数目匹配，那最终结果为0。\n\n```js\n//Returns 0 if balanced.\nconst isParensBalanced = (str) => {\n  return str.split('').reduce((counter, char) => {\n    if(counter < 0) { //matched \")\" before \"(\"\n      return counter;\n    } else if(char === '(') {\n      return ++counter;\n    } else if(char === ')') {\n      return --counter;\n    }  else { //matched some other char\n      return counter;\n    }\n    \n  }, 0); //<-- starting value of the counter\n}\nisParensBalanced('(())') // 0 <-- balanced\nisParensBalanced('(asdfds)') //0 <-- balanced\nisParensBalanced('(()') // 1 <-- not balanced\nisParensBalanced(')(') // -1 <-- not balanced\n```\n\n## Polyfill\n\n```js\n// Production steps of ECMA-262, Edition 5, 15.4.4.21\n// Reference: http://es5.github.io/#x15.4.4.21\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\nif (!Array.prototype.reduce) {\n  Object.defineProperty(Array.prototype, 'reduce', {\n    value: function(callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError( 'Array.prototype.reduce ' + \n          'called on null or undefined' );\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError( callback +\n          ' is not a function');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0; \n\n      // Steps 3, 4, 5, 6, 7      \n      var k = 0; \n      var value;\n\n      if (arguments.length >= 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in o)) {\n          k++; \n        }\n\n        // 3. If len is 0 and initialValue is not present,\n        //    throw a TypeError exception.\n        if (k >= len) {\n          throw new TypeError( 'Reduce of empty array ' +\n            'with no initial value' );\n        }\n        value = o[k++];\n      }\n\n      // 8. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        // c. If kPresent is true, then\n        //    i.  Let kValue be ? Get(O, Pk).\n        //    ii. Let accumulator be ? Call(\n        //          callbackfn, undefined,\n        //          « accumulator, kValue, k, O »).\n        if (k in o) {\n          value = callback(value, o[k], k, o);\n        }\n\n        // d. Increase k by 1.      \n        k++;\n      }\n\n      // 9. Return accumulator.\n      return value;\n    }\n  });\n}\n```\n\n[参考链接](https://segmentfault.com/a/1190000013972464?utm_source=feed-content)\n\n---\n\n![Vincent van Gogh – The Parsonage at Nuenen](神奇的reduce/1917180847.jpg)\n\n> Vincent van Gogh – The Parsonage at Nuenen 1885\n","source":"_posts/神奇的reduce.md","raw":"---\ntitle: 神奇的reduce\ndate: 2018-08-01 12:06:23\ntags:\n  - reduce\n  - 数组\ncategories: 前端\n---\n\n# 神奇的reduce\n\n这是一个用得好就很装逼的方法，简约而强大。\n\n## 干什么用的\n\n> reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。\n说的挺复杂，看个mdn例子先：\n\n```js\nconst arrary1 = [1, 2, 3, 4]\nconst reducer = (accumulator, currentValue) => accumulator + currentValue\n//1+2+3+4\nconsole.log(array1.reduce(reducer))\n\n//5+1+2+3+4\nconsole.log(array1.reduce(reducer, 5))\n```\n\n## 语法\n\n```js\narr.reduce(callback[,initalValue])\n```\n\n### 参数\n\n* callback 回调函数\n  * accumulator **累加器累加回调的返回值**\n  * currentValue **数组中正在处理的元素**\n  * currentIndex(optional) 数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。\n  * array(optional) 调用reduce的数组\n\n* initalValue(optional) 用作第一个调用 callback的第一个参数的值\n\n### 返回值\n\n函数累计处理的结果\n\n## 描述\n\n`reduce`为数组中的每一个元素依次执行`callback`函数，不包括数组中被删除或从未被赋值的元素，接受四个参数。\n\n回调函数第一次执行时，`accumulator`和`currentValue`的取值有两种情况：调用`reduce`时提供`initialValue`，`accumulator`取值为`initialValue`，`currentValue`取数组中的第一个值；没有提供 `initialValue`，`accumulator`取数组中的第一个值，`currentValue`取数组中的第二个值。\n\n> 如果没有提供`initialValue`，`reduce` 会从索引1的地方开始执行 `callback` 方法，跳过第一个索引。如果提供`initialValue`，从索引0开始。\n\n如果数组为空且没有提供`initialValue`，会抛出`TypeError` 。如果数组仅有一个元素（无论位置如何）并且没有提供`initialValue`， 或者有提供`initialValue`但是数组为空，那么此唯一值将被返回并且`callback`不会被执行。\n\n提供初始值通常更安全，正如下面的例子，如果没有提供initialValue，则可能有三种输出：\n\n```js\nvar maxCallback = ( pre, cur ) => Math.max( pre.x, cur.x );\nvar maxCallback2 = ( max, cur ) => Math.max( max, cur );\n\n// reduce() without initialValue\n[ { x: 22 }, { x: 42 } ].reduce( maxCallback ); // 42\n[ { x: 22 }            ].reduce( maxCallback ); // { x: 22 }\n[                      ].reduce( maxCallback ); // TypeError\n\n// map/reduce; better solution, also works for empty arrays\n[ { x: 22 }, { x: 42 } ].map( el => el.x )\n                        .reduce( maxCallback2, -Infinity );\n```\n\n### reduce如何运行\n\n假如运行下段代码：\n\n```js\n[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array){\n  return accumulator + currentValue;\n});\n```\n\n| callback    | accumulator | currentValue | currentIndex | array           | return value |\n| ----------- | ----------- | ------------ | ------------ | --------------- | ------------ |\n| first call  | 0           | 1            | 1            | [0, 1, 2, 3, 4] | 1            |\n| second call | 1           | 2            | 2            | [0, 1, 2, 3, 4] | 3            |\n| third call  | 3           | 3            | 3            | [0, 1, 2, 3, 4] | 6            |\n| fourth call | 6           | 4            | 4            | [0, 1, 2, 3, 4] | 10           |\n由`reduce`返回的值将是上次回调调用的值`（10）`。\n\n你同样可以使用箭头函数的形式，下面的代码会输出跟前面一样的结果\n\n您还可以提供[Arrow Function](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions) 代替完整功能。 下面的代码将产生与上面的代码中相同的输出：\n\n```js\n[0, 1, 2, 3, 4].reduce((prev, curr) => prev + curr );\n```\n\n如果你打算提供一个初始值作为`reduce`方法的第二个参数，以下是运行过程及结果：\n\n```js\n[0, 1, 2, 3, 4].reduce((accumulator, currentValue, currentIndex, array) => { return accumulator + currentValue; }, 10 )\n```\n\n| callback    | accumulator | currentValue | currentIndex | array           | return value |\n| ----------- | ----------- | ------------ | ------------ | --------------- | ------------ |\n| first call  | 10          | 0            | 0            | [0, 1, 2, 3, 4] | 10           |\n| second call | 10          | 1            | 1            | [0, 1, 2, 3, 4] | 11           |\n| third call  | 11          | 2            | 2            | [0, 1, 2, 3, 4] | 13           |\n| fourth call | 13          | 3            | 3            | [0, 1, 2, 3, 4] | 16           |\n| fourth call | 16          | 4            | 4            | [0, 1, 2, 3, 4] | 20           |\n这种情况下reduce返回的值是`20`。\n\n## 例子\n\n数组里所有值的和\n\n```js\nvar sum = [0, 1, 2, 3].reduce(function (a, b) {\n  return a + b;\n}, 0);\n// sum is 6\n```\n\n你也可以写成箭头函数的形式：\n\n```js\nvar total = [ 0, 1, 2, 3 ].reduce(\n  ( acc, cur ) => acc + cur,\n  0\n);\n```\n\n### 将二维数组转化为一维\n\n```js\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  function(a, b) {\n    return a.concat(b);\n  },\n  []\n);\n// flattened is [0, 1, 2, 3, 4, 5]\n```\n\n你也可以写成箭头函数的形式：\n\n```js\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n ( acc, cur ) => acc.concat(cur),\n []\n);\n```\n\n### 计算数组中每个元素出现的次数\n\n```js\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nvar countedNames = names.reduce(function (allNames, name) { \n  if (name in allNames) {\n    allNames[name]++;\n  }\n  else {\n    allNames[name] = 1;\n  }\n  return allNames;\n}, {});\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n\n### 使用扩展运算符和initialValue绑定包含在对象数组中的数组\n\n```js\n// friends - an array of objects \n// where object field \"books\" - list of favorite books \nvar friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}];\n\n// allbooks - list which will contain all friends' books +  \n// additional list contained in initialValue\nvar allbooks = friends.reduce(function(prev, curr) {\n  return [...prev, ...curr.books];\n}, ['Alphabet']);\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', \n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n```\n\n### 数组去重\n\n```js\nlet arr = [1,2,1,2,3,5,4,5,3,4,4,4,4];\nlet result = arr.sort().reduce((init, current)=>{\n    if(init.length===0 || init[init.length-1]!==current){\n        init.push(current);\n    }\n    return init;\n}, []);\nconsole.log(result); //[1,2,3,4,5]\n```\n\n### 同时实现map和filter\n\n```js\nconst numbers = [10, 20, 30, 40];\nconst doubledOver50 = numbers.reduce((finalList, num) => {\n  \n  num = num * 2; \n  \n  if (num > 50) {\n    finalList.push(num);\n  }\n  return finalList;\n}, []);\ndoubledOver50; // [60, 80]\n```\n\n### 匹配圆括号\n\nreduce的另外一个用途是能够匹配给定字符串中的圆括号。对于一个含有圆括号的字符串，我们需要知道(和)的数量是否一致，并且(是否出现在)之前。\n\n下面的代码中我们使用reduce可以轻松地解决这个问题。我们只需要先声明一个counter变量，初值为0。在遇到(时counter加一，遇到)时counter减一。如果左右括号数目匹配，那最终结果为0。\n\n```js\n//Returns 0 if balanced.\nconst isParensBalanced = (str) => {\n  return str.split('').reduce((counter, char) => {\n    if(counter < 0) { //matched \")\" before \"(\"\n      return counter;\n    } else if(char === '(') {\n      return ++counter;\n    } else if(char === ')') {\n      return --counter;\n    }  else { //matched some other char\n      return counter;\n    }\n    \n  }, 0); //<-- starting value of the counter\n}\nisParensBalanced('(())') // 0 <-- balanced\nisParensBalanced('(asdfds)') //0 <-- balanced\nisParensBalanced('(()') // 1 <-- not balanced\nisParensBalanced(')(') // -1 <-- not balanced\n```\n\n## Polyfill\n\n```js\n// Production steps of ECMA-262, Edition 5, 15.4.4.21\n// Reference: http://es5.github.io/#x15.4.4.21\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\nif (!Array.prototype.reduce) {\n  Object.defineProperty(Array.prototype, 'reduce', {\n    value: function(callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError( 'Array.prototype.reduce ' + \n          'called on null or undefined' );\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError( callback +\n          ' is not a function');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0; \n\n      // Steps 3, 4, 5, 6, 7      \n      var k = 0; \n      var value;\n\n      if (arguments.length >= 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in o)) {\n          k++; \n        }\n\n        // 3. If len is 0 and initialValue is not present,\n        //    throw a TypeError exception.\n        if (k >= len) {\n          throw new TypeError( 'Reduce of empty array ' +\n            'with no initial value' );\n        }\n        value = o[k++];\n      }\n\n      // 8. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        // c. If kPresent is true, then\n        //    i.  Let kValue be ? Get(O, Pk).\n        //    ii. Let accumulator be ? Call(\n        //          callbackfn, undefined,\n        //          « accumulator, kValue, k, O »).\n        if (k in o) {\n          value = callback(value, o[k], k, o);\n        }\n\n        // d. Increase k by 1.      \n        k++;\n      }\n\n      // 9. Return accumulator.\n      return value;\n    }\n  });\n}\n```\n\n[参考链接](https://segmentfault.com/a/1190000013972464?utm_source=feed-content)\n\n---\n\n![Vincent van Gogh – The Parsonage at Nuenen](神奇的reduce/1917180847.jpg)\n\n> Vincent van Gogh – The Parsonage at Nuenen 1885\n","slug":"神奇的reduce","published":1,"updated":"2018-08-01T04:18:14.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbvb3s8000issz7755i9f35","content":"<h1 id=\"神奇的reduce\"><a href=\"#神奇的reduce\" class=\"headerlink\" title=\"神奇的reduce\"></a>神奇的reduce</h1><p>这是一个用得好就很装逼的方法，简约而强大。</p>\n<h2 id=\"干什么用的\"><a href=\"#干什么用的\" class=\"headerlink\" title=\"干什么用的\"></a>干什么用的</h2><blockquote>\n<p>reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。<br>说的挺复杂，看个mdn例子先：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue</span><br><span class=\"line\"><span class=\"comment\">//1+2+3+4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//5+1+2+3+4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer, <span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback[,initalValue])</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li><p>callback 回调函数</p>\n<ul>\n<li>accumulator <strong>累加器累加回调的返回值</strong></li>\n<li>currentValue <strong>数组中正在处理的元素</strong></li>\n<li>currentIndex(optional) 数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。</li>\n<li>array(optional) 调用reduce的数组</li>\n</ul>\n</li>\n<li><p>initalValue(optional) 用作第一个调用 callback的第一个参数的值</p>\n</li>\n</ul>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>函数累计处理的结果</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p><code>reduce</code>为数组中的每一个元素依次执行<code>callback</code>函数，不包括数组中被删除或从未被赋值的元素，接受四个参数。</p>\n<p>回调函数第一次执行时，<code>accumulator</code>和<code>currentValue</code>的取值有两种情况：调用<code>reduce</code>时提供<code>initialValue</code>，<code>accumulator</code>取值为<code>initialValue</code>，<code>currentValue</code>取数组中的第一个值；没有提供 <code>initialValue</code>，<code>accumulator</code>取数组中的第一个值，<code>currentValue</code>取数组中的第二个值。</p>\n<blockquote>\n<p>如果没有提供<code>initialValue</code>，<code>reduce</code> 会从索引1的地方开始执行 <code>callback</code> 方法，跳过第一个索引。如果提供<code>initialValue</code>，从索引0开始。</p>\n</blockquote>\n<p>如果数组为空且没有提供<code>initialValue</code>，会抛出<code>TypeError</code> 。如果数组仅有一个元素（无论位置如何）并且没有提供<code>initialValue</code>， 或者有提供<code>initialValue</code>但是数组为空，那么此唯一值将被返回并且<code>callback</code>不会被执行。</p>\n<p>提供初始值通常更安全，正如下面的例子，如果没有提供initialValue，则可能有三种输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxCallback = <span class=\"function\">(<span class=\"params\"> pre, cur </span>) =&gt;</span> <span class=\"built_in\">Math</span>.max( pre.x, cur.x );</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxCallback2 = <span class=\"function\">(<span class=\"params\"> max, cur </span>) =&gt;</span> <span class=\"built_in\">Math</span>.max( max, cur );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reduce() without initialValue</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">42</span> &#125; ].reduce( maxCallback ); <span class=\"comment\">// 42</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;            ].reduce( maxCallback ); <span class=\"comment\">// &#123; x: 22 &#125;</span></span><br><span class=\"line\">[                      ].reduce( maxCallback ); <span class=\"comment\">// TypeError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map/reduce; better solution, also works for empty arrays</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">42</span> &#125; ].map( <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el.x )</span><br><span class=\"line\">                        .reduce( maxCallback2, -<span class=\"literal\">Infinity</span> );</span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce如何运行\"><a href=\"#reduce如何运行\" class=\"headerlink\" title=\"reduce如何运行\"></a>reduce如何运行</h3><p>假如运行下段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">accumulator, currentValue, currentIndex, array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> accumulator + currentValue;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>accumulator</th>\n<th>currentValue</th>\n<th>currentIndex</th>\n<th>array</th>\n<th>return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>first call</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>1</td>\n</tr>\n<tr>\n<td>second call</td>\n<td>1</td>\n<td>2</td>\n<td>2</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>3</td>\n</tr>\n<tr>\n<td>third call</td>\n<td>3</td>\n<td>3</td>\n<td>3</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>6</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>6</td>\n<td>4</td>\n<td>4</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<p>由<code>reduce</code>返回的值将是上次回调调用的值<code>（10）</code>。</p>\n<p>你同样可以使用箭头函数的形式，下面的代码会输出跟前面一样的结果</p>\n<p>您还可以提供<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">Arrow Function</a> 代替完整功能。 下面的代码将产生与上面的代码中相同的输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\">(<span class=\"params\">prev, curr</span>) =&gt;</span> prev + curr );</span><br></pre></td></tr></table></figure>\n<p>如果你打算提供一个初始值作为<code>reduce</code>方法的第二个参数，以下是运行过程及结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\">(<span class=\"params\">accumulator, currentValue, currentIndex, array</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> accumulator + currentValue; &#125;, <span class=\"number\">10</span> )</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>accumulator</th>\n<th>currentValue</th>\n<th>currentIndex</th>\n<th>array</th>\n<th>return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>first call</td>\n<td>10</td>\n<td>0</td>\n<td>0</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>10</td>\n</tr>\n<tr>\n<td>second call</td>\n<td>10</td>\n<td>1</td>\n<td>1</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>11</td>\n</tr>\n<tr>\n<td>third call</td>\n<td>11</td>\n<td>2</td>\n<td>2</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>13</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>13</td>\n<td>3</td>\n<td>3</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>16</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>16</td>\n<td>4</td>\n<td>4</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<p>这种情况下reduce返回的值是<code>20</code>。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>数组里所有值的和</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// sum is 6</span></span><br></pre></td></tr></table></figure>\n<p>你也可以写成箭头函数的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> total = [ <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ].reduce(</span><br><span class=\"line\">  ( acc, cur ) =&gt; acc + cur,</span><br><span class=\"line\">  <span class=\"number\">0</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"将二维数组转化为一维\"><a href=\"#将二维数组转化为一维\" class=\"headerlink\" title=\"将二维数组转化为一维\"></a>将二维数组转化为一维</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flattened = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].reduce(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.concat(b);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  []</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<p>你也可以写成箭头函数的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flattened = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].reduce(</span><br><span class=\"line\"> ( acc, cur ) =&gt; acc.concat(cur),</span><br><span class=\"line\"> []</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"计算数组中每个元素出现的次数\"><a href=\"#计算数组中每个元素出现的次数\" class=\"headerlink\" title=\"计算数组中每个元素出现的次数\"></a>计算数组中每个元素出现的次数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = [<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tiff'</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'Alice'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> countedNames = names.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">allNames, name</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> allNames) &#123;</span><br><span class=\"line\">    allNames[name]++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    allNames[name] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> allNames;</span><br><span class=\"line\">&#125;, &#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// countedNames is:</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用扩展运算符和initialValue绑定包含在对象数组中的数组\"><a href=\"#使用扩展运算符和initialValue绑定包含在对象数组中的数组\" class=\"headerlink\" title=\"使用扩展运算符和initialValue绑定包含在对象数组中的数组\"></a>使用扩展运算符和initialValue绑定包含在对象数组中的数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// friends - an array of objects </span></span><br><span class=\"line\"><span class=\"comment\">// where object field \"books\" - list of favorite books </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> friends = [&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Anna'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'Bible'</span>, <span class=\"string\">'Harry Potter'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">21</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bob'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'War and peace'</span>, <span class=\"string\">'Romeo and Juliet'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">26</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Alice'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'The Lord of the Rings'</span>, <span class=\"string\">'The Shining'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allbooks - list which will contain all friends' books +  </span></span><br><span class=\"line\"><span class=\"comment\">// additional list contained in initialValue</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> allbooks = friends.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, curr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...prev, ...curr.books];</span><br><span class=\"line\">&#125;, [<span class=\"string\">'Alphabet'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allbooks = [</span></span><br><span class=\"line\"><span class=\"comment\">//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', </span></span><br><span class=\"line\"><span class=\"comment\">//   'Romeo and Juliet', 'The Lord of the Rings',</span></span><br><span class=\"line\"><span class=\"comment\">//   'The Shining'</span></span><br><span class=\"line\"><span class=\"comment\">// ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.sort().reduce(<span class=\"function\">(<span class=\"params\">init, current</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(init.length===<span class=\"number\">0</span> || init[init.length<span class=\"number\">-1</span>]!==current)&#123;</span><br><span class=\"line\">        init.push(current);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> init;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"同时实现map和filter\"><a href=\"#同时实现map和filter\" class=\"headerlink\" title=\"同时实现map和filter\"></a>同时实现map和filter</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> doubledOver50 = numbers.reduce(<span class=\"function\">(<span class=\"params\">finalList, num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  num = num * <span class=\"number\">2</span>; </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &gt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">    finalList.push(num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> finalList;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\">doubledOver50; <span class=\"comment\">// [60, 80]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"匹配圆括号\"><a href=\"#匹配圆括号\" class=\"headerlink\" title=\"匹配圆括号\"></a>匹配圆括号</h3><p>reduce的另外一个用途是能够匹配给定字符串中的圆括号。对于一个含有圆括号的字符串，我们需要知道(和)的数量是否一致，并且(是否出现在)之前。</p>\n<p>下面的代码中我们使用reduce可以轻松地解决这个问题。我们只需要先声明一个counter变量，初值为0。在遇到(时counter加一，遇到)时counter减一。如果左右括号数目匹配，那最终结果为0。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Returns 0 if balanced.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isParensBalanced = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.split(<span class=\"string\">''</span>).reduce(<span class=\"function\">(<span class=\"params\">counter, char</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(counter &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">//matched \")\" before \"(\"</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char === <span class=\"string\">'('</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ++counter;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char === <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> --counter;</span><br><span class=\"line\">    &#125;  <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//matched some other char</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>); <span class=\"comment\">//&lt;-- starting value of the counter</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(())'</span>) <span class=\"comment\">// 0 &lt;-- balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(asdfds)'</span>) <span class=\"comment\">//0 &lt;-- balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(()'</span>) <span class=\"comment\">// 1 &lt;-- not balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">')('</span>) <span class=\"comment\">// -1 &lt;-- not balanced</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Polyfill\"><a href=\"#Polyfill\" class=\"headerlink\" title=\"Polyfill\"></a>Polyfill</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Production steps of ECMA-262, Edition 5, 15.4.4.21</span></span><br><span class=\"line\"><span class=\"comment\">// Reference: http://es5.github.io/#x15.4.4.21</span></span><br><span class=\"line\"><span class=\"comment\">// https://tc39.github.io/ecma262/#sec-array.prototype.reduce</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.reduce) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'reduce'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback <span class=\"regexp\">/*, initialValue*/</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">'Array.prototype.reduce '</span> + </span><br><span class=\"line\">          <span class=\"string\">'called on null or undefined'</span> );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( callback +</span><br><span class=\"line\">          <span class=\"string\">' is not a function'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 1. Let O be ? ToObject(this value).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 2. Let len be ? ToLength(? Get(O, \"length\")).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = o.length &gt;&gt;&gt; <span class=\"number\">0</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Steps 3, 4, 5, 6, 7      </span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; </span><br><span class=\"line\">      <span class=\"keyword\">var</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        value = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt; len &amp;&amp; !(k <span class=\"keyword\">in</span> o)) &#123;</span><br><span class=\"line\">          k++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. If len is 0 and initialValue is not present,</span></span><br><span class=\"line\">        <span class=\"comment\">//    throw a TypeError exception.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &gt;= len) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">'Reduce of empty array '</span> +</span><br><span class=\"line\">            <span class=\"string\">'with no initial value'</span> );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        value = o[k++];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 8. Repeat, while k &lt; len</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a. Let Pk be ! ToString(k).</span></span><br><span class=\"line\">        <span class=\"comment\">// b. Let kPresent be ? HasProperty(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">// c. If kPresent is true, then</span></span><br><span class=\"line\">        <span class=\"comment\">//    i.  Let kValue be ? Get(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">//    ii. Let accumulator be ? Call(</span></span><br><span class=\"line\">        <span class=\"comment\">//          callbackfn, undefined,</span></span><br><span class=\"line\">        <span class=\"comment\">//          « accumulator, kValue, k, O »).</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">          value = callback(value, o[k], k, o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// d. Increase k by 1.      </span></span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 9. Return accumulator.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://segmentfault.com/a/1190000013972464?utm_source=feed-content\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/神奇的reduce/1917180847.jpg\" alt=\"Vincent van Gogh – The Parsonage at Nuenen\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Parsonage at Nuenen 1885</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"神奇的reduce\"><a href=\"#神奇的reduce\" class=\"headerlink\" title=\"神奇的reduce\"></a>神奇的reduce</h1><p>这是一个用得好就很装逼的方法，简约而强大。</p>\n<h2 id=\"干什么用的\"><a href=\"#干什么用的\" class=\"headerlink\" title=\"干什么用的\"></a>干什么用的</h2><blockquote>\n<p>reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。<br>说的挺复杂，看个mdn例子先：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue</span><br><span class=\"line\"><span class=\"comment\">//1+2+3+4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//5+1+2+3+4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer, <span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback[,initalValue])</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li><p>callback 回调函数</p>\n<ul>\n<li>accumulator <strong>累加器累加回调的返回值</strong></li>\n<li>currentValue <strong>数组中正在处理的元素</strong></li>\n<li>currentIndex(optional) 数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。</li>\n<li>array(optional) 调用reduce的数组</li>\n</ul>\n</li>\n<li><p>initalValue(optional) 用作第一个调用 callback的第一个参数的值</p>\n</li>\n</ul>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>函数累计处理的结果</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p><code>reduce</code>为数组中的每一个元素依次执行<code>callback</code>函数，不包括数组中被删除或从未被赋值的元素，接受四个参数。</p>\n<p>回调函数第一次执行时，<code>accumulator</code>和<code>currentValue</code>的取值有两种情况：调用<code>reduce</code>时提供<code>initialValue</code>，<code>accumulator</code>取值为<code>initialValue</code>，<code>currentValue</code>取数组中的第一个值；没有提供 <code>initialValue</code>，<code>accumulator</code>取数组中的第一个值，<code>currentValue</code>取数组中的第二个值。</p>\n<blockquote>\n<p>如果没有提供<code>initialValue</code>，<code>reduce</code> 会从索引1的地方开始执行 <code>callback</code> 方法，跳过第一个索引。如果提供<code>initialValue</code>，从索引0开始。</p>\n</blockquote>\n<p>如果数组为空且没有提供<code>initialValue</code>，会抛出<code>TypeError</code> 。如果数组仅有一个元素（无论位置如何）并且没有提供<code>initialValue</code>， 或者有提供<code>initialValue</code>但是数组为空，那么此唯一值将被返回并且<code>callback</code>不会被执行。</p>\n<p>提供初始值通常更安全，正如下面的例子，如果没有提供initialValue，则可能有三种输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxCallback = <span class=\"function\">(<span class=\"params\"> pre, cur </span>) =&gt;</span> <span class=\"built_in\">Math</span>.max( pre.x, cur.x );</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxCallback2 = <span class=\"function\">(<span class=\"params\"> max, cur </span>) =&gt;</span> <span class=\"built_in\">Math</span>.max( max, cur );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reduce() without initialValue</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">42</span> &#125; ].reduce( maxCallback ); <span class=\"comment\">// 42</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;            ].reduce( maxCallback ); <span class=\"comment\">// &#123; x: 22 &#125;</span></span><br><span class=\"line\">[                      ].reduce( maxCallback ); <span class=\"comment\">// TypeError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map/reduce; better solution, also works for empty arrays</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">42</span> &#125; ].map( <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el.x )</span><br><span class=\"line\">                        .reduce( maxCallback2, -<span class=\"literal\">Infinity</span> );</span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce如何运行\"><a href=\"#reduce如何运行\" class=\"headerlink\" title=\"reduce如何运行\"></a>reduce如何运行</h3><p>假如运行下段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">accumulator, currentValue, currentIndex, array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> accumulator + currentValue;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>accumulator</th>\n<th>currentValue</th>\n<th>currentIndex</th>\n<th>array</th>\n<th>return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>first call</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>1</td>\n</tr>\n<tr>\n<td>second call</td>\n<td>1</td>\n<td>2</td>\n<td>2</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>3</td>\n</tr>\n<tr>\n<td>third call</td>\n<td>3</td>\n<td>3</td>\n<td>3</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>6</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>6</td>\n<td>4</td>\n<td>4</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<p>由<code>reduce</code>返回的值将是上次回调调用的值<code>（10）</code>。</p>\n<p>你同样可以使用箭头函数的形式，下面的代码会输出跟前面一样的结果</p>\n<p>您还可以提供<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">Arrow Function</a> 代替完整功能。 下面的代码将产生与上面的代码中相同的输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\">(<span class=\"params\">prev, curr</span>) =&gt;</span> prev + curr );</span><br></pre></td></tr></table></figure>\n<p>如果你打算提供一个初始值作为<code>reduce</code>方法的第二个参数，以下是运行过程及结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\">(<span class=\"params\">accumulator, currentValue, currentIndex, array</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> accumulator + currentValue; &#125;, <span class=\"number\">10</span> )</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>accumulator</th>\n<th>currentValue</th>\n<th>currentIndex</th>\n<th>array</th>\n<th>return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>first call</td>\n<td>10</td>\n<td>0</td>\n<td>0</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>10</td>\n</tr>\n<tr>\n<td>second call</td>\n<td>10</td>\n<td>1</td>\n<td>1</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>11</td>\n</tr>\n<tr>\n<td>third call</td>\n<td>11</td>\n<td>2</td>\n<td>2</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>13</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>13</td>\n<td>3</td>\n<td>3</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>16</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>16</td>\n<td>4</td>\n<td>4</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<p>这种情况下reduce返回的值是<code>20</code>。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>数组里所有值的和</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// sum is 6</span></span><br></pre></td></tr></table></figure>\n<p>你也可以写成箭头函数的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> total = [ <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ].reduce(</span><br><span class=\"line\">  ( acc, cur ) =&gt; acc + cur,</span><br><span class=\"line\">  <span class=\"number\">0</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"将二维数组转化为一维\"><a href=\"#将二维数组转化为一维\" class=\"headerlink\" title=\"将二维数组转化为一维\"></a>将二维数组转化为一维</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flattened = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].reduce(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.concat(b);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  []</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<p>你也可以写成箭头函数的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flattened = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].reduce(</span><br><span class=\"line\"> ( acc, cur ) =&gt; acc.concat(cur),</span><br><span class=\"line\"> []</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"计算数组中每个元素出现的次数\"><a href=\"#计算数组中每个元素出现的次数\" class=\"headerlink\" title=\"计算数组中每个元素出现的次数\"></a>计算数组中每个元素出现的次数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = [<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tiff'</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'Alice'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> countedNames = names.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">allNames, name</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> allNames) &#123;</span><br><span class=\"line\">    allNames[name]++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    allNames[name] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> allNames;</span><br><span class=\"line\">&#125;, &#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// countedNames is:</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用扩展运算符和initialValue绑定包含在对象数组中的数组\"><a href=\"#使用扩展运算符和initialValue绑定包含在对象数组中的数组\" class=\"headerlink\" title=\"使用扩展运算符和initialValue绑定包含在对象数组中的数组\"></a>使用扩展运算符和initialValue绑定包含在对象数组中的数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// friends - an array of objects </span></span><br><span class=\"line\"><span class=\"comment\">// where object field \"books\" - list of favorite books </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> friends = [&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Anna'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'Bible'</span>, <span class=\"string\">'Harry Potter'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">21</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bob'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'War and peace'</span>, <span class=\"string\">'Romeo and Juliet'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">26</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Alice'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'The Lord of the Rings'</span>, <span class=\"string\">'The Shining'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allbooks - list which will contain all friends' books +  </span></span><br><span class=\"line\"><span class=\"comment\">// additional list contained in initialValue</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> allbooks = friends.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, curr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...prev, ...curr.books];</span><br><span class=\"line\">&#125;, [<span class=\"string\">'Alphabet'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allbooks = [</span></span><br><span class=\"line\"><span class=\"comment\">//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', </span></span><br><span class=\"line\"><span class=\"comment\">//   'Romeo and Juliet', 'The Lord of the Rings',</span></span><br><span class=\"line\"><span class=\"comment\">//   'The Shining'</span></span><br><span class=\"line\"><span class=\"comment\">// ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.sort().reduce(<span class=\"function\">(<span class=\"params\">init, current</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(init.length===<span class=\"number\">0</span> || init[init.length<span class=\"number\">-1</span>]!==current)&#123;</span><br><span class=\"line\">        init.push(current);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> init;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"同时实现map和filter\"><a href=\"#同时实现map和filter\" class=\"headerlink\" title=\"同时实现map和filter\"></a>同时实现map和filter</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> doubledOver50 = numbers.reduce(<span class=\"function\">(<span class=\"params\">finalList, num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  num = num * <span class=\"number\">2</span>; </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &gt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">    finalList.push(num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> finalList;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\">doubledOver50; <span class=\"comment\">// [60, 80]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"匹配圆括号\"><a href=\"#匹配圆括号\" class=\"headerlink\" title=\"匹配圆括号\"></a>匹配圆括号</h3><p>reduce的另外一个用途是能够匹配给定字符串中的圆括号。对于一个含有圆括号的字符串，我们需要知道(和)的数量是否一致，并且(是否出现在)之前。</p>\n<p>下面的代码中我们使用reduce可以轻松地解决这个问题。我们只需要先声明一个counter变量，初值为0。在遇到(时counter加一，遇到)时counter减一。如果左右括号数目匹配，那最终结果为0。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Returns 0 if balanced.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isParensBalanced = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.split(<span class=\"string\">''</span>).reduce(<span class=\"function\">(<span class=\"params\">counter, char</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(counter &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">//matched \")\" before \"(\"</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char === <span class=\"string\">'('</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ++counter;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char === <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> --counter;</span><br><span class=\"line\">    &#125;  <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//matched some other char</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>); <span class=\"comment\">//&lt;-- starting value of the counter</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(())'</span>) <span class=\"comment\">// 0 &lt;-- balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(asdfds)'</span>) <span class=\"comment\">//0 &lt;-- balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(()'</span>) <span class=\"comment\">// 1 &lt;-- not balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">')('</span>) <span class=\"comment\">// -1 &lt;-- not balanced</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Polyfill\"><a href=\"#Polyfill\" class=\"headerlink\" title=\"Polyfill\"></a>Polyfill</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Production steps of ECMA-262, Edition 5, 15.4.4.21</span></span><br><span class=\"line\"><span class=\"comment\">// Reference: http://es5.github.io/#x15.4.4.21</span></span><br><span class=\"line\"><span class=\"comment\">// https://tc39.github.io/ecma262/#sec-array.prototype.reduce</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.reduce) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'reduce'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback <span class=\"regexp\">/*, initialValue*/</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">'Array.prototype.reduce '</span> + </span><br><span class=\"line\">          <span class=\"string\">'called on null or undefined'</span> );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( callback +</span><br><span class=\"line\">          <span class=\"string\">' is not a function'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 1. Let O be ? ToObject(this value).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 2. Let len be ? ToLength(? Get(O, \"length\")).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = o.length &gt;&gt;&gt; <span class=\"number\">0</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Steps 3, 4, 5, 6, 7      </span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; </span><br><span class=\"line\">      <span class=\"keyword\">var</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        value = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt; len &amp;&amp; !(k <span class=\"keyword\">in</span> o)) &#123;</span><br><span class=\"line\">          k++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. If len is 0 and initialValue is not present,</span></span><br><span class=\"line\">        <span class=\"comment\">//    throw a TypeError exception.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &gt;= len) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">'Reduce of empty array '</span> +</span><br><span class=\"line\">            <span class=\"string\">'with no initial value'</span> );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        value = o[k++];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 8. Repeat, while k &lt; len</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a. Let Pk be ! ToString(k).</span></span><br><span class=\"line\">        <span class=\"comment\">// b. Let kPresent be ? HasProperty(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">// c. If kPresent is true, then</span></span><br><span class=\"line\">        <span class=\"comment\">//    i.  Let kValue be ? Get(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">//    ii. Let accumulator be ? Call(</span></span><br><span class=\"line\">        <span class=\"comment\">//          callbackfn, undefined,</span></span><br><span class=\"line\">        <span class=\"comment\">//          « accumulator, kValue, k, O »).</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">          value = callback(value, o[k], k, o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// d. Increase k by 1.      </span></span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 9. Return accumulator.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://segmentfault.com/a/1190000013972464?utm_source=feed-content\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/神奇的reduce/1917180847.jpg\" alt=\"Vincent van Gogh – The Parsonage at Nuenen\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Parsonage at Nuenen 1885</p>\n</blockquote>\n"},{"title":"家乡","date":"2018-08-02T01:18:15.000Z","_content":"\n# 家乡\n\n四月的最后两天，五月的前夕，我回到了老家。同样是在外地，上学的时候身边有很多的同学，每个寒暑假也基本都能回家，所以基本上端午、五一这种三天小假我是不会回家的，甚至十一的小长假我也是从来没有回去过。正式上班以后，虽然上班的地方离家乡更近了，可能少了同学陪伴，也可能是人成长了，当然也可能是父母也老了，总之，温州我回来了。\n\n下了高铁，坐上了回家的公交车，窗外的变化的城市给我的感觉是那么的熟悉又特别的陌生，这两年拆迁很疯狂，沿途看到太多处被推平留下大量建筑残渣的空地，也有很多工地开着挖掘机不停的建设着，我知道这座小城在慢慢地改变，以后我可能就认不出来这就是我的家乡了。我的家也在去年的年底被拆除了，在四月的最后一天我去了曾经生活了二十余年的地方，原本高高矮矮建筑丛生的城中村，已经基本全部被推平了，我曾经住着的房子已经没了，道路也被石头砖头杂乱的放置，认不出来了，哎，真的认不出来了。而此刻的我，已经没有了家。曾经许诺给我迎接新娘的房子已经不在了。想起了*雷子*的[家乡](http://www.kugou.com/song/#hash=CA4FB3923F4F1DD4F369B9FBA9D145C7&album_id=8439437):\n\n---\n\n我的家乡 越来越年轻\n\n就像一件俗气的衣裳\n\n越来越老的不止 爸爸的脸庞\n\n擦干那扇\n\n蒙着雾的车窗\n\n我清晰地望着陌生的家乡\n\n流失的岁月被冲抹\n\n一切都变了\n\n---\n\n回去看了住在老人房的爷爷奶奶，他们老一本的人生活很艰苦，本该退休享受生活却依然在打着给着很少钱的小零工。生活一直很艰难，我知道，平时一顿吃饭的钱可以够他们生活很久。生活不易，生活真的不容易啊。\n\n城市越来越年轻，而人却慢慢地开始变老了。\n\n---\n\n![Johannes Vermeer – View of Delft](家乡/1762221382.jpg)\n\n> Johannes Vermeer – View of Delft 1660-61\n","source":"_posts/家乡.md","raw":"---\ntitle: 家乡\ndate: 2018-08-02 09:18:15\ntags:\ncategories: 生活\n---\n\n# 家乡\n\n四月的最后两天，五月的前夕，我回到了老家。同样是在外地，上学的时候身边有很多的同学，每个寒暑假也基本都能回家，所以基本上端午、五一这种三天小假我是不会回家的，甚至十一的小长假我也是从来没有回去过。正式上班以后，虽然上班的地方离家乡更近了，可能少了同学陪伴，也可能是人成长了，当然也可能是父母也老了，总之，温州我回来了。\n\n下了高铁，坐上了回家的公交车，窗外的变化的城市给我的感觉是那么的熟悉又特别的陌生，这两年拆迁很疯狂，沿途看到太多处被推平留下大量建筑残渣的空地，也有很多工地开着挖掘机不停的建设着，我知道这座小城在慢慢地改变，以后我可能就认不出来这就是我的家乡了。我的家也在去年的年底被拆除了，在四月的最后一天我去了曾经生活了二十余年的地方，原本高高矮矮建筑丛生的城中村，已经基本全部被推平了，我曾经住着的房子已经没了，道路也被石头砖头杂乱的放置，认不出来了，哎，真的认不出来了。而此刻的我，已经没有了家。曾经许诺给我迎接新娘的房子已经不在了。想起了*雷子*的[家乡](http://www.kugou.com/song/#hash=CA4FB3923F4F1DD4F369B9FBA9D145C7&album_id=8439437):\n\n---\n\n我的家乡 越来越年轻\n\n就像一件俗气的衣裳\n\n越来越老的不止 爸爸的脸庞\n\n擦干那扇\n\n蒙着雾的车窗\n\n我清晰地望着陌生的家乡\n\n流失的岁月被冲抹\n\n一切都变了\n\n---\n\n回去看了住在老人房的爷爷奶奶，他们老一本的人生活很艰苦，本该退休享受生活却依然在打着给着很少钱的小零工。生活一直很艰难，我知道，平时一顿吃饭的钱可以够他们生活很久。生活不易，生活真的不容易啊。\n\n城市越来越年轻，而人却慢慢地开始变老了。\n\n---\n\n![Johannes Vermeer – View of Delft](家乡/1762221382.jpg)\n\n> Johannes Vermeer – View of Delft 1660-61\n","slug":"家乡","published":1,"updated":"2018-08-02T01:19:25.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbvq2g500001gz7c297qhnz","content":"<h1 id=\"家乡\"><a href=\"#家乡\" class=\"headerlink\" title=\"家乡\"></a>家乡</h1><p>四月的最后两天，五月的前夕，我回到了老家。同样是在外地，上学的时候身边有很多的同学，每个寒暑假也基本都能回家，所以基本上端午、五一这种三天小假我是不会回家的，甚至十一的小长假我也是从来没有回去过。正式上班以后，虽然上班的地方离家乡更近了，可能少了同学陪伴，也可能是人成长了，当然也可能是父母也老了，总之，温州我回来了。</p>\n<p>下了高铁，坐上了回家的公交车，窗外的变化的城市给我的感觉是那么的熟悉又特别的陌生，这两年拆迁很疯狂，沿途看到太多处被推平留下大量建筑残渣的空地，也有很多工地开着挖掘机不停的建设着，我知道这座小城在慢慢地改变，以后我可能就认不出来这就是我的家乡了。我的家也在去年的年底被拆除了，在四月的最后一天我去了曾经生活了二十余年的地方，原本高高矮矮建筑丛生的城中村，已经基本全部被推平了，我曾经住着的房子已经没了，道路也被石头砖头杂乱的放置，认不出来了，哎，真的认不出来了。而此刻的我，已经没有了家。曾经许诺给我迎接新娘的房子已经不在了。想起了<em>雷子</em>的<a href=\"http://www.kugou.com/song/#hash=CA4FB3923F4F1DD4F369B9FBA9D145C7&amp;album_id=8439437\" target=\"_blank\" rel=\"noopener\">家乡</a>:</p>\n<hr>\n<p>我的家乡 越来越年轻</p>\n<p>就像一件俗气的衣裳</p>\n<p>越来越老的不止 爸爸的脸庞</p>\n<p>擦干那扇</p>\n<p>蒙着雾的车窗</p>\n<p>我清晰地望着陌生的家乡</p>\n<p>流失的岁月被冲抹</p>\n<p>一切都变了</p>\n<hr>\n<p>回去看了住在老人房的爷爷奶奶，他们老一本的人生活很艰苦，本该退休享受生活却依然在打着给着很少钱的小零工。生活一直很艰难，我知道，平时一顿吃饭的钱可以够他们生活很久。生活不易，生活真的不容易啊。</p>\n<p>城市越来越年轻，而人却慢慢地开始变老了。</p>\n<hr>\n<p><img src=\"/newBlog/2018/08/02/家乡/1762221382.jpg\" alt=\"Johannes Vermeer – View of Delft\"></p>\n<blockquote>\n<p>Johannes Vermeer – View of Delft 1660-61</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"家乡\"><a href=\"#家乡\" class=\"headerlink\" title=\"家乡\"></a>家乡</h1><p>四月的最后两天，五月的前夕，我回到了老家。同样是在外地，上学的时候身边有很多的同学，每个寒暑假也基本都能回家，所以基本上端午、五一这种三天小假我是不会回家的，甚至十一的小长假我也是从来没有回去过。正式上班以后，虽然上班的地方离家乡更近了，可能少了同学陪伴，也可能是人成长了，当然也可能是父母也老了，总之，温州我回来了。</p>\n<p>下了高铁，坐上了回家的公交车，窗外的变化的城市给我的感觉是那么的熟悉又特别的陌生，这两年拆迁很疯狂，沿途看到太多处被推平留下大量建筑残渣的空地，也有很多工地开着挖掘机不停的建设着，我知道这座小城在慢慢地改变，以后我可能就认不出来这就是我的家乡了。我的家也在去年的年底被拆除了，在四月的最后一天我去了曾经生活了二十余年的地方，原本高高矮矮建筑丛生的城中村，已经基本全部被推平了，我曾经住着的房子已经没了，道路也被石头砖头杂乱的放置，认不出来了，哎，真的认不出来了。而此刻的我，已经没有了家。曾经许诺给我迎接新娘的房子已经不在了。想起了<em>雷子</em>的<a href=\"http://www.kugou.com/song/#hash=CA4FB3923F4F1DD4F369B9FBA9D145C7&amp;album_id=8439437\" target=\"_blank\" rel=\"noopener\">家乡</a>:</p>\n<hr>\n<p>我的家乡 越来越年轻</p>\n<p>就像一件俗气的衣裳</p>\n<p>越来越老的不止 爸爸的脸庞</p>\n<p>擦干那扇</p>\n<p>蒙着雾的车窗</p>\n<p>我清晰地望着陌生的家乡</p>\n<p>流失的岁月被冲抹</p>\n<p>一切都变了</p>\n<hr>\n<p>回去看了住在老人房的爷爷奶奶，他们老一本的人生活很艰苦，本该退休享受生活却依然在打着给着很少钱的小零工。生活一直很艰难，我知道，平时一顿吃饭的钱可以够他们生活很久。生活不易，生活真的不容易啊。</p>\n<p>城市越来越年轻，而人却慢慢地开始变老了。</p>\n<hr>\n<p><img src=\"/newBlog/2018/08/02/家乡/1762221382.jpg\" alt=\"Johannes Vermeer – View of Delft\"></p>\n<blockquote>\n<p>Johannes Vermeer – View of Delft 1660-61</p>\n</blockquote>\n"},{"title":"牢骚","date":"2018-08-02T01:19:49.000Z","_content":"\n# 牢骚\n\n最近筹备挺久的一场面试，在昨天2018/6/4晚上终于结束了，虽然结果目前不清楚，但是自己感觉面试过程不太顺利，大概率是失败了。面完出来，外面下着小雨，狼狈地跑向公交站台，心里想法也很多，有一些失落。从一开始准备到真正面试其实时间挺长的，前后大概经过了一个来月，这一个月挺有压迫感的，虽然结果可能不如意。\n\n其实回想起来，我的一路走来虽然不是特别的坎坎坷坷波折起伏，但总归不是特别顺利。成长其实是在不断地在选择中继续选择，我也很多次试图去回想如果当初没有做出这样的选择，现在的我应该是个什么样的境地。想多了也没有什么用，只是会不断地让自己变得消极不乐观。有时候我也会去想我是幸运的，我应该承认，大学同学室友们毕业出来工作也都是坎坷满满，所以大部分的人都不是一帆风顺的，我也没必要自怨自艾。\n\n>这个世界会好吗？\n\n我想会的。\n\n---\n\n![Johannes Vermeer – Officer and Laughing Girl](牢骚/431359834.jpg)\n\n> Johannes Vermeer – Officer and Laughing Girl 1655-60\n","source":"_posts/牢骚.md","raw":"---\ntitle: 牢骚\ndate: 2018-08-02 09:19:49\ntags:\ncategories: 生活\n---\n\n# 牢骚\n\n最近筹备挺久的一场面试，在昨天2018/6/4晚上终于结束了，虽然结果目前不清楚，但是自己感觉面试过程不太顺利，大概率是失败了。面完出来，外面下着小雨，狼狈地跑向公交站台，心里想法也很多，有一些失落。从一开始准备到真正面试其实时间挺长的，前后大概经过了一个来月，这一个月挺有压迫感的，虽然结果可能不如意。\n\n其实回想起来，我的一路走来虽然不是特别的坎坎坷坷波折起伏，但总归不是特别顺利。成长其实是在不断地在选择中继续选择，我也很多次试图去回想如果当初没有做出这样的选择，现在的我应该是个什么样的境地。想多了也没有什么用，只是会不断地让自己变得消极不乐观。有时候我也会去想我是幸运的，我应该承认，大学同学室友们毕业出来工作也都是坎坷满满，所以大部分的人都不是一帆风顺的，我也没必要自怨自艾。\n\n>这个世界会好吗？\n\n我想会的。\n\n---\n\n![Johannes Vermeer – Officer and Laughing Girl](牢骚/431359834.jpg)\n\n> Johannes Vermeer – Officer and Laughing Girl 1655-60\n","slug":"牢骚","published":1,"updated":"2018-08-02T01:20:30.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbvq2go00011gz7prjow22f","content":"<h1 id=\"牢骚\"><a href=\"#牢骚\" class=\"headerlink\" title=\"牢骚\"></a>牢骚</h1><p>最近筹备挺久的一场面试，在昨天2018/6/4晚上终于结束了，虽然结果目前不清楚，但是自己感觉面试过程不太顺利，大概率是失败了。面完出来，外面下着小雨，狼狈地跑向公交站台，心里想法也很多，有一些失落。从一开始准备到真正面试其实时间挺长的，前后大概经过了一个来月，这一个月挺有压迫感的，虽然结果可能不如意。</p>\n<p>其实回想起来，我的一路走来虽然不是特别的坎坎坷坷波折起伏，但总归不是特别顺利。成长其实是在不断地在选择中继续选择，我也很多次试图去回想如果当初没有做出这样的选择，现在的我应该是个什么样的境地。想多了也没有什么用，只是会不断地让自己变得消极不乐观。有时候我也会去想我是幸运的，我应该承认，大学同学室友们毕业出来工作也都是坎坷满满，所以大部分的人都不是一帆风顺的，我也没必要自怨自艾。</p>\n<blockquote>\n<p>这个世界会好吗？</p>\n</blockquote>\n<p>我想会的。</p>\n<hr>\n<p><img src=\"/newBlog/2018/08/02/牢骚/431359834.jpg\" alt=\"Johannes Vermeer – Officer and Laughing Girl\"></p>\n<blockquote>\n<p>Johannes Vermeer – Officer and Laughing Girl 1655-60</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"牢骚\"><a href=\"#牢骚\" class=\"headerlink\" title=\"牢骚\"></a>牢骚</h1><p>最近筹备挺久的一场面试，在昨天2018/6/4晚上终于结束了，虽然结果目前不清楚，但是自己感觉面试过程不太顺利，大概率是失败了。面完出来，外面下着小雨，狼狈地跑向公交站台，心里想法也很多，有一些失落。从一开始准备到真正面试其实时间挺长的，前后大概经过了一个来月，这一个月挺有压迫感的，虽然结果可能不如意。</p>\n<p>其实回想起来，我的一路走来虽然不是特别的坎坎坷坷波折起伏，但总归不是特别顺利。成长其实是在不断地在选择中继续选择，我也很多次试图去回想如果当初没有做出这样的选择，现在的我应该是个什么样的境地。想多了也没有什么用，只是会不断地让自己变得消极不乐观。有时候我也会去想我是幸运的，我应该承认，大学同学室友们毕业出来工作也都是坎坷满满，所以大部分的人都不是一帆风顺的，我也没必要自怨自艾。</p>\n<blockquote>\n<p>这个世界会好吗？</p>\n</blockquote>\n<p>我想会的。</p>\n<hr>\n<p><img src=\"/newBlog/2018/08/02/牢骚/431359834.jpg\" alt=\"Johannes Vermeer – Officer and Laughing Girl\"></p>\n<blockquote>\n<p>Johannes Vermeer – Officer and Laughing Girl 1655-60</p>\n</blockquote>\n"},{"title":"绕不开的promise","date":"2018-08-02T01:21:44.000Z","_content":"\n# 绕不开的promise\n\njs这玩意儿的异步处理真的是让人头疼的一个东西，回调函数这种处理方式写稍微多一点的逻辑就整个人都被绕进去了，所以嘛，业界也就搞出乱七八糟的方案，一套一套的，好在es6也接受业界的一些做法，比如就把promise、async这种异步的处理方案搞进规范了。async也离不开promise，所以深入理解promise对现代化处理异步编程很有帮助。\n\n> 所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。\n\nPromise在用起来的时候就是`new Promise((resolve,reject) => {})`,看到出来这个玩意就是一个构造函数嘛，哟，还挺奇怪，这个构造函数竟然还接受一个函数当作参数，传入的这个函数又有两个固定的参数`resolve`、`reject`，这两个参数也是两个方法。\n\nPromise的两个特点：\n\n1. 对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。\n\n2. 一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n\n## 怎么用\n\n就是`new`一个`Promise`实例出来，用这个实例的`then`方法搞。\n\n```js\nconst promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n```\n\n### Promise.prototype.then()\n\n> Promise 实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。\n\nthen方法很重要，甚至可以继续返回一个promise链式调用\n\n```js\ngetJSON(\"/post/1.json\").then(\n  post => getJSON(post.commentURL)\n).then(\n  comments => console.log(\"resolved: \", comments),\n  err => console.log(\"rejected: \", err)\n);\n```\n\n### Promise.prototype.catch()\n\n`promise`的异常捕获是个难点，重点掌握。\n\n> `Promise.prototype.catch`方法是`.then(null, rejection)`的别名，用于指定发生错误时的回调函数,这就说明catch也和then一样返回一个promise，可以继续then和catch。\n\n```js\np.then((val) => console.log('fulfilled:', val))\n  .catch((err) => console.log('rejected', err));\n\n// 等同于\np.then((val) => console.log('fulfilled:', val))\n  .then(null, (err) => console.log(\"rejected:\", err));\n```\n\n如果该对象状态变为`resolved`，则会调用`then`方法指定的回调函数；如果异步操作抛出错误，状态就会变为`rejected`，就会调用`catch`方法指定的回调函数，处理这个错误。**另外，then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获**\n\n```js\n// 写法一\nconst promise = new Promise(function(resolve, reject) {\n  try {\n    throw new Error('test');\n  } catch(e) {\n    reject(e);\n  }\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n\n// 写法二\nconst promise = new Promise(function(resolve, reject) {\n  reject(new Error('test'));\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n```\n\n这两种写法相同，reject相当于抛出异常，然后让catch捕获。\n**如果 Promise 状态已经变成resolved，再抛出错误是无效的。**\n\n```js\nconst promise = new Promise(function(resolve, reject) {\n  resolve('ok');\n  throw new Error('test');\n});\npromise\n  .then(function(value) { console.log(value) })\n  .catch(function(error) { console.log(error) });\n// ok\n```\n\n上面代码中，`Promise` 在`resolve`语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 `Promise` 的状态一旦改变，就永久保持该状态，不会再变了。\n\n`Promise`对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个`catch`语句捕获。\n**所以一般在最后面加上一个`catch`就够了，没必要在每个`then`方法里面传入第二个捕获错误的参数，`then就只要处理成功的情况就行**\n\n> **Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”**\n\n所以在`node`中`process`有个`unhandleRejection`专门来捕获这种`promise`中没有捕获的异常\n\n```js\nprocess.on('unhandledRejection', function (err, p) {\n  throw err;\n});\n```\n\n### Promise.prototype.finally()\n\n`finally`方法用于指定不管 `Promise` 对象最后状态如何，都会执行的操作。\nfinally本质上是then方法的特例，实际上就是简化了成功和失败共同要做的事情。\n\n```js\npromise\n.finally(() => {\n  // 语句\n});\n\n// 等同于\npromise\n.then(\n  result => {\n    // 语句\n    return result;\n  },\n  error => {\n    // 语句\n    throw error;\n  }\n);\n```\n\n### Promise.all()\n\n`Promise.all`方法用于将多个 `Promise` 实例，包装成一个新的 `Promise` 实例。\n\n```js\nconst p = Promise.all([p1, p2, p3]);\n```\n\n1. `p1`、`p2`、`p3`全部成功后，`p1`、`p2`、`p3`的返回值组成一个数组传给P的回调\n2. 其中一个失败，就把失败的reject传给P的失败回调\n\n同样这里也存在异常的处理情况，**作为参数的promise自己定义了catch方法，则如果出现异常外层的promise不能捕获到**\n\n### Promise.race()\n\n和Promise.all差不多\n\n```js\nconst p = Promise.race([p1, p2, p3]);\n```\n\n上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。\n\n### Promise.resolve()\n\n有时需要将现有对象转为 Promise 对象，Promise.resolve方法就起到这个作用。\n\n```js\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n```\n\n需要注意的是，立即resolve的 Promise 对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。\n\n```js\nsetTimeout(function () {\n  console.log('three');\n}, 0);\n\nPromise.resolve().then(function () {\n  console.log('two');\n});\n\nconsole.log('one');\n\n// one\n// two\n// three\n```\n\n上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log('one')则是立即执行，因此最先输出。\n\n这种用处不多，倒是这种类型面试题不少。\n\n### Promise.reject()\n\n和Promise.resolve()差不多。\n\n### Promise.try()\n\n不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误\n\n[参考文献](https://juejin.im/post/5ab20c58f265da23a228fe0f?utm_source=gold_browser_extension)\n\n---\n\n![Johannes Vermeer – The Milkmaid](绕不开的promise/1012308194.jpg)\n\n> Johannes Vermeer – The Milkmaid 1658-61","source":"_posts/绕不开的promise.md","raw":"---\ntitle: 绕不开的promise\ndate: 2018-08-02 09:21:44\ntags:\n  - promise\ncategories: 前端\n---\n\n# 绕不开的promise\n\njs这玩意儿的异步处理真的是让人头疼的一个东西，回调函数这种处理方式写稍微多一点的逻辑就整个人都被绕进去了，所以嘛，业界也就搞出乱七八糟的方案，一套一套的，好在es6也接受业界的一些做法，比如就把promise、async这种异步的处理方案搞进规范了。async也离不开promise，所以深入理解promise对现代化处理异步编程很有帮助。\n\n> 所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。\n\nPromise在用起来的时候就是`new Promise((resolve,reject) => {})`,看到出来这个玩意就是一个构造函数嘛，哟，还挺奇怪，这个构造函数竟然还接受一个函数当作参数，传入的这个函数又有两个固定的参数`resolve`、`reject`，这两个参数也是两个方法。\n\nPromise的两个特点：\n\n1. 对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。\n\n2. 一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n\n## 怎么用\n\n就是`new`一个`Promise`实例出来，用这个实例的`then`方法搞。\n\n```js\nconst promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n```\n\n### Promise.prototype.then()\n\n> Promise 实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。\n\nthen方法很重要，甚至可以继续返回一个promise链式调用\n\n```js\ngetJSON(\"/post/1.json\").then(\n  post => getJSON(post.commentURL)\n).then(\n  comments => console.log(\"resolved: \", comments),\n  err => console.log(\"rejected: \", err)\n);\n```\n\n### Promise.prototype.catch()\n\n`promise`的异常捕获是个难点，重点掌握。\n\n> `Promise.prototype.catch`方法是`.then(null, rejection)`的别名，用于指定发生错误时的回调函数,这就说明catch也和then一样返回一个promise，可以继续then和catch。\n\n```js\np.then((val) => console.log('fulfilled:', val))\n  .catch((err) => console.log('rejected', err));\n\n// 等同于\np.then((val) => console.log('fulfilled:', val))\n  .then(null, (err) => console.log(\"rejected:\", err));\n```\n\n如果该对象状态变为`resolved`，则会调用`then`方法指定的回调函数；如果异步操作抛出错误，状态就会变为`rejected`，就会调用`catch`方法指定的回调函数，处理这个错误。**另外，then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获**\n\n```js\n// 写法一\nconst promise = new Promise(function(resolve, reject) {\n  try {\n    throw new Error('test');\n  } catch(e) {\n    reject(e);\n  }\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n\n// 写法二\nconst promise = new Promise(function(resolve, reject) {\n  reject(new Error('test'));\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n```\n\n这两种写法相同，reject相当于抛出异常，然后让catch捕获。\n**如果 Promise 状态已经变成resolved，再抛出错误是无效的。**\n\n```js\nconst promise = new Promise(function(resolve, reject) {\n  resolve('ok');\n  throw new Error('test');\n});\npromise\n  .then(function(value) { console.log(value) })\n  .catch(function(error) { console.log(error) });\n// ok\n```\n\n上面代码中，`Promise` 在`resolve`语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 `Promise` 的状态一旦改变，就永久保持该状态，不会再变了。\n\n`Promise`对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个`catch`语句捕获。\n**所以一般在最后面加上一个`catch`就够了，没必要在每个`then`方法里面传入第二个捕获错误的参数，`then就只要处理成功的情况就行**\n\n> **Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”**\n\n所以在`node`中`process`有个`unhandleRejection`专门来捕获这种`promise`中没有捕获的异常\n\n```js\nprocess.on('unhandledRejection', function (err, p) {\n  throw err;\n});\n```\n\n### Promise.prototype.finally()\n\n`finally`方法用于指定不管 `Promise` 对象最后状态如何，都会执行的操作。\nfinally本质上是then方法的特例，实际上就是简化了成功和失败共同要做的事情。\n\n```js\npromise\n.finally(() => {\n  // 语句\n});\n\n// 等同于\npromise\n.then(\n  result => {\n    // 语句\n    return result;\n  },\n  error => {\n    // 语句\n    throw error;\n  }\n);\n```\n\n### Promise.all()\n\n`Promise.all`方法用于将多个 `Promise` 实例，包装成一个新的 `Promise` 实例。\n\n```js\nconst p = Promise.all([p1, p2, p3]);\n```\n\n1. `p1`、`p2`、`p3`全部成功后，`p1`、`p2`、`p3`的返回值组成一个数组传给P的回调\n2. 其中一个失败，就把失败的reject传给P的失败回调\n\n同样这里也存在异常的处理情况，**作为参数的promise自己定义了catch方法，则如果出现异常外层的promise不能捕获到**\n\n### Promise.race()\n\n和Promise.all差不多\n\n```js\nconst p = Promise.race([p1, p2, p3]);\n```\n\n上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。\n\n### Promise.resolve()\n\n有时需要将现有对象转为 Promise 对象，Promise.resolve方法就起到这个作用。\n\n```js\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n```\n\n需要注意的是，立即resolve的 Promise 对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。\n\n```js\nsetTimeout(function () {\n  console.log('three');\n}, 0);\n\nPromise.resolve().then(function () {\n  console.log('two');\n});\n\nconsole.log('one');\n\n// one\n// two\n// three\n```\n\n上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log('one')则是立即执行，因此最先输出。\n\n这种用处不多，倒是这种类型面试题不少。\n\n### Promise.reject()\n\n和Promise.resolve()差不多。\n\n### Promise.try()\n\n不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误\n\n[参考文献](https://juejin.im/post/5ab20c58f265da23a228fe0f?utm_source=gold_browser_extension)\n\n---\n\n![Johannes Vermeer – The Milkmaid](绕不开的promise/1012308194.jpg)\n\n> Johannes Vermeer – The Milkmaid 1658-61","slug":"绕不开的promise","published":1,"updated":"2018-08-02T01:23:26.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbvq2hc00041gz7hjrw0oxf","content":"<h1 id=\"绕不开的promise\"><a href=\"#绕不开的promise\" class=\"headerlink\" title=\"绕不开的promise\"></a>绕不开的promise</h1><p>js这玩意儿的异步处理真的是让人头疼的一个东西，回调函数这种处理方式写稍微多一点的逻辑就整个人都被绕进去了，所以嘛，业界也就搞出乱七八糟的方案，一套一套的，好在es6也接受业界的一些做法，比如就把promise、async这种异步的处理方案搞进规范了。async也离不开promise，所以深入理解promise对现代化处理异步编程很有帮助。</p>\n<blockquote>\n<p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p>\n</blockquote>\n<p>Promise在用起来的时候就是<code>new Promise((resolve,reject) =&gt; {})</code>,看到出来这个玩意就是一个构造函数嘛，哟，还挺奇怪，这个构造函数竟然还接受一个函数当作参数，传入的这个函数又有两个固定的参数<code>resolve</code>、<code>reject</code>，这两个参数也是两个方法。</p>\n<p>Promise的两个特点：</p>\n<ol>\n<li><p>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p>\n</li>\n<li><p>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>\n</li>\n</ol>\n<h2 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h2><p>就是<code>new</code>一个<code>Promise</code>实例出来，用这个实例的<code>then</code>方法搞。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... some code</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</span><br><span class=\"line\">    resolve(value);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h3><blockquote>\n<p>Promise 实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。</p>\n</blockquote>\n<p>then方法很重要，甚至可以继续返回一个promise链式调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(</span><br><span class=\"line\">  post =&gt; getJSON(post.commentURL)</span><br><span class=\"line\">).then(</span><br><span class=\"line\">  comments =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"resolved: \"</span>, comments),</span><br><span class=\"line\">  err =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected: \"</span>, err)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch()\"></a>Promise.prototype.catch()</h3><p><code>promise</code>的异常捕获是个难点，重点掌握。</p>\n<blockquote>\n<p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数,这就说明catch也和then一样返回一个promise，可以继续then和catch。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'fulfilled:'</span>, val))</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'rejected'</span>, err));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'fulfilled:'</span>, val))</span><br><span class=\"line\">  .then(<span class=\"literal\">null</span>, (err) =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected:\"</span>, err));</span><br></pre></td></tr></table></figure>\n<p>如果该对象状态变为<code>resolved</code>，则会调用<code>then</code>方法指定的回调函数；如果异步操作抛出错误，状态就会变为<code>rejected</code>，就会调用<code>catch</code>方法指定的回调函数，处理这个错误。<strong>另外，then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    reject(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'test'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这两种写法相同，reject相当于抛出异常，然后让catch捕获。<br><strong>如果 Promise 状态已经变成resolved，再抛出错误是无效的。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"built_in\">console</span>.log(value) &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123; <span class=\"built_in\">console</span>.log(error) &#125;);</span><br><span class=\"line\"><span class=\"comment\">// ok</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>Promise</code> 在<code>resolve</code>语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 <code>Promise</code> 的状态一旦改变，就永久保持该状态，不会再变了。</p>\n<p><code>Promise</code>对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个<code>catch</code>语句捕获。<br><strong>所以一般在最后面加上一个<code>catch</code>就够了，没必要在每个<code>then</code>方法里面传入第二个捕获错误的参数，`then就只要处理成功的情况就行</strong></p>\n<blockquote>\n<p><strong>Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”</strong></p>\n</blockquote>\n<p>所以在<code>node</code>中<code>process</code>有个<code>unhandleRejection</code>专门来捕获这种<code>promise</code>中没有捕获的异常</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.on(<span class=\"string\">'unhandledRejection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, p</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-prototype-finally\"><a href=\"#Promise-prototype-finally\" class=\"headerlink\" title=\"Promise.prototype.finally()\"></a>Promise.prototype.finally()</h3><p><code>finally</code>方法用于指定不管 <code>Promise</code> 对象最后状态如何，都会执行的操作。<br>finally本质上是then方法的特例，实际上就是简化了成功和失败共同要做的事情。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise</span><br><span class=\"line\">.finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 语句</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">promise</span><br><span class=\"line\">.then(</span><br><span class=\"line\">  result =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 语句</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 语句</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h3><p><code>Promise.all</code>方法用于将多个 <code>Promise</code> 实例，包装成一个新的 <code>Promise</code> 实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>p1</code>、<code>p2</code>、<code>p3</code>全部成功后，<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组传给P的回调</li>\n<li>其中一个失败，就把失败的reject传给P的失败回调</li>\n</ol>\n<p>同样这里也存在异常的处理情况，<strong>作为参数的promise自己定义了catch方法，则如果出现异常外层的promise不能捕获到</strong></p>\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h3><p>和Promise.all差不多</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p>\n<h3 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h3><p>有时需要将现有对象转为 Promise 对象，Promise.resolve方法就起到这个作用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(<span class=\"string\">'foo'</span>))</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，立即resolve的 Promise 对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'three'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'two'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'one'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"comment\">// two</span></span><br><span class=\"line\"><span class=\"comment\">// three</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log(‘one’)则是立即执行，因此最先输出。</p>\n<p>这种用处不多，倒是这种类型面试题不少。</p>\n<h3 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject()\"></a>Promise.reject()</h3><p>和Promise.resolve()差不多。</p>\n<h3 id=\"Promise-try\"><a href=\"#Promise-try\" class=\"headerlink\" title=\"Promise.try()\"></a>Promise.try()</h3><p>不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误</p>\n<p><a href=\"https://juejin.im/post/5ab20c58f265da23a228fe0f?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">参考文献</a></p>\n<hr>\n<p><img src=\"/newBlog/2018/08/02/绕不开的promise/1012308194.jpg\" alt=\"Johannes Vermeer – The Milkmaid\"></p>\n<blockquote>\n<p>Johannes Vermeer – The Milkmaid 1658-61</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"绕不开的promise\"><a href=\"#绕不开的promise\" class=\"headerlink\" title=\"绕不开的promise\"></a>绕不开的promise</h1><p>js这玩意儿的异步处理真的是让人头疼的一个东西，回调函数这种处理方式写稍微多一点的逻辑就整个人都被绕进去了，所以嘛，业界也就搞出乱七八糟的方案，一套一套的，好在es6也接受业界的一些做法，比如就把promise、async这种异步的处理方案搞进规范了。async也离不开promise，所以深入理解promise对现代化处理异步编程很有帮助。</p>\n<blockquote>\n<p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p>\n</blockquote>\n<p>Promise在用起来的时候就是<code>new Promise((resolve,reject) =&gt; {})</code>,看到出来这个玩意就是一个构造函数嘛，哟，还挺奇怪，这个构造函数竟然还接受一个函数当作参数，传入的这个函数又有两个固定的参数<code>resolve</code>、<code>reject</code>，这两个参数也是两个方法。</p>\n<p>Promise的两个特点：</p>\n<ol>\n<li><p>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p>\n</li>\n<li><p>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>\n</li>\n</ol>\n<h2 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h2><p>就是<code>new</code>一个<code>Promise</code>实例出来，用这个实例的<code>then</code>方法搞。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... some code</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</span><br><span class=\"line\">    resolve(value);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h3><blockquote>\n<p>Promise 实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。</p>\n</blockquote>\n<p>then方法很重要，甚至可以继续返回一个promise链式调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(</span><br><span class=\"line\">  post =&gt; getJSON(post.commentURL)</span><br><span class=\"line\">).then(</span><br><span class=\"line\">  comments =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"resolved: \"</span>, comments),</span><br><span class=\"line\">  err =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected: \"</span>, err)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch()\"></a>Promise.prototype.catch()</h3><p><code>promise</code>的异常捕获是个难点，重点掌握。</p>\n<blockquote>\n<p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数,这就说明catch也和then一样返回一个promise，可以继续then和catch。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'fulfilled:'</span>, val))</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'rejected'</span>, err));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'fulfilled:'</span>, val))</span><br><span class=\"line\">  .then(<span class=\"literal\">null</span>, (err) =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected:\"</span>, err));</span><br></pre></td></tr></table></figure>\n<p>如果该对象状态变为<code>resolved</code>，则会调用<code>then</code>方法指定的回调函数；如果异步操作抛出错误，状态就会变为<code>rejected</code>，就会调用<code>catch</code>方法指定的回调函数，处理这个错误。<strong>另外，then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    reject(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'test'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这两种写法相同，reject相当于抛出异常，然后让catch捕获。<br><strong>如果 Promise 状态已经变成resolved，再抛出错误是无效的。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"built_in\">console</span>.log(value) &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123; <span class=\"built_in\">console</span>.log(error) &#125;);</span><br><span class=\"line\"><span class=\"comment\">// ok</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>Promise</code> 在<code>resolve</code>语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 <code>Promise</code> 的状态一旦改变，就永久保持该状态，不会再变了。</p>\n<p><code>Promise</code>对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个<code>catch</code>语句捕获。<br><strong>所以一般在最后面加上一个<code>catch</code>就够了，没必要在每个<code>then</code>方法里面传入第二个捕获错误的参数，`then就只要处理成功的情况就行</strong></p>\n<blockquote>\n<p><strong>Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”</strong></p>\n</blockquote>\n<p>所以在<code>node</code>中<code>process</code>有个<code>unhandleRejection</code>专门来捕获这种<code>promise</code>中没有捕获的异常</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.on(<span class=\"string\">'unhandledRejection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, p</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-prototype-finally\"><a href=\"#Promise-prototype-finally\" class=\"headerlink\" title=\"Promise.prototype.finally()\"></a>Promise.prototype.finally()</h3><p><code>finally</code>方法用于指定不管 <code>Promise</code> 对象最后状态如何，都会执行的操作。<br>finally本质上是then方法的特例，实际上就是简化了成功和失败共同要做的事情。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise</span><br><span class=\"line\">.finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 语句</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">promise</span><br><span class=\"line\">.then(</span><br><span class=\"line\">  result =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 语句</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 语句</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h3><p><code>Promise.all</code>方法用于将多个 <code>Promise</code> 实例，包装成一个新的 <code>Promise</code> 实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>p1</code>、<code>p2</code>、<code>p3</code>全部成功后，<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组传给P的回调</li>\n<li>其中一个失败，就把失败的reject传给P的失败回调</li>\n</ol>\n<p>同样这里也存在异常的处理情况，<strong>作为参数的promise自己定义了catch方法，则如果出现异常外层的promise不能捕获到</strong></p>\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h3><p>和Promise.all差不多</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p>\n<h3 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h3><p>有时需要将现有对象转为 Promise 对象，Promise.resolve方法就起到这个作用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(<span class=\"string\">'foo'</span>))</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，立即resolve的 Promise 对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'three'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'two'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'one'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"comment\">// two</span></span><br><span class=\"line\"><span class=\"comment\">// three</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log(‘one’)则是立即执行，因此最先输出。</p>\n<p>这种用处不多，倒是这种类型面试题不少。</p>\n<h3 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject()\"></a>Promise.reject()</h3><p>和Promise.resolve()差不多。</p>\n<h3 id=\"Promise-try\"><a href=\"#Promise-try\" class=\"headerlink\" title=\"Promise.try()\"></a>Promise.try()</h3><p>不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误</p>\n<p><a href=\"https://juejin.im/post/5ab20c58f265da23a228fe0f?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">参考文献</a></p>\n<hr>\n<p><img src=\"/newBlog/2018/08/02/绕不开的promise/1012308194.jpg\" alt=\"Johannes Vermeer – The Milkmaid\"></p>\n<blockquote>\n<p>Johannes Vermeer – The Milkmaid 1658-61</p>\n</blockquote>\n"},{"title":"vue较少关注的地方","date":"2018-08-02T01:24:33.000Z","_content":"\n# vue较少关注的地方\n\n`vue`总体来说还是很简单的一个库，基本的一些需求能够很快地完成，但是有的需求用`vue`去实现，可能还是有点头疼，可能是因为一些api很少使用，所以这些地方也是需要查漏补缺，同时看看别的组件库是怎么封装组件的也能够学到很多东西。\n\n## 查漏补缺\n\n> 在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。\n所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象 (一些根实例特有的选项除外)。\n\n### 侦听器&计算属性&方法\n\n计算属性依赖于`data`、`props`或其他`computed`的变化而变化，具有缓冲，方法就没有缓冲。\n\n侦听器的应用场景在**数据变化时执行异步或开销较大的操作**。\n\n### v-if&v-else可复用组件\n\n来回切换的，`if`和`else`里面的一些共同的节点会存在复用的情况减少渲染开支，加入属性Key，避免复用。\n\n这里`v-if`和`v-else`切换的时候可以用这种空的`template`来代替`div`\n\n**`v-show`是不支持`template的`**\n\n```js\n<template v-if=\"loginType === 'username'\">\n  <label>Username</label>\n  <input placeholder=\"Enter your username\">\n</template>\n<template v-else>\n  <label>Email</label>\n  <input placeholder=\"Enter your email address\">\n</template>\n```\n\n### 事件处理\n\n> 有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：\n\n```js\n<button v-on:click=\"warn('Form cannot be submitted yet.', $event)\">\n  Submit\n</button>\n```\n\n### 组件\n\n> 当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，你会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。尤其要注意，像 `<ul>`、`<ol>`、`<table>`、`<select>` 这样的元素里允许包含的元素有限制，而另一些像 `<option>` 这样的元素只能出现在某些特定元素的内部。\n\n~~这个时候用上`is`，其他时候基本用不上。`.vue`没有影响，所以`is`基本没什么卵用。~~\n这个`is`好像还是很有用的...，配合`conponent`组件好像能搞出大事情，后续文章这块会有再介绍用法。\n\n#### 自定义事件的表单输入组件\n\n表单输入是业务中太常见的需求了，具体怎么搞，得深入理解下：\n\n> `v-model`是语法糖\n\n```js\n<input v-model=\"something\">\n```\n\n是以下示例的语法糖：\n\n```js\n<input\n  v-bind:value=\"something\"\n  v-on:input=\"something = $event.target.value\">\n```\n\n所以在组件中使用时，它相当于下面的简写：\n\n```js\n<custom-input\n  v-bind:value=\"something\"\n  v-on:input=\"something = arguments[0]\">\n</custom-input>\n```\n\n所以要让组件的 v-model 生效:\n\n* 接受一个`value`prop\n* 在有新的值时候触发`input`事件并将新的值作为参数\n\n官网例子：\n\n```js\n<currency-input v-model=\"price\"></currency-input>\n```\n\n```js\nVue.component('currency-input', {\n  template: '\\\n    <span>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      >\\\n    </span>\\\n  ',\n  props: ['value'],\n  methods: {\n    // 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制\n    updateValue: function (value) {\n      var formattedValue = value\n        // 删除两侧的空格符\n        .trim()\n        // 保留 2 位小数\n        .slice(\n          0,\n          value.indexOf('.') === -1\n            ? value.length\n            : value.indexOf('.') + 3\n        )\n      // 如果值尚不合规，则手动覆盖为合规的值\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      // 通过 input 事件带出数值\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})\n```\n\n#### 非父子组件通信\n\n官方给了一种比较奇怪的做法，实例化一个Vue实例，专门用来实现事件监听的空壳：\n\n```js\nvar bus = new Vue()\n```\n\n```js\nbus.$emit(`id-select`,1)\n```\n\n```js\nbus.$on('id-selected',function(id){})\n```\n\n这种方案，不清楚在`vue单文件`模式下如何使用。\n\n### 插槽slot\n\n写这篇文章最主要的目的可能就是因为这个插槽，之前过了一遍文档，这块一带而过，没有深入理解，现在遇到需要实现`tooltip`等组件时，发现`element ui`在插槽在[tooltip](https://github.com/ElemeFE/element/tree/dev/packages/tooltip)这一块就是用的`slot`，所以还是很有必要回过头好好学一下这个东西。\n\n先看官网定义，虽然官网这一块写的不是特别容易懂:\n\n自定义组件内部再套一个组件或是一个普通dom节点是插槽解决的问题，`vue`中的叫法叫做`内容分发`，在`React`中好像直接用`this.props.children`就能搞定，`React`在某些地方确实很灵活也比较容易理解：\n\n```html\n<app>\n  <app-header></app-header>\n  <app-footer></app-footer>\n</app>\n```\n\n* 编译作用域\n\n> 父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。\n* 单个插槽\n\n子组件至少包含一个`<slot>`插口，否则父组件的内容将会被**丢弃**。\n当子组件模板只有一个没有属性的插槽时，父组件传入的整个内容片段将插入到插槽所在的 `DOM` 位置，并替换掉插槽标签本身。\n\n例子也简单，贴一下吧：\n\n```js\n//这是子组件my-component\n<div>\n  <h2>我是子组件的标题</h2>\n  <slot>\n    只有在没有要分发的内容时才会显示。\n  </slot>\n</div>\n```\n\n```js\n//父组件调用子组件\n<div>\n  <h1>我是父组件的标题</h1>\n  <my-component>\n    <p>这是一些初始内容</p>\n    <p>这是更多的初始内容</p>\n  </my-component>\n</div>\n```\n\n```js\n//结果\n<div>\n  <h1>我是父组件的标题</h1>\n  <div>\n    <h2>我是子组件的标题</h2>\n    <p>这是一些初始内容</p>\n    <p>这是更多的初始内容</p>\n  </div>\n</div>\n```\n\n* 具名插槽\n\n> `<slot>` 元素可以用一个特殊的特性 `name` 来进一步配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 `slot` 特性的元素。仍然可以有一个`匿名插槽`，它是`默认插槽`，作为找不到匹配的内容片段的备用插槽。如果没有`默认插槽`，这些找不到匹配的内容片段将被抛弃。\n\n继续看例子，也没有什么难度：\n\n```js\n//一个布局组件app-layout\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n```\n\n```js\n//父组件去调用这个组件的时候\n<app-layout>\n  <h1 slot=\"header\">这里可能是一个页面标题</h1>\n\n  <p>主要内容的一个段落。</p>\n  <p>另一个主要段落。</p>\n\n  <p slot=\"footer\">这里有一些联系信息</p>\n</app-layout>\n```\n\n```js\n//结果\n<div class=\"container\">\n  <header>\n    <h1>这里可能是一个页面标题</h1>\n  </header>\n  <main>\n    <p>主要内容的一个段落。</p>\n    <p>另一个主要段落。</p>\n  </main>\n  <footer>\n    <p>这里有一些联系信息</p>\n  </footer>\n</div>\n```\n\n* 作用域插槽\n\n~~这里就是看不太懂的地方，先留一个坑。~~\n看了一圈看的差不多明白了，放一个官网例子：\n\n```js\n//子组件\n<div class=\"child\">\n  <slot text=\"hello from child\"></slot>\n</div>\n```\n\n```js\n//父组件\n<div class=\"parent\">\n  <child>\n    <template slot-scope=\"props\">\n      <span>hello from parent</span>\n      <span>{{ props.text }}</span>\n    </template>\n  </child>\n</div>\n```\n\n```js\n//結果\n<div class=\"parent\">\n  <div class=\"child\">\n    <span>hello from parent</span>\n    <span>hello from child</span>\n  </div>\n</div>\n```\n\n什么意思呢，子组件的内容可以传递到父组件上去给父组件用，例子中在自组建的`slot`上挂了一个`text`属性，然后父组件在`template`上声明一个`slot-scope`属性，通过这个属性的值就可以访问到自组件想要给父组件的值，有点绕，看起来很灵活很有用，但是实际应用场景应该不多。\n\n* 动态组件\n\n> 通过使用保留的 `<component>` 元素，并对其 `is` 特性进行动态绑定，你可以在同一个挂载点动态切换多个组件：\n\n感觉简单的一个可切换card页面可以用这种方法解决：\n\n```js\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: 'home'\n  },\n  components: {\n    home: { /* ... */ },\n    posts: { /* ... */ },\n    archive: { /* ... */ }\n  }\n})\n```\n\n```js\n<component v-bind:is=\"currentView\">\n  <!-- 组件在 vm.currentview 变化时改变！ -->\n</component>\n```\n\n```js\nvar Home = {\n  template: '<p>Welcome home!</p>'\n}\n\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: Home\n  }\n})\n```\n\n* keep-alive\n\n这种专门针对切换可以缓冲组件。\n\n```js\n<keep-alive>\n  <component :is=\"currentView\">\n    <!-- 非活动组件将被缓存！ -->\n  </component>\n</keep-alive>\n```\n\n### 自定义指令\n\n> 有的情况下，你仍然需要对**普通 `DOM` 元素**进行底层操作，这时候就会用到自定义指令\n\n官网的这个例子很好,组件在加载完自动focus：\n\n```js\n// 注册一个全局自定义指令 `v-focus`\nVue.directive('focus', {\n  // 当被绑定的元素插入到 DOM 中时……\n  inserted: function (el) {\n    // 聚焦元素\n    el.focus()\n  }\n})\n```\n\n```js\n//调用\n  <input v-focus>\n```\n\n几个钩子函数：\n\n1. bind 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\n2. inserted 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。\n3. update 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新。\n4. componentUpdated 指令所在组件的 VNode 及其子 VNode 全部更新后调用。\n5. unbind 只调用一次，指令与元素解绑时调用。\n\n钩子函数的参数：\n\n* el  指令所绑定的元素，可以用来直接操作 DOM\n* binding\n  * name 指令名，不包括 `v-` 前缀。\n  * value 指令的绑定值\n  * oldValue 指令绑定的前一个值，仅在 `update` 和 `componentUpdated` 钩子中可用。无论值是否改变都可用。\n  * expression 字符串形式的指令表达式。\n  * arg 传给指令的参数，可选。\n  * modifiers 一个包含修饰符的对象。\n* vnode Vue 编译生成的虚拟节点。\n* oldVnode 上一个虚拟节点，仅在 `update` 和 `componentUpdated` 钩子中可用。\n\n比较重要的也就`el`和`binding`，用`binding`里的`value`可以给`el`用。\n\n> 除了 `el` 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 `dataset` 来进行。\n\n---\n\n## 补充\n\n2018/4/6：\n\n最近看了一些别人组件一些用法，感觉学的`vue`还是比较皮毛的，有空再写一篇`vue`的较为高级用法。先留一个坑[《细看vue组件》](https://github.com/limengke123/my-note/blob/master/%E5%89%8D%E7%AB%AF/vue%E8%BE%83%E5%B0%91%E5%85%B3%E6%B3%A8%E7%9A%84%E5%9C%B0%E6%96%B9.md)\n\n---\n\n参考资料：\n\n1. [element UI](https://github.com/ElemeFE/element)\n\n2. [vant](https://github.com/youzan/vant)\n\n3. [vue组件思考](https://nlush.com/blog/2017/10/14/VUE-%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/)\n\n我的相关项目：\n\n* [fantastic-carnival](https://github.com/limengke123/fantastic-carnival) 一个前后端都有的博客\n\n* [md-editor](https://github.com/limengke123/md-editor) markdown的编辑器\n\n---\n\n![Johannes Vermeer – Girl with a Pearl Earring](vue较少关注的地方/3526.jpg)\n\n> Johannes Vermeer – Girl with a Pearl Earring 1665-67","source":"_posts/vue较少关注的地方.md","raw":"---\ntitle: vue较少关注的地方\ndate: 2018-08-02 09:24:33\ntags:\n  - vue\ncategories: 前端\n---\n\n# vue较少关注的地方\n\n`vue`总体来说还是很简单的一个库，基本的一些需求能够很快地完成，但是有的需求用`vue`去实现，可能还是有点头疼，可能是因为一些api很少使用，所以这些地方也是需要查漏补缺，同时看看别的组件库是怎么封装组件的也能够学到很多东西。\n\n## 查漏补缺\n\n> 在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。\n所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象 (一些根实例特有的选项除外)。\n\n### 侦听器&计算属性&方法\n\n计算属性依赖于`data`、`props`或其他`computed`的变化而变化，具有缓冲，方法就没有缓冲。\n\n侦听器的应用场景在**数据变化时执行异步或开销较大的操作**。\n\n### v-if&v-else可复用组件\n\n来回切换的，`if`和`else`里面的一些共同的节点会存在复用的情况减少渲染开支，加入属性Key，避免复用。\n\n这里`v-if`和`v-else`切换的时候可以用这种空的`template`来代替`div`\n\n**`v-show`是不支持`template的`**\n\n```js\n<template v-if=\"loginType === 'username'\">\n  <label>Username</label>\n  <input placeholder=\"Enter your username\">\n</template>\n<template v-else>\n  <label>Email</label>\n  <input placeholder=\"Enter your email address\">\n</template>\n```\n\n### 事件处理\n\n> 有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：\n\n```js\n<button v-on:click=\"warn('Form cannot be submitted yet.', $event)\">\n  Submit\n</button>\n```\n\n### 组件\n\n> 当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，你会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。尤其要注意，像 `<ul>`、`<ol>`、`<table>`、`<select>` 这样的元素里允许包含的元素有限制，而另一些像 `<option>` 这样的元素只能出现在某些特定元素的内部。\n\n~~这个时候用上`is`，其他时候基本用不上。`.vue`没有影响，所以`is`基本没什么卵用。~~\n这个`is`好像还是很有用的...，配合`conponent`组件好像能搞出大事情，后续文章这块会有再介绍用法。\n\n#### 自定义事件的表单输入组件\n\n表单输入是业务中太常见的需求了，具体怎么搞，得深入理解下：\n\n> `v-model`是语法糖\n\n```js\n<input v-model=\"something\">\n```\n\n是以下示例的语法糖：\n\n```js\n<input\n  v-bind:value=\"something\"\n  v-on:input=\"something = $event.target.value\">\n```\n\n所以在组件中使用时，它相当于下面的简写：\n\n```js\n<custom-input\n  v-bind:value=\"something\"\n  v-on:input=\"something = arguments[0]\">\n</custom-input>\n```\n\n所以要让组件的 v-model 生效:\n\n* 接受一个`value`prop\n* 在有新的值时候触发`input`事件并将新的值作为参数\n\n官网例子：\n\n```js\n<currency-input v-model=\"price\"></currency-input>\n```\n\n```js\nVue.component('currency-input', {\n  template: '\\\n    <span>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      >\\\n    </span>\\\n  ',\n  props: ['value'],\n  methods: {\n    // 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制\n    updateValue: function (value) {\n      var formattedValue = value\n        // 删除两侧的空格符\n        .trim()\n        // 保留 2 位小数\n        .slice(\n          0,\n          value.indexOf('.') === -1\n            ? value.length\n            : value.indexOf('.') + 3\n        )\n      // 如果值尚不合规，则手动覆盖为合规的值\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      // 通过 input 事件带出数值\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})\n```\n\n#### 非父子组件通信\n\n官方给了一种比较奇怪的做法，实例化一个Vue实例，专门用来实现事件监听的空壳：\n\n```js\nvar bus = new Vue()\n```\n\n```js\nbus.$emit(`id-select`,1)\n```\n\n```js\nbus.$on('id-selected',function(id){})\n```\n\n这种方案，不清楚在`vue单文件`模式下如何使用。\n\n### 插槽slot\n\n写这篇文章最主要的目的可能就是因为这个插槽，之前过了一遍文档，这块一带而过，没有深入理解，现在遇到需要实现`tooltip`等组件时，发现`element ui`在插槽在[tooltip](https://github.com/ElemeFE/element/tree/dev/packages/tooltip)这一块就是用的`slot`，所以还是很有必要回过头好好学一下这个东西。\n\n先看官网定义，虽然官网这一块写的不是特别容易懂:\n\n自定义组件内部再套一个组件或是一个普通dom节点是插槽解决的问题，`vue`中的叫法叫做`内容分发`，在`React`中好像直接用`this.props.children`就能搞定，`React`在某些地方确实很灵活也比较容易理解：\n\n```html\n<app>\n  <app-header></app-header>\n  <app-footer></app-footer>\n</app>\n```\n\n* 编译作用域\n\n> 父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。\n* 单个插槽\n\n子组件至少包含一个`<slot>`插口，否则父组件的内容将会被**丢弃**。\n当子组件模板只有一个没有属性的插槽时，父组件传入的整个内容片段将插入到插槽所在的 `DOM` 位置，并替换掉插槽标签本身。\n\n例子也简单，贴一下吧：\n\n```js\n//这是子组件my-component\n<div>\n  <h2>我是子组件的标题</h2>\n  <slot>\n    只有在没有要分发的内容时才会显示。\n  </slot>\n</div>\n```\n\n```js\n//父组件调用子组件\n<div>\n  <h1>我是父组件的标题</h1>\n  <my-component>\n    <p>这是一些初始内容</p>\n    <p>这是更多的初始内容</p>\n  </my-component>\n</div>\n```\n\n```js\n//结果\n<div>\n  <h1>我是父组件的标题</h1>\n  <div>\n    <h2>我是子组件的标题</h2>\n    <p>这是一些初始内容</p>\n    <p>这是更多的初始内容</p>\n  </div>\n</div>\n```\n\n* 具名插槽\n\n> `<slot>` 元素可以用一个特殊的特性 `name` 来进一步配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 `slot` 特性的元素。仍然可以有一个`匿名插槽`，它是`默认插槽`，作为找不到匹配的内容片段的备用插槽。如果没有`默认插槽`，这些找不到匹配的内容片段将被抛弃。\n\n继续看例子，也没有什么难度：\n\n```js\n//一个布局组件app-layout\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n```\n\n```js\n//父组件去调用这个组件的时候\n<app-layout>\n  <h1 slot=\"header\">这里可能是一个页面标题</h1>\n\n  <p>主要内容的一个段落。</p>\n  <p>另一个主要段落。</p>\n\n  <p slot=\"footer\">这里有一些联系信息</p>\n</app-layout>\n```\n\n```js\n//结果\n<div class=\"container\">\n  <header>\n    <h1>这里可能是一个页面标题</h1>\n  </header>\n  <main>\n    <p>主要内容的一个段落。</p>\n    <p>另一个主要段落。</p>\n  </main>\n  <footer>\n    <p>这里有一些联系信息</p>\n  </footer>\n</div>\n```\n\n* 作用域插槽\n\n~~这里就是看不太懂的地方，先留一个坑。~~\n看了一圈看的差不多明白了，放一个官网例子：\n\n```js\n//子组件\n<div class=\"child\">\n  <slot text=\"hello from child\"></slot>\n</div>\n```\n\n```js\n//父组件\n<div class=\"parent\">\n  <child>\n    <template slot-scope=\"props\">\n      <span>hello from parent</span>\n      <span>{{ props.text }}</span>\n    </template>\n  </child>\n</div>\n```\n\n```js\n//結果\n<div class=\"parent\">\n  <div class=\"child\">\n    <span>hello from parent</span>\n    <span>hello from child</span>\n  </div>\n</div>\n```\n\n什么意思呢，子组件的内容可以传递到父组件上去给父组件用，例子中在自组建的`slot`上挂了一个`text`属性，然后父组件在`template`上声明一个`slot-scope`属性，通过这个属性的值就可以访问到自组件想要给父组件的值，有点绕，看起来很灵活很有用，但是实际应用场景应该不多。\n\n* 动态组件\n\n> 通过使用保留的 `<component>` 元素，并对其 `is` 特性进行动态绑定，你可以在同一个挂载点动态切换多个组件：\n\n感觉简单的一个可切换card页面可以用这种方法解决：\n\n```js\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: 'home'\n  },\n  components: {\n    home: { /* ... */ },\n    posts: { /* ... */ },\n    archive: { /* ... */ }\n  }\n})\n```\n\n```js\n<component v-bind:is=\"currentView\">\n  <!-- 组件在 vm.currentview 变化时改变！ -->\n</component>\n```\n\n```js\nvar Home = {\n  template: '<p>Welcome home!</p>'\n}\n\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: Home\n  }\n})\n```\n\n* keep-alive\n\n这种专门针对切换可以缓冲组件。\n\n```js\n<keep-alive>\n  <component :is=\"currentView\">\n    <!-- 非活动组件将被缓存！ -->\n  </component>\n</keep-alive>\n```\n\n### 自定义指令\n\n> 有的情况下，你仍然需要对**普通 `DOM` 元素**进行底层操作，这时候就会用到自定义指令\n\n官网的这个例子很好,组件在加载完自动focus：\n\n```js\n// 注册一个全局自定义指令 `v-focus`\nVue.directive('focus', {\n  // 当被绑定的元素插入到 DOM 中时……\n  inserted: function (el) {\n    // 聚焦元素\n    el.focus()\n  }\n})\n```\n\n```js\n//调用\n  <input v-focus>\n```\n\n几个钩子函数：\n\n1. bind 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\n2. inserted 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。\n3. update 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新。\n4. componentUpdated 指令所在组件的 VNode 及其子 VNode 全部更新后调用。\n5. unbind 只调用一次，指令与元素解绑时调用。\n\n钩子函数的参数：\n\n* el  指令所绑定的元素，可以用来直接操作 DOM\n* binding\n  * name 指令名，不包括 `v-` 前缀。\n  * value 指令的绑定值\n  * oldValue 指令绑定的前一个值，仅在 `update` 和 `componentUpdated` 钩子中可用。无论值是否改变都可用。\n  * expression 字符串形式的指令表达式。\n  * arg 传给指令的参数，可选。\n  * modifiers 一个包含修饰符的对象。\n* vnode Vue 编译生成的虚拟节点。\n* oldVnode 上一个虚拟节点，仅在 `update` 和 `componentUpdated` 钩子中可用。\n\n比较重要的也就`el`和`binding`，用`binding`里的`value`可以给`el`用。\n\n> 除了 `el` 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 `dataset` 来进行。\n\n---\n\n## 补充\n\n2018/4/6：\n\n最近看了一些别人组件一些用法，感觉学的`vue`还是比较皮毛的，有空再写一篇`vue`的较为高级用法。先留一个坑[《细看vue组件》](https://github.com/limengke123/my-note/blob/master/%E5%89%8D%E7%AB%AF/vue%E8%BE%83%E5%B0%91%E5%85%B3%E6%B3%A8%E7%9A%84%E5%9C%B0%E6%96%B9.md)\n\n---\n\n参考资料：\n\n1. [element UI](https://github.com/ElemeFE/element)\n\n2. [vant](https://github.com/youzan/vant)\n\n3. [vue组件思考](https://nlush.com/blog/2017/10/14/VUE-%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/)\n\n我的相关项目：\n\n* [fantastic-carnival](https://github.com/limengke123/fantastic-carnival) 一个前后端都有的博客\n\n* [md-editor](https://github.com/limengke123/md-editor) markdown的编辑器\n\n---\n\n![Johannes Vermeer – Girl with a Pearl Earring](vue较少关注的地方/3526.jpg)\n\n> Johannes Vermeer – Girl with a Pearl Earring 1665-67","slug":"vue较少关注的地方","published":1,"updated":"2018-08-02T01:25:49.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbvq2he00051gz7n0hs5smy","content":"<h1 id=\"vue较少关注的地方\"><a href=\"#vue较少关注的地方\" class=\"headerlink\" title=\"vue较少关注的地方\"></a>vue较少关注的地方</h1><p><code>vue</code>总体来说还是很简单的一个库，基本的一些需求能够很快地完成，但是有的需求用<code>vue</code>去实现，可能还是有点头疼，可能是因为一些api很少使用，所以这些地方也是需要查漏补缺，同时看看别的组件库是怎么封装组件的也能够学到很多东西。</p>\n<h2 id=\"查漏补缺\"><a href=\"#查漏补缺\" class=\"headerlink\" title=\"查漏补缺\"></a>查漏补缺</h2><blockquote>\n<p>在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。<br>所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象 (一些根实例特有的选项除外)。</p>\n</blockquote>\n<h3 id=\"侦听器-amp-计算属性-amp-方法\"><a href=\"#侦听器-amp-计算属性-amp-方法\" class=\"headerlink\" title=\"侦听器&amp;计算属性&amp;方法\"></a>侦听器&amp;计算属性&amp;方法</h3><p>计算属性依赖于<code>data</code>、<code>props</code>或其他<code>computed</code>的变化而变化，具有缓冲，方法就没有缓冲。</p>\n<p>侦听器的应用场景在<strong>数据变化时执行异步或开销较大的操作</strong>。</p>\n<h3 id=\"v-if-amp-v-else可复用组件\"><a href=\"#v-if-amp-v-else可复用组件\" class=\"headerlink\" title=\"v-if&amp;v-else可复用组件\"></a>v-if&amp;v-else可复用组件</h3><p>来回切换的，<code>if</code>和<code>else</code>里面的一些共同的节点会存在复用的情况减少渲染开支，加入属性Key，避免复用。</p>\n<p>这里<code>v-if</code>和<code>v-else</code>切换的时候可以用这种空的<code>template</code>来代替<code>div</code></p>\n<p><strong><code>v-show</code>是不支持<code>template的</code></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template v-<span class=\"keyword\">if</span>=<span class=\"string\">\"loginType === 'username'\"</span>&gt;</span><br><span class=\"line\">  &lt;label&gt;Username&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;input placeholder=\"Enter your username\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\">&lt;template v-<span class=\"keyword\">else</span>&gt;</span><br><span class=\"line\">  &lt;label&gt;Email&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;input placeholder=\"Enter your email address\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h3><blockquote>\n<p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">\"warn('Form cannot be submitted yet.', $event)\"</span>&gt;</span><br><span class=\"line\">  Submit</span><br><span class=\"line\">&lt;<span class=\"regexp\">/button&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><blockquote>\n<p>当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，你会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。尤其要注意，像 <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;select&gt;</code> 这样的元素里允许包含的元素有限制，而另一些像 <code>&lt;option&gt;</code> 这样的元素只能出现在某些特定元素的内部。</p>\n</blockquote>\n<p><del>这个时候用上<code>is</code>，其他时候基本用不上。<code>.vue</code>没有影响，所以<code>is</code>基本没什么卵用。</del><br>这个<code>is</code>好像还是很有用的…，配合<code>conponent</code>组件好像能搞出大事情，后续文章这块会有再介绍用法。</p>\n<h4 id=\"自定义事件的表单输入组件\"><a href=\"#自定义事件的表单输入组件\" class=\"headerlink\" title=\"自定义事件的表单输入组件\"></a>自定义事件的表单输入组件</h4><p>表单输入是业务中太常见的需求了，具体怎么搞，得深入理解下：</p>\n<blockquote>\n<p><code>v-model</code>是语法糖</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-model=<span class=\"string\">\"something\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>是以下示例的语法糖：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input</span><br><span class=\"line\">  v-bind:value=<span class=\"string\">\"something\"</span></span><br><span class=\"line\">  v-on:input=<span class=\"string\">\"something = $event.target.value\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>所以在组件中使用时，它相当于下面的简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;custom-input</span><br><span class=\"line\">  v-bind:value=<span class=\"string\">\"something\"</span></span><br><span class=\"line\">  v-on:input=<span class=\"string\">\"something = arguments[0]\"</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/custom-input&gt;</span></span><br></pre></td></tr></table></figure>\n<p>所以要让组件的 v-model 生效:</p>\n<ul>\n<li>接受一个<code>value</code>prop</li>\n<li>在有新的值时候触发<code>input</code>事件并将新的值作为参数</li>\n</ul>\n<p>官网例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;currency-input v-model=<span class=\"string\">\"price\"</span>&gt;&lt;/currency-input&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'currency-input'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'\\</span></span><br><span class=\"line\"><span class=\"string\">    &lt;span&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">      $\\</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input\\</span></span><br><span class=\"line\"><span class=\"string\">        ref=\"input\"\\</span></span><br><span class=\"line\"><span class=\"string\">        v-bind:value=\"value\"\\</span></span><br><span class=\"line\"><span class=\"string\">        v-on:input=\"updateValue($event.target.value)\"\\</span></span><br><span class=\"line\"><span class=\"string\">      &gt;\\</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/span&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">  '</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">'value'</span>],</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制</span></span><br><span class=\"line\">    updateValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> formattedValue = value</span><br><span class=\"line\">        <span class=\"comment\">// 删除两侧的空格符</span></span><br><span class=\"line\">        .trim()</span><br><span class=\"line\">        <span class=\"comment\">// 保留 2 位小数</span></span><br><span class=\"line\">        .slice(</span><br><span class=\"line\">          <span class=\"number\">0</span>,</span><br><span class=\"line\">          value.indexOf(<span class=\"string\">'.'</span>) === <span class=\"number\">-1</span></span><br><span class=\"line\">            ? value.length</span><br><span class=\"line\">            : value.indexOf(<span class=\"string\">'.'</span>) + <span class=\"number\">3</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      <span class=\"comment\">// 如果值尚不合规，则手动覆盖为合规的值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (formattedValue !== value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$refs.input.value = formattedValue</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 通过 input 事件带出数值</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, <span class=\"built_in\">Number</span>(formattedValue))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"非父子组件通信\"><a href=\"#非父子组件通信\" class=\"headerlink\" title=\"非父子组件通信\"></a>非父子组件通信</h4><p>官方给了一种比较奇怪的做法，实例化一个Vue实例，专门用来实现事件监听的空壳：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bus = <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bus.$emit(<span class=\"string\">`id-select`</span>,<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bus.$on(<span class=\"string\">'id-selected'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>这种方案，不清楚在<code>vue单文件</code>模式下如何使用。</p>\n<h3 id=\"插槽slot\"><a href=\"#插槽slot\" class=\"headerlink\" title=\"插槽slot\"></a>插槽slot</h3><p>写这篇文章最主要的目的可能就是因为这个插槽，之前过了一遍文档，这块一带而过，没有深入理解，现在遇到需要实现<code>tooltip</code>等组件时，发现<code>element ui</code>在插槽在<a href=\"https://github.com/ElemeFE/element/tree/dev/packages/tooltip\" target=\"_blank\" rel=\"noopener\">tooltip</a>这一块就是用的<code>slot</code>，所以还是很有必要回过头好好学一下这个东西。</p>\n<p>先看官网定义，虽然官网这一块写的不是特别容易懂:</p>\n<p>自定义组件内部再套一个组件或是一个普通dom节点是插槽解决的问题，<code>vue</code>中的叫法叫做<code>内容分发</code>，在<code>React</code>中好像直接用<code>this.props.children</code>就能搞定，<code>React</code>在某些地方确实很灵活也比较容易理解：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>编译作用域</li>\n</ul>\n<blockquote>\n<p>父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。</p>\n<ul>\n<li>单个插槽</li>\n</ul>\n</blockquote>\n<p>子组件至少包含一个<code>&lt;slot&gt;</code>插口，否则父组件的内容将会被<strong>丢弃</strong>。<br>当子组件模板只有一个没有属性的插槽时，父组件传入的整个内容片段将插入到插槽所在的 <code>DOM</code> 位置，并替换掉插槽标签本身。</p>\n<p>例子也简单，贴一下吧：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这是子组件my-component</span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h2&gt;我是子组件的标题&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;slot&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    只有在没有要分发的内容时才会显示。</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>slot&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件调用子组件</span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h1&gt;我是父组件的标题&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;my-component&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;这是一些初始内容&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;p&gt;这是更多的初始内容&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/my</span>-component&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h1&gt;我是父组件的标题&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;h2&gt;我是子组件的标题&lt;/</span>h2&gt;</span><br><span class=\"line\">    &lt;p&gt;这是一些初始内容&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;这是更多的初始内容&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>具名插槽</li>\n</ul>\n<blockquote>\n<p><code>&lt;slot&gt;</code> 元素可以用一个特殊的特性 <code>name</code> 来进一步配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 <code>slot</code> 特性的元素。仍然可以有一个<code>匿名插槽</code>，它是<code>默认插槽</code>，作为找不到匹配的内容片段的备用插槽。如果没有<code>默认插槽</code>，这些找不到匹配的内容片段将被抛弃。</p>\n</blockquote>\n<p>继续看例子，也没有什么难度：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个布局组件app-layout</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">  &lt;header&gt;</span><br><span class=\"line\">    &lt;slot name=<span class=\"string\">\"header\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span><br><span class=\"line\">  &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;main&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;slot&gt;&lt;/</span>slot&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/main&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;footer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;slot name=\"footer\"&gt;&lt;/</span>slot&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/footer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件去调用这个组件的时候</span></span><br><span class=\"line\">&lt;app-layout&gt;</span><br><span class=\"line\">  &lt;h1 slot=<span class=\"string\">\"header\"</span>&gt;这里可能是一个页面标题&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;主要内容的一个段落。&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;p&gt;另一个主要段落。&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p slot=\"footer\"&gt;这里有一些联系信息&lt;/</span>p&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/app-layout&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">  &lt;header&gt;</span><br><span class=\"line\">    &lt;h1&gt;这里可能是一个页面标题&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>header&gt;</span><br><span class=\"line\">  &lt;main&gt;</span><br><span class=\"line\">    &lt;p&gt;主要内容的一个段落。&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;另一个主要段落。&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/main&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;footer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;这里有一些联系信息&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/footer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>作用域插槽</li>\n</ul>\n<p><del>这里就是看不太懂的地方，先留一个坑。</del><br>看了一圈看的差不多明白了，放一个官网例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"child\"</span>&gt;</span><br><span class=\"line\">  &lt;slot text=<span class=\"string\">\"hello from child\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"parent\"</span>&gt;</span><br><span class=\"line\">  &lt;child&gt;</span><br><span class=\"line\">    &lt;template slot-scope=<span class=\"string\">\"props\"</span>&gt;</span><br><span class=\"line\">      &lt;span&gt;hello <span class=\"keyword\">from</span> parent&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;span&gt;&#123;&#123; props.text &#125;&#125;&lt;/</span>span&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>child&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//結果</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"parent\"</span>&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"child\"</span>&gt;</span><br><span class=\"line\">    &lt;span&gt;hello <span class=\"keyword\">from</span> parent&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;span&gt;hello from child&lt;/</span>span&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<p>什么意思呢，子组件的内容可以传递到父组件上去给父组件用，例子中在自组建的<code>slot</code>上挂了一个<code>text</code>属性，然后父组件在<code>template</code>上声明一个<code>slot-scope</code>属性，通过这个属性的值就可以访问到自组件想要给父组件的值，有点绕，看起来很灵活很有用，但是实际应用场景应该不多。</p>\n<ul>\n<li>动态组件</li>\n</ul>\n<blockquote>\n<p>通过使用保留的 <code>&lt;component&gt;</code> 元素，并对其 <code>is</code> 特性进行动态绑定，你可以在同一个挂载点动态切换多个组件：</p>\n</blockquote>\n<p>感觉简单的一个可切换card页面可以用这种方法解决：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    currentView: <span class=\"string\">'home'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    home: &#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">    posts: &#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">    archive: &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component v-bind:is=<span class=\"string\">\"currentView\"</span>&gt;</span><br><span class=\"line\">  &lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/component&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Home = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;p&gt;Welcome home!&lt;/p&gt;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    currentView: Home</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>keep-alive</li>\n</ul>\n<p>这种专门针对切换可以缓冲组件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;keep-alive&gt;</span><br><span class=\"line\">  &lt;component :is=<span class=\"string\">\"currentView\"</span>&gt;</span><br><span class=\"line\">    &lt;!-- 非活动组件将被缓存！ --&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/component&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>keep-alive&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h3><blockquote>\n<p>有的情况下，你仍然需要对<strong>普通 <code>DOM</code> 元素</strong>进行底层操作，这时候就会用到自定义指令</p>\n</blockquote>\n<p>官网的这个例子很好,组件在加载完自动focus：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册一个全局自定义指令 `v-focus`</span></span><br><span class=\"line\">Vue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class=\"line\">  inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 聚焦元素</span></span><br><span class=\"line\">    el.focus()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">  &lt;input v-focus&gt;</span><br></pre></td></tr></table></figure>\n<p>几个钩子函数：</p>\n<ol>\n<li>bind 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li>\n<li>inserted 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li>\n<li>update 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新。</li>\n<li>componentUpdated 指令所在组件的 VNode 及其子 VNode 全部更新后调用。</li>\n<li>unbind 只调用一次，指令与元素解绑时调用。</li>\n</ol>\n<p>钩子函数的参数：</p>\n<ul>\n<li>el  指令所绑定的元素，可以用来直接操作 DOM</li>\n<li>binding<ul>\n<li>name 指令名，不包括 <code>v-</code> 前缀。</li>\n<li>value 指令的绑定值</li>\n<li>oldValue 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li>\n<li>expression 字符串形式的指令表达式。</li>\n<li>arg 传给指令的参数，可选。</li>\n<li>modifiers 一个包含修饰符的对象。</li>\n</ul>\n</li>\n<li>vnode Vue 编译生成的虚拟节点。</li>\n<li>oldVnode 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li>\n</ul>\n<p>比较重要的也就<code>el</code>和<code>binding</code>，用<code>binding</code>里的<code>value</code>可以给<code>el</code>用。</p>\n<blockquote>\n<p>除了 <code>el</code> 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 <code>dataset</code> 来进行。</p>\n</blockquote>\n<hr>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>2018/4/6：</p>\n<p>最近看了一些别人组件一些用法，感觉学的<code>vue</code>还是比较皮毛的，有空再写一篇<code>vue</code>的较为高级用法。先留一个坑<a href=\"https://github.com/limengke123/my-note/blob/master/%E5%89%8D%E7%AB%AF/vue%E8%BE%83%E5%B0%91%E5%85%B3%E6%B3%A8%E7%9A%84%E5%9C%B0%E6%96%B9.md\" target=\"_blank\" rel=\"noopener\">《细看vue组件》</a></p>\n<hr>\n<p>参考资料：</p>\n<ol>\n<li><p><a href=\"https://github.com/ElemeFE/element\" target=\"_blank\" rel=\"noopener\">element UI</a></p>\n</li>\n<li><p><a href=\"https://github.com/youzan/vant\" target=\"_blank\" rel=\"noopener\">vant</a></p>\n</li>\n<li><p><a href=\"https://nlush.com/blog/2017/10/14/VUE-%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/\" target=\"_blank\" rel=\"noopener\">vue组件思考</a></p>\n</li>\n</ol>\n<p>我的相关项目：</p>\n<ul>\n<li><p><a href=\"https://github.com/limengke123/fantastic-carnival\" target=\"_blank\" rel=\"noopener\">fantastic-carnival</a> 一个前后端都有的博客</p>\n</li>\n<li><p><a href=\"https://github.com/limengke123/md-editor\" target=\"_blank\" rel=\"noopener\">md-editor</a> markdown的编辑器</p>\n</li>\n</ul>\n<hr>\n<p><img src=\"/newBlog/2018/08/02/vue较少关注的地方/3526.jpg\" alt=\"Johannes Vermeer – Girl with a Pearl Earring\"></p>\n<blockquote>\n<p>Johannes Vermeer – Girl with a Pearl Earring 1665-67</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue较少关注的地方\"><a href=\"#vue较少关注的地方\" class=\"headerlink\" title=\"vue较少关注的地方\"></a>vue较少关注的地方</h1><p><code>vue</code>总体来说还是很简单的一个库，基本的一些需求能够很快地完成，但是有的需求用<code>vue</code>去实现，可能还是有点头疼，可能是因为一些api很少使用，所以这些地方也是需要查漏补缺，同时看看别的组件库是怎么封装组件的也能够学到很多东西。</p>\n<h2 id=\"查漏补缺\"><a href=\"#查漏补缺\" class=\"headerlink\" title=\"查漏补缺\"></a>查漏补缺</h2><blockquote>\n<p>在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。<br>所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象 (一些根实例特有的选项除外)。</p>\n</blockquote>\n<h3 id=\"侦听器-amp-计算属性-amp-方法\"><a href=\"#侦听器-amp-计算属性-amp-方法\" class=\"headerlink\" title=\"侦听器&amp;计算属性&amp;方法\"></a>侦听器&amp;计算属性&amp;方法</h3><p>计算属性依赖于<code>data</code>、<code>props</code>或其他<code>computed</code>的变化而变化，具有缓冲，方法就没有缓冲。</p>\n<p>侦听器的应用场景在<strong>数据变化时执行异步或开销较大的操作</strong>。</p>\n<h3 id=\"v-if-amp-v-else可复用组件\"><a href=\"#v-if-amp-v-else可复用组件\" class=\"headerlink\" title=\"v-if&amp;v-else可复用组件\"></a>v-if&amp;v-else可复用组件</h3><p>来回切换的，<code>if</code>和<code>else</code>里面的一些共同的节点会存在复用的情况减少渲染开支，加入属性Key，避免复用。</p>\n<p>这里<code>v-if</code>和<code>v-else</code>切换的时候可以用这种空的<code>template</code>来代替<code>div</code></p>\n<p><strong><code>v-show</code>是不支持<code>template的</code></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template v-<span class=\"keyword\">if</span>=<span class=\"string\">\"loginType === 'username'\"</span>&gt;</span><br><span class=\"line\">  &lt;label&gt;Username&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;input placeholder=\"Enter your username\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\">&lt;template v-<span class=\"keyword\">else</span>&gt;</span><br><span class=\"line\">  &lt;label&gt;Email&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;input placeholder=\"Enter your email address\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h3><blockquote>\n<p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">\"warn('Form cannot be submitted yet.', $event)\"</span>&gt;</span><br><span class=\"line\">  Submit</span><br><span class=\"line\">&lt;<span class=\"regexp\">/button&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><blockquote>\n<p>当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，你会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。尤其要注意，像 <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;select&gt;</code> 这样的元素里允许包含的元素有限制，而另一些像 <code>&lt;option&gt;</code> 这样的元素只能出现在某些特定元素的内部。</p>\n</blockquote>\n<p><del>这个时候用上<code>is</code>，其他时候基本用不上。<code>.vue</code>没有影响，所以<code>is</code>基本没什么卵用。</del><br>这个<code>is</code>好像还是很有用的…，配合<code>conponent</code>组件好像能搞出大事情，后续文章这块会有再介绍用法。</p>\n<h4 id=\"自定义事件的表单输入组件\"><a href=\"#自定义事件的表单输入组件\" class=\"headerlink\" title=\"自定义事件的表单输入组件\"></a>自定义事件的表单输入组件</h4><p>表单输入是业务中太常见的需求了，具体怎么搞，得深入理解下：</p>\n<blockquote>\n<p><code>v-model</code>是语法糖</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-model=<span class=\"string\">\"something\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>是以下示例的语法糖：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input</span><br><span class=\"line\">  v-bind:value=<span class=\"string\">\"something\"</span></span><br><span class=\"line\">  v-on:input=<span class=\"string\">\"something = $event.target.value\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>所以在组件中使用时，它相当于下面的简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;custom-input</span><br><span class=\"line\">  v-bind:value=<span class=\"string\">\"something\"</span></span><br><span class=\"line\">  v-on:input=<span class=\"string\">\"something = arguments[0]\"</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/custom-input&gt;</span></span><br></pre></td></tr></table></figure>\n<p>所以要让组件的 v-model 生效:</p>\n<ul>\n<li>接受一个<code>value</code>prop</li>\n<li>在有新的值时候触发<code>input</code>事件并将新的值作为参数</li>\n</ul>\n<p>官网例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;currency-input v-model=<span class=\"string\">\"price\"</span>&gt;&lt;/currency-input&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'currency-input'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'\\</span></span><br><span class=\"line\"><span class=\"string\">    &lt;span&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">      $\\</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input\\</span></span><br><span class=\"line\"><span class=\"string\">        ref=\"input\"\\</span></span><br><span class=\"line\"><span class=\"string\">        v-bind:value=\"value\"\\</span></span><br><span class=\"line\"><span class=\"string\">        v-on:input=\"updateValue($event.target.value)\"\\</span></span><br><span class=\"line\"><span class=\"string\">      &gt;\\</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/span&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">  '</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">'value'</span>],</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制</span></span><br><span class=\"line\">    updateValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> formattedValue = value</span><br><span class=\"line\">        <span class=\"comment\">// 删除两侧的空格符</span></span><br><span class=\"line\">        .trim()</span><br><span class=\"line\">        <span class=\"comment\">// 保留 2 位小数</span></span><br><span class=\"line\">        .slice(</span><br><span class=\"line\">          <span class=\"number\">0</span>,</span><br><span class=\"line\">          value.indexOf(<span class=\"string\">'.'</span>) === <span class=\"number\">-1</span></span><br><span class=\"line\">            ? value.length</span><br><span class=\"line\">            : value.indexOf(<span class=\"string\">'.'</span>) + <span class=\"number\">3</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      <span class=\"comment\">// 如果值尚不合规，则手动覆盖为合规的值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (formattedValue !== value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$refs.input.value = formattedValue</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 通过 input 事件带出数值</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, <span class=\"built_in\">Number</span>(formattedValue))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"非父子组件通信\"><a href=\"#非父子组件通信\" class=\"headerlink\" title=\"非父子组件通信\"></a>非父子组件通信</h4><p>官方给了一种比较奇怪的做法，实例化一个Vue实例，专门用来实现事件监听的空壳：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bus = <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bus.$emit(<span class=\"string\">`id-select`</span>,<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bus.$on(<span class=\"string\">'id-selected'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>这种方案，不清楚在<code>vue单文件</code>模式下如何使用。</p>\n<h3 id=\"插槽slot\"><a href=\"#插槽slot\" class=\"headerlink\" title=\"插槽slot\"></a>插槽slot</h3><p>写这篇文章最主要的目的可能就是因为这个插槽，之前过了一遍文档，这块一带而过，没有深入理解，现在遇到需要实现<code>tooltip</code>等组件时，发现<code>element ui</code>在插槽在<a href=\"https://github.com/ElemeFE/element/tree/dev/packages/tooltip\" target=\"_blank\" rel=\"noopener\">tooltip</a>这一块就是用的<code>slot</code>，所以还是很有必要回过头好好学一下这个东西。</p>\n<p>先看官网定义，虽然官网这一块写的不是特别容易懂:</p>\n<p>自定义组件内部再套一个组件或是一个普通dom节点是插槽解决的问题，<code>vue</code>中的叫法叫做<code>内容分发</code>，在<code>React</code>中好像直接用<code>this.props.children</code>就能搞定，<code>React</code>在某些地方确实很灵活也比较容易理解：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>编译作用域</li>\n</ul>\n<blockquote>\n<p>父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。</p>\n<ul>\n<li>单个插槽</li>\n</ul>\n</blockquote>\n<p>子组件至少包含一个<code>&lt;slot&gt;</code>插口，否则父组件的内容将会被<strong>丢弃</strong>。<br>当子组件模板只有一个没有属性的插槽时，父组件传入的整个内容片段将插入到插槽所在的 <code>DOM</code> 位置，并替换掉插槽标签本身。</p>\n<p>例子也简单，贴一下吧：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这是子组件my-component</span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h2&gt;我是子组件的标题&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;slot&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    只有在没有要分发的内容时才会显示。</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>slot&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件调用子组件</span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h1&gt;我是父组件的标题&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;my-component&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;这是一些初始内容&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;p&gt;这是更多的初始内容&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/my</span>-component&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h1&gt;我是父组件的标题&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;h2&gt;我是子组件的标题&lt;/</span>h2&gt;</span><br><span class=\"line\">    &lt;p&gt;这是一些初始内容&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;这是更多的初始内容&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>具名插槽</li>\n</ul>\n<blockquote>\n<p><code>&lt;slot&gt;</code> 元素可以用一个特殊的特性 <code>name</code> 来进一步配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 <code>slot</code> 特性的元素。仍然可以有一个<code>匿名插槽</code>，它是<code>默认插槽</code>，作为找不到匹配的内容片段的备用插槽。如果没有<code>默认插槽</code>，这些找不到匹配的内容片段将被抛弃。</p>\n</blockquote>\n<p>继续看例子，也没有什么难度：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个布局组件app-layout</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">  &lt;header&gt;</span><br><span class=\"line\">    &lt;slot name=<span class=\"string\">\"header\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span><br><span class=\"line\">  &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;main&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;slot&gt;&lt;/</span>slot&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/main&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;footer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;slot name=\"footer\"&gt;&lt;/</span>slot&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/footer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件去调用这个组件的时候</span></span><br><span class=\"line\">&lt;app-layout&gt;</span><br><span class=\"line\">  &lt;h1 slot=<span class=\"string\">\"header\"</span>&gt;这里可能是一个页面标题&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;主要内容的一个段落。&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;p&gt;另一个主要段落。&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p slot=\"footer\"&gt;这里有一些联系信息&lt;/</span>p&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/app-layout&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">  &lt;header&gt;</span><br><span class=\"line\">    &lt;h1&gt;这里可能是一个页面标题&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>header&gt;</span><br><span class=\"line\">  &lt;main&gt;</span><br><span class=\"line\">    &lt;p&gt;主要内容的一个段落。&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;另一个主要段落。&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/main&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;footer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;这里有一些联系信息&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/footer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>作用域插槽</li>\n</ul>\n<p><del>这里就是看不太懂的地方，先留一个坑。</del><br>看了一圈看的差不多明白了，放一个官网例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"child\"</span>&gt;</span><br><span class=\"line\">  &lt;slot text=<span class=\"string\">\"hello from child\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"parent\"</span>&gt;</span><br><span class=\"line\">  &lt;child&gt;</span><br><span class=\"line\">    &lt;template slot-scope=<span class=\"string\">\"props\"</span>&gt;</span><br><span class=\"line\">      &lt;span&gt;hello <span class=\"keyword\">from</span> parent&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;span&gt;&#123;&#123; props.text &#125;&#125;&lt;/</span>span&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>child&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//結果</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"parent\"</span>&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"child\"</span>&gt;</span><br><span class=\"line\">    &lt;span&gt;hello <span class=\"keyword\">from</span> parent&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;span&gt;hello from child&lt;/</span>span&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<p>什么意思呢，子组件的内容可以传递到父组件上去给父组件用，例子中在自组建的<code>slot</code>上挂了一个<code>text</code>属性，然后父组件在<code>template</code>上声明一个<code>slot-scope</code>属性，通过这个属性的值就可以访问到自组件想要给父组件的值，有点绕，看起来很灵活很有用，但是实际应用场景应该不多。</p>\n<ul>\n<li>动态组件</li>\n</ul>\n<blockquote>\n<p>通过使用保留的 <code>&lt;component&gt;</code> 元素，并对其 <code>is</code> 特性进行动态绑定，你可以在同一个挂载点动态切换多个组件：</p>\n</blockquote>\n<p>感觉简单的一个可切换card页面可以用这种方法解决：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    currentView: <span class=\"string\">'home'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    home: &#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">    posts: &#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">    archive: &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component v-bind:is=<span class=\"string\">\"currentView\"</span>&gt;</span><br><span class=\"line\">  &lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/component&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Home = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;p&gt;Welcome home!&lt;/p&gt;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    currentView: Home</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>keep-alive</li>\n</ul>\n<p>这种专门针对切换可以缓冲组件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;keep-alive&gt;</span><br><span class=\"line\">  &lt;component :is=<span class=\"string\">\"currentView\"</span>&gt;</span><br><span class=\"line\">    &lt;!-- 非活动组件将被缓存！ --&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/component&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>keep-alive&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h3><blockquote>\n<p>有的情况下，你仍然需要对<strong>普通 <code>DOM</code> 元素</strong>进行底层操作，这时候就会用到自定义指令</p>\n</blockquote>\n<p>官网的这个例子很好,组件在加载完自动focus：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册一个全局自定义指令 `v-focus`</span></span><br><span class=\"line\">Vue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class=\"line\">  inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 聚焦元素</span></span><br><span class=\"line\">    el.focus()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">  &lt;input v-focus&gt;</span><br></pre></td></tr></table></figure>\n<p>几个钩子函数：</p>\n<ol>\n<li>bind 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li>\n<li>inserted 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li>\n<li>update 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新。</li>\n<li>componentUpdated 指令所在组件的 VNode 及其子 VNode 全部更新后调用。</li>\n<li>unbind 只调用一次，指令与元素解绑时调用。</li>\n</ol>\n<p>钩子函数的参数：</p>\n<ul>\n<li>el  指令所绑定的元素，可以用来直接操作 DOM</li>\n<li>binding<ul>\n<li>name 指令名，不包括 <code>v-</code> 前缀。</li>\n<li>value 指令的绑定值</li>\n<li>oldValue 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li>\n<li>expression 字符串形式的指令表达式。</li>\n<li>arg 传给指令的参数，可选。</li>\n<li>modifiers 一个包含修饰符的对象。</li>\n</ul>\n</li>\n<li>vnode Vue 编译生成的虚拟节点。</li>\n<li>oldVnode 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li>\n</ul>\n<p>比较重要的也就<code>el</code>和<code>binding</code>，用<code>binding</code>里的<code>value</code>可以给<code>el</code>用。</p>\n<blockquote>\n<p>除了 <code>el</code> 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 <code>dataset</code> 来进行。</p>\n</blockquote>\n<hr>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>2018/4/6：</p>\n<p>最近看了一些别人组件一些用法，感觉学的<code>vue</code>还是比较皮毛的，有空再写一篇<code>vue</code>的较为高级用法。先留一个坑<a href=\"https://github.com/limengke123/my-note/blob/master/%E5%89%8D%E7%AB%AF/vue%E8%BE%83%E5%B0%91%E5%85%B3%E6%B3%A8%E7%9A%84%E5%9C%B0%E6%96%B9.md\" target=\"_blank\" rel=\"noopener\">《细看vue组件》</a></p>\n<hr>\n<p>参考资料：</p>\n<ol>\n<li><p><a href=\"https://github.com/ElemeFE/element\" target=\"_blank\" rel=\"noopener\">element UI</a></p>\n</li>\n<li><p><a href=\"https://github.com/youzan/vant\" target=\"_blank\" rel=\"noopener\">vant</a></p>\n</li>\n<li><p><a href=\"https://nlush.com/blog/2017/10/14/VUE-%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/\" target=\"_blank\" rel=\"noopener\">vue组件思考</a></p>\n</li>\n</ol>\n<p>我的相关项目：</p>\n<ul>\n<li><p><a href=\"https://github.com/limengke123/fantastic-carnival\" target=\"_blank\" rel=\"noopener\">fantastic-carnival</a> 一个前后端都有的博客</p>\n</li>\n<li><p><a href=\"https://github.com/limengke123/md-editor\" target=\"_blank\" rel=\"noopener\">md-editor</a> markdown的编辑器</p>\n</li>\n</ul>\n<hr>\n<p><img src=\"/newBlog/2018/08/02/vue较少关注的地方/3526.jpg\" alt=\"Johannes Vermeer – Girl with a Pearl Earring\"></p>\n<blockquote>\n<p>Johannes Vermeer – Girl with a Pearl Earring 1665-67</p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/pic/1997264555.jpg","slug":"1997264555.jpg","post":"cjkbvb3ps0000ssz7fg5al510","modified":0,"renderable":0},{"_id":"source/_posts/小时候吃的/1997264555.jpg","slug":"1997264555.jpg","post":"cjkbvb3q70007ssz7fgtioyhn","modified":0,"renderable":0},{"_id":"source/_posts/pic/1132638050.jpg","slug":"1132638050.jpg","post":"cjkbvb3ps0000ssz7fg5al510","modified":0,"renderable":0},{"_id":"source/_posts/三月的烟雨/898024871.jpg","slug":"898024871.jpg","post":"cjkbvb3pz0002ssz7wr6lzi08","modified":0,"renderable":0},{"_id":"source/_posts/神奇的reduce/1917180847.jpg","slug":"1917180847.jpg","post":"cjkbvb3s8000issz7755i9f35","modified":0,"renderable":0},{"_id":"source/_posts/你好，世界/1959017488.jpg","slug":"1959017488.jpg","post":"cjkbvb3q80008ssz7vx2wd736","modified":0,"renderable":0},{"_id":"source/_posts/pic/898024871.jpg","slug":"898024871.jpg","post":"cjkbvb3ps0000ssz7fg5al510","modified":0,"renderable":0},{"_id":"source/_posts/四月的清风/1132638050.jpg","slug":"1132638050.jpg","post":"cjkbvb3q50006ssz7w3y3vst0","modified":0,"renderable":0},{"_id":"source/_posts/pic/1012308194.jpg","slug":"1012308194.jpg","post":"cjkbvb3ps0000ssz7fg5al510","modified":0,"renderable":0},{"_id":"source/_posts/pic/1762221382.jpg","slug":"1762221382.jpg","post":"cjkbvb3ps0000ssz7fg5al510","modified":0,"renderable":0},{"_id":"source/_posts/pic/1917180847.jpg","slug":"1917180847.jpg","post":"cjkbvb3ps0000ssz7fg5al510","modified":0,"renderable":0},{"_id":"source/_posts/pic/1959017488.jpg","slug":"1959017488.jpg","post":"cjkbvb3ps0000ssz7fg5al510","modified":0,"renderable":0},{"_id":"source/_posts/pic/2048547518.jpg","slug":"2048547518.jpg","post":"cjkbvb3ps0000ssz7fg5al510","modified":0,"renderable":0},{"_id":"source/_posts/pic/3526.jpg","slug":"3526.jpg","post":"cjkbvb3ps0000ssz7fg5al510","modified":0,"renderable":0},{"_id":"source/_posts/pic/431359834.jpg","slug":"431359834.jpg","post":"cjkbvb3ps0000ssz7fg5al510","modified":0,"renderable":0},{"_id":"source/_posts/牢骚/431359834.jpg","slug":"431359834.jpg","post":"cjkbvq2go00011gz7prjow22f","modified":0,"renderable":0},{"_id":"source/_posts/家乡/1762221382.jpg","slug":"1762221382.jpg","post":"cjkbvq2g500001gz7c297qhnz","modified":0,"renderable":0},{"_id":"source/_posts/绕不开的promise/1012308194.jpg","slug":"1012308194.jpg","post":"cjkbvq2hc00041gz7hjrw0oxf","modified":0,"renderable":0},{"_id":"source/_posts/vue较少关注的地方/3526.jpg","slug":"3526.jpg","post":"cjkbvq2he00051gz7n0hs5smy","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjkbvb3ps0000ssz7fg5al510","category_id":"cjkbvb3q30004ssz74lz4k1ce","_id":"cjkbvb3qd000bssz7pyd3fz9w"},{"post_id":"cjkbvb3q80008ssz7vx2wd736","category_id":"cjkbvb3q30004ssz74lz4k1ce","_id":"cjkbvb3qp000dssz7zrw3uxbg"},{"post_id":"cjkbvb3pz0002ssz7wr6lzi08","category_id":"cjkbvb3qa0009ssz7tvpmyzgm","_id":"cjkbvb3qq000fssz79qcegtdc"},{"post_id":"cjkbvb3q50006ssz7w3y3vst0","category_id":"cjkbvb3qa0009ssz7tvpmyzgm","_id":"cjkbvb3qr000gssz7kco9wypo"},{"post_id":"cjkbvb3q70007ssz7fgtioyhn","category_id":"cjkbvb3qa0009ssz7tvpmyzgm","_id":"cjkbvb3qz000hssz7amzwcpz3"},{"post_id":"cjkbvb3s8000issz7755i9f35","category_id":"cjkbvb3s9000jssz7noz7v2vs","_id":"cjkbvb3sh000mssz72c3arl7o"},{"post_id":"cjkbvq2g500001gz7c297qhnz","category_id":"cjkbvb3qa0009ssz7tvpmyzgm","_id":"cjkbvq2gw00021gz7q9j43ppr"},{"post_id":"cjkbvq2go00011gz7prjow22f","category_id":"cjkbvb3qa0009ssz7tvpmyzgm","_id":"cjkbvq2gx00031gz7nbj1je5z"},{"post_id":"cjkbvq2hc00041gz7hjrw0oxf","category_id":"cjkbvb3s9000jssz7noz7v2vs","_id":"cjkbvq2hp00071gz71b0jdv4x"},{"post_id":"cjkbvq2he00051gz7n0hs5smy","category_id":"cjkbvb3s9000jssz7noz7v2vs","_id":"cjkbvq2hq00081gz7wj2ej541"}],"PostTag":[{"post_id":"cjkbvb3ps0000ssz7fg5al510","tag_id":"cjkbvb3q40005ssz7hhbl2ipe","_id":"cjkbvb3qb000assz7593b6bgj"},{"post_id":"cjkbvb3s8000issz7755i9f35","tag_id":"cjkbvb3sa000kssz76iqqtq4y","_id":"cjkbvb3si000nssz7jrhjh57m"},{"post_id":"cjkbvb3s8000issz7755i9f35","tag_id":"cjkbvb3sd000lssz716fdm06q","_id":"cjkbvb3si000ossz757ahoubn"},{"post_id":"cjkbvq2hc00041gz7hjrw0oxf","tag_id":"cjkbvq2hm00061gz7l0kh99sc","_id":"cjkbvq2hr000a1gz7ijm3wywl"},{"post_id":"cjkbvq2he00051gz7n0hs5smy","tag_id":"cjkbvq2hq00091gz7kxo299op","_id":"cjkbvq2hs000b1gz7qspoawbc"}],"Tag":[{"name":"图库","_id":"cjkbvb3q40005ssz7hhbl2ipe"},{"name":"reduce","_id":"cjkbvb3sa000kssz76iqqtq4y"},{"name":"数组","_id":"cjkbvb3sd000lssz716fdm06q"},{"name":"promise","_id":"cjkbvq2hm00061gz7l0kh99sc"},{"name":"vue","_id":"cjkbvq2hq00091gz7kxo299op"}]}}