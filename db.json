{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"bf8ea4cd139b49f5a93dcd5ea3d12968dd6a4ad6","modified":1533178180413},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1533085264607},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1533085264608},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1533085264609},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1533085264611},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1533085264612},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1533085264613},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1533085264614},{"_id":"themes/next/LICENSE.md","hash":"f0190c7d83a98464549a6b3a51bb206148d88e1b","modified":1533085264615},{"_id":"themes/next/README.md","hash":"2d142fa1bdfab00abf8e99f972346e15572c9b12","modified":1533085264616},{"_id":"themes/next/_config.yml","hash":"8cc3f14babbeb5f17b2ff194430c02bca29bbab9","modified":1533114775553},{"_id":"themes/next/bower.json","hash":"72d7f5ef565cca1da30ba64fc04075b9ac99e319","modified":1533085264618},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1533085264619},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1533085264680},{"_id":"themes/next/package.json","hash":"735ace0b7fe3b1171c220c5424fcd4fe3aadd7f8","modified":1533085264820},{"_id":"source/_posts/pic.md","hash":"d69a7f84aa5ccb072e6248cb5d1002e77db3d764","modified":1533273124709},{"_id":"source/_posts/react-motion文档及学习.md","hash":"658fa09fdf1e1f8911858029b3f3a158feaa797c","modified":1533273168703},{"_id":"source/_posts/redux之compose.md","hash":"9cad31f411d0eb2e337882be621575909b5323fc","modified":1533273261805},{"_id":"source/_posts/redux之createStore.md","hash":"0042e5e85f9cf8b5bfeb40f2cc47c001e4472711","modified":1533273304085},{"_id":"source/_posts/vue、react隐式实例化.md","hash":"d7b8480aef3ed831dd7ca3443651ba5e1d33eeda","modified":1533260079011},{"_id":"source/_posts/vue与react组件对比学习.md","hash":"e917f741c99ba3abad25bb6a31789226567e27c7","modified":1533259854814},{"_id":"source/_posts/vue较少关注的地方.md","hash":"3536dbce903b3df22387c905ff146383491aa931","modified":1533173149185},{"_id":"source/_posts/一次面试记录.md","hash":"7283219d35c12851f34f7997b67ccbc5a6a36a3a","modified":1533260294180},{"_id":"source/_posts/三月的烟雨.md","hash":"2e495fdfa649b0b56cda3d722bc6530de50b23f2","modified":1533171863864},{"_id":"source/_posts/你好，世界.md","hash":"5067634223e2d19d21e9b371f0662c77baed2e25","modified":1533096163197},{"_id":"source/_posts/前端部署nginx配置.md","hash":"05c9f404d5d4d67ec7417ca2f54fe124fb8b18bc","modified":1533272715402},{"_id":"source/_posts/四月的清风.md","hash":"36cfb978a26a82da87f4e1055b6748468e6d97d9","modified":1533171863902},{"_id":"source/_posts/家乡.md","hash":"250bac94cfd94caf33dda695f7cb215f7a1dee4e","modified":1533172765474},{"_id":"source/_posts/小时候吃的.md","hash":"88e756abefb8227110648f9f5f2d569e9781f29c","modified":1533171863916},{"_id":"source/_posts/牢骚.md","hash":"0f5480d335004a460b3f718d40a660d4a19d4834","modified":1533172830157},{"_id":"source/_posts/看到的面试题.md","hash":"7690a547c37ed1dece40a41099fb40c9082f9418","modified":1533260183772},{"_id":"source/_posts/神奇的reduce.md","hash":"aef3cb8b3782f9d5ef3beebf9a522676357356b5","modified":1533097094938},{"_id":"source/_posts/绕不开的promise.md","hash":"9cb17799690c33bae042a32d806967e71282c011","modified":1533173006890},{"_id":"source/categories/index.md","hash":"e59c31249747c16ab710f2f8a0d7263d20d5092d","modified":1533092037843},{"_id":"source/tags/index.md","hash":"a7525bc7a300c2274c2e49464ad04d98b93ebe40","modified":1533092202840},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1533085264621},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1533085264623},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1533085264624},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1533085264625},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1533085264657},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"f2fd611a84dd6f9ed5395b63e187e29e9effbcd3","modified":1533085264659},{"_id":"themes/next/docs/LICENSE","hash":"5b702310012d480b40529fd10cf1872f687277a0","modified":1533085264660},{"_id":"themes/next/docs/MATH.md","hash":"34a46ca9a05b4570903beaadd4807e6759afb52e","modified":1533085264662},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1533085264663},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1533085264681},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1533085264684},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1533085264683},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1533085264685},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1533085264686},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1533085264687},{"_id":"themes/next/languages/ja.yml","hash":"7836f1de1f383d3a53770a03498cc39a37674f0c","modified":1533085264689},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1533085264690},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1533085264691},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1533085264692},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1533085264694},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1533085264693},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1533085264695},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1533085264696},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1533085264697},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1533085264698},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1533085264699},{"_id":"themes/next/layout/_layout.swig","hash":"2db9b03efc68be842b8f79fe2f0fd7fb09e8885a","modified":1533085264705},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1533085264813},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1533085264813},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1533085264814},{"_id":"themes/next/layout/page.swig","hash":"9ddf40303f82e3db76d59dc82b6d4eadfed203c6","modified":1533085264816},{"_id":"themes/next/layout/schedule.swig","hash":"d99b9eff0cff38caf095445f27c08aaf11a5b862","modified":1533085264818},{"_id":"themes/next/layout/post.swig","hash":"0554f42f90f4a524666c2b520be30b689c1d6a87","modified":1533085264817},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1533085264819},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1533085264823},{"_id":"themes/next/scripts/helpers.js","hash":"7849f9b9a86fc82d6e186e32a5e26e1f27c49b47","modified":1533085264821},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1533085264824},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1533085265123},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1533085265124},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1533085265125},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085265012},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1533085264664},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1533085264665},{"_id":"themes/next/docs/ru/README.md","hash":"bbe7ac3ef6352b7fedbba2ab800915e33251adf8","modified":1533085264667},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1533085264668},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1533085264670},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1533085264671},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"f2a2d6e68c5f65e27303b40f5285a8a4a5adae4c","modified":1533085264672},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1533085264674},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1533085264675},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"7214fcd1b5830e62b3ac0836ad2d1b0fa391ae12","modified":1533085264676},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"4d68054b062b3c8404b146a155d9624d2d25dd9b","modified":1533085264677},{"_id":"themes/next/docs/zh-CN/README.md","hash":"74547943ee6cba2e2bbbd67d306ee4de9db1a2bd","modified":1533085264678},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1533085264679},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1533085264702},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1533085264703},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1533085264704},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"9b0eb348c131813160a8647f612ceb1278f60619","modified":1533105618545},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1533085264710},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"8ff97c3f4eb888207bdc50066053c97d890e0202","modified":1533085264711},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"e8dfb86eb62b9c2bc1435d6d1afa95d3b4c7b931","modified":1533085264712},{"_id":"themes/next/layout/_macro/post.swig","hash":"3d9b8b40012f1fa144449a0184266669b1ca6bed","modified":1533105692796},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56733f92352b891b0bb1baca293f68f6c8928b0b","modified":1533085264715},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a9519b4f82aa516e516317d0447bf5c5c7ffb544","modified":1533085264716},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"7a9b687087793bf5e218cbc345214f927fa5601a","modified":1533085264718},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"4b48fdbfe3bf41ddeda4ff74c1ff17ab9f15c14e","modified":1533085264719},{"_id":"themes/next/layout/_partials/comments.swig","hash":"412d2a0e18a237e490e1b8bce5547558768b9da3","modified":1533085264721},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7cba33ea7dd3c8948f29794d64c495823c88ad54","modified":1533107025723},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"206cbd6ac9ca6a219a8516f59beae25b3c770199","modified":1533085264733},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1533085264735},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"27fb1d81151b9b79683e488579df19eee7e654d6","modified":1533085264747},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"f544e21883d249d5a341c684c97bd25831008f07","modified":1533085264748},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"f8c7e729ad6e72b4c705a2c5d5041589c2b4cc52","modified":1533085264749},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f134aeb8d5bee351e5277edb92ac694af314b75f","modified":1533085264757},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"ed62ea83d3f2c9db2ea57bf23a7d765ed82504c2","modified":1533085264774},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c62c37474c8de78cf34e54c6219b503ec28d9815","modified":1533085264783},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"53861f78a1fb52e96a43cf6909e1530dcf6cbff8","modified":1533085264784},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"736cb278fa09d3b4ed6f305b56353941ea918793","modified":1533085264786},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1533085264791},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"ccf0035086e14dcefa24c2907301edf4c37d5448","modified":1533085264792},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1533085264793},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1533085264794},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"a174d4a0c9188f9c4a2652f49bfa7a60ad0a83e3","modified":1533085264795},{"_id":"themes/next/scripts/tags/button.js","hash":"510f3711a9c9d3e2a844250647d90e8359e7d130","modified":1533085264826},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1533085264827},{"_id":"themes/next/scripts/tags/exturl.js","hash":"83e48148d2f4f8543f6833effa8a26eb0b60f2f0","modified":1533085264828},{"_id":"themes/next/scripts/tags/full-image.js","hash":"ef2c2985a3edb9f69740740c5bc42d4b692c86fd","modified":1533085264829},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"2b969ca830862b2bc119b69ede4bd971e27a6ff8","modified":1533085264831},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"c68b1e6d4a8236d6731e4175ef3ddc284255d63b","modified":1533085264832},{"_id":"themes/next/scripts/tags/label.js","hash":"bb502616bfabe85de5de903074ec6afe627f8413","modified":1533085264833},{"_id":"themes/next/scripts/tags/note.js","hash":"bd3310a5890bded1bda9ba3ad6f98ee44ecb101a","modified":1533085264834},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2d257e26718d4011509fd6f530d2ea37e50e3e66","modified":1533085264835},{"_id":"themes/next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1533085265010},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1533085265014},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1533085265016},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1533085265018},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1533085265020},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1533085265022},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1533085265023},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1533085265025},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1533085265027},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1533085265028},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1533085265029},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1533085265030},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1533085265031},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533085265032},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1533085265033},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533085265035},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1533085265036},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1533085265037},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1533085265038},{"_id":"source/_posts/pic/1012308194.jpg","hash":"ee7ad825d1a115e34bea83bd3caa4fa1a0bd8f60","modified":1533172167645},{"_id":"source/_posts/pic/1762221382.jpg","hash":"3136e6f69e1f78324ceb62e4fc04bf48151dc5b9","modified":1533172401858},{"_id":"source/_posts/pic/2900977792.jpg","hash":"ba9bc751c0366718b535c3a3f8b20c9bca7ddf99","modified":1533259581261},{"_id":"source/_posts/pic/3526.jpg","hash":"9750068ad04694a895842d9e0b0544ea161c567e","modified":1533172082227},{"_id":"source/_posts/pic/596444702.jpg","hash":"bd3b7a90be48231625fc1ff5ba657eb167fd9e36","modified":1533259296623},{"_id":"source/_posts/pic/877090454.jpg","hash":"9a5fd3e7d2c569734f8ab343330cab5c0b68c684","modified":1533259143046},{"_id":"source/_posts/pic/713080393.jpg","hash":"9f9e9deddf4fa2600d75d9e7fec3a36136a64d79","modified":1533259354248},{"_id":"source/_posts/vue、react隐式实例化/596444702.jpg","hash":"bd3b7a90be48231625fc1ff5ba657eb167fd9e36","modified":1533260069887},{"_id":"source/_posts/vue与react组件对比学习/877090454.jpg","hash":"9a5fd3e7d2c569734f8ab343330cab5c0b68c684","modified":1533259843037},{"_id":"source/_posts/vue较少关注的地方/3526.jpg","hash":"9750068ad04694a895842d9e0b0544ea161c567e","modified":1533173159050},{"_id":"source/_posts/家乡/1762221382.jpg","hash":"3136e6f69e1f78324ceb62e4fc04bf48151dc5b9","modified":1533172756286},{"_id":"source/_posts/看到的面试题/713080393.jpg","hash":"9f9e9deddf4fa2600d75d9e7fec3a36136a64d79","modified":1533260192549},{"_id":"source/_posts/绕不开的promise/1012308194.jpg","hash":"ee7ad825d1a115e34bea83bd3caa4fa1a0bd8f60","modified":1533173018537},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085264754},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085264755},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085264960},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085264961},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085264967},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085265006},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085265009},{"_id":"source/_posts/pic/1132638050.jpg","hash":"45820436c83d7b9ddb9b548a789c1831eb0a4c39","modified":1533097849847},{"_id":"source/_posts/pic/1917180847.jpg","hash":"1350a163c67409b6ab87784de31d73a16c4fe613","modified":1533096738930},{"_id":"source/_posts/pic/4282315052.jpg","hash":"428c859d3c9112d596f1677b4acce7d6031f4105","modified":1533272604404},{"_id":"source/_posts/pic/431359834.jpg","hash":"1b8d94929830b34144aa0628dc9ec41e7bcdc40f","modified":1533172306782},{"_id":"source/_posts/pic/456066894.jpg","hash":"0112f06e8784cc8a2a2d1f1a2e3259451a4c057d","modified":1533259492203},{"_id":"source/_posts/一次面试记录/456066894.jpg","hash":"0112f06e8784cc8a2a2d1f1a2e3259451a4c057d","modified":1533260305396},{"_id":"source/_posts/前端部署nginx配置/4282315052.jpg","hash":"428c859d3c9112d596f1677b4acce7d6031f4105","modified":1533272616794},{"_id":"source/_posts/四月的清风/1132638050.jpg","hash":"45820436c83d7b9ddb9b548a789c1831eb0a4c39","modified":1533171863916},{"_id":"source/_posts/牢骚/431359834.jpg","hash":"1b8d94929830b34144aa0628dc9ec41e7bcdc40f","modified":1533172836095},{"_id":"source/_posts/神奇的reduce/1917180847.jpg","hash":"1350a163c67409b6ab87784de31d73a16c4fe613","modified":1533097059746},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1533085264708},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"aab518204d3125e948796a9ba6b56b09cade2d92","modified":1533085264709},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1533085264724},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"0b8349710caf9691741a457aa746add35245048e","modified":1533085264726},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"09109a5c5a301e7cc5e3c7aec32b0164739fc7d4","modified":1533085264727},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"19050627bc23b0b2c2e65e7248c0f88468eb8ea5","modified":1533085264728},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1533085264729},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"f3ae3168801304af3d80ec3b84264e1d4201cb89","modified":1533085264731},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"3f11ae8e9084f39628cd2006931d39a2069b9dd6","modified":1533085264732},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1533085264737},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1533085264738},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1533085264739},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1533085264740},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1533085264742},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1533085264743},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1533085264744},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"580e9d9c4d8783ee6200d845ae16c98979bf1ea3","modified":1533085264752},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1533085264753},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1533085264756},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1533085264759},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1533085264761},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1533085264762},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"c43f41b7f3c0743d1e673af2e787ea34a67fc9cb","modified":1533085264763},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1533085264764},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1533085264765},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"d67d9a176a276cdab6f2bcb7eb3650fbca5459c4","modified":1533085264767},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1533085264768},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1533085264769},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"809f6d31c24ee0012e12631f5893a79f69e7bc84","modified":1533085264770},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1533085264771},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1533085264772},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1533085264773},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1533085264776},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"4a2d2269f23e90c1311bd867d22def0b4a092bf1","modified":1533085264777},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"292cdd1059b76d3d10486b71c99d9afb3e59ea44","modified":1533085264779},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"34cc66d4dbada2d561ba6f70fd9a75207c5adbd4","modified":1533085264780},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"694483f2d853c65b87a6a70e38dbc40e40eb1332","modified":1533085264781},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"d05e70a416963023ee1978e4168d58bcfd956ed3","modified":1533085264782},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"30e9e55d9af2ced6e6b156a042026a8b480f0ab0","modified":1533085264787},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1533085264789},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"c0c2fd87e71f0beb542aa50c0bc875da5aa5c44b","modified":1533085264790},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1533085264800},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"71c897f9b107dd0de1b7f649633cf583c206a9db","modified":1533085264801},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1533085264810},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1533085264812},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"9769e33d5119aac82b944c6709e4c190fcc1c818","modified":1533105862740},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1533085264959},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1533085264962},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0882d76333ab409e8d3362c284b91a0f0ae761ae","modified":1533085264965},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"8d6cf29f63c90364f4d3c336f7c9bb794b4c46cc","modified":1533085265004},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1533085265005},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"72927abd51d3a607a6ba32cf882390792b34e834","modified":1533085265007},{"_id":"themes/next/source/css/_variables/base.styl","hash":"1625e3e1da6c453108526e027dae25e311b18adf","modified":1533085265008},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1533085265041},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1533085265042},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1533085265045},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1533085265046},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1533085265085},{"_id":"themes/next/source/js/src/motion.js","hash":"6b5a2646b775609630b9ff6221fa58b6823a25fa","modified":1533085265087},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1533085265088},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1533085265091},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1533085265092},{"_id":"themes/next/source/js/src/utils.js","hash":"9cddff04f9ff64b1e3202e1726eff512a2ef8497","modified":1533085265093},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1533085265101},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1533085265103},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1533085265120},{"_id":"source/_posts/pic/1959017488.jpg","hash":"1b7b23482597376f03768d36698cacb7a22ac414","modified":1533096726160},{"_id":"source/_posts/pic/2048547518.jpg","hash":"fb36ccd58e555f294a7dc296b06f312b77af7eda","modified":1533096736560},{"_id":"source/_posts/pic/1997264555.jpg","hash":"84c3d5ba4ca31370133474375b8346782c532863","modified":1533097849797},{"_id":"source/_posts/pic/565924812.jpg","hash":"69f486382d9620ca60e429008d911420cdea0b43","modified":1533273111709},{"_id":"source/_posts/pic/944233120.jpg","hash":"3b3655c7c48b2278a3200ed5423ed2520d182131","modified":1533272856178},{"_id":"source/_posts/react-motion文档及学习/944233120.jpg","hash":"3b3655c7c48b2278a3200ed5423ed2520d182131","modified":1533273217551},{"_id":"source/_posts/redux之createStore/565924812.jpg","hash":"69f486382d9620ca60e429008d911420cdea0b43","modified":1533273321050},{"_id":"source/_posts/你好，世界/1959017488.jpg","hash":"1b7b23482597376f03768d36698cacb7a22ac414","modified":1533095916996},{"_id":"source/_posts/小时候吃的/1997264555.jpg","hash":"84c3d5ba4ca31370133474375b8346782c532863","modified":1533171863966},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1533085265096},{"_id":"source/_posts/pic/196334101.jpg","hash":"596677bbdd8c72e5c6c148f04cd9866e9023730d","modified":1533273085868},{"_id":"source/_posts/pic/898024871.jpg","hash":"6d5c2f0c51d14361f2a7e776c7bd466c7373ad33","modified":1533097849823},{"_id":"source/_posts/redux之compose/196334101.jpg","hash":"596677bbdd8c72e5c6c148f04cd9866e9023730d","modified":1533273277461},{"_id":"source/_posts/三月的烟雨/898024871.jpg","hash":"6d5c2f0c51d14361f2a7e776c7bd466c7373ad33","modified":1533171863901},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6e076b5e183eedf425a445e99851f938789c3194","modified":1533085264797},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1533085264799},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1533085264838},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1533085264840},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1533085264861},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1533085264863},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1533085264865},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1533085264890},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1533085264922},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"fbb6be577529c750ef7c872fe7abdc7ab0faf0f8","modified":1533085264946},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"97bb39756e85f5b27bba7f43270105ad01d736c9","modified":1533085264947},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1533085264951},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1533085264953},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1533085264954},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1533085264955},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"52bc8ba71b91d954530b35dfc63b402a02b1321d","modified":1533085264956},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7e4e499964c2112d47e6f9d2b6e87c31ec8269e2","modified":1533085264970},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1533085264972},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1533085264974},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1533085264975},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f3aa863adf972569b72f2df6bc6a914e7daace99","modified":1533085264977},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa6c00fdaf8f0ca3b690a5a556671745fb67e2c9","modified":1533085264978},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1533085264979},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2ccb9bdc309b7c1ef183a3dbb0a4621bec54a328","modified":1533085264980},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1533085264986},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1533085264988},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"3cc7646583218d16925ced7b70865e63a901d4a7","modified":1533085264989},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1533085264991},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1533085264992},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1533085264995},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ccf5a4761cb0ce451b5e994cfabf8769248a45c1","modified":1533085264996},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"cc961108b12ab97d9216606ceb1cd1cd31ab20f0","modified":1533085264997},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1533085264999},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"df16dc995eb9ad498df2edcfc3e20528fc9aa133","modified":1533085265000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"be72740313a9a0477b8a22f62e4c8ffa6d23a2e5","modified":1533085265001},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1533085265002},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"6ed3f2389457daa382de96a08633d9faaaaf53fb","modified":1533085265090},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1533085265099},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"3f3d2a43d1a326bad25b633c8ec9ddd87867224c","modified":1533085264870},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7dd247c8869fdefb5a007045d00f3ef8ceecf300","modified":1533085264867},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1533085264872},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1533085264873},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1533085264875},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1533085264876},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1533085264877},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1533085264879},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"835c1340571bd6c4ec263c482cf13283fb047e49","modified":1533085264880},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1533085264882},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"630be616447a982413030e561bbd3a80ac14b120","modified":1533085264885},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1533085264886},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1533085264887},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1533085264883},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1533085264888},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1533085264889},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1533085264892},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1533085264894},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1533085264893},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1533085264895},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"317c9ceda655e9dc373ce8e7b71d20b794fce9a4","modified":1533085264897},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1533085264898},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1533085264899},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1533085264900},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1533085264901},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1533085264903},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1533085264902},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1533085264904},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"adfd6d2d3b34adc4b476a0ea91e19020456a3b1a","modified":1533085264906},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1533085264906},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5c3141d58970a0614896b6a62fd7a8a8caf4e401","modified":1533085264907},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bb8162bb7c7b0b255a0e8e234eb382a0879a4962","modified":1533085264908},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1533085264910},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"debe322cc9e2688ecf38d0b6afcd6b71ad02fbd0","modified":1533085264912},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1533085264913},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1533085264915},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1533085264914},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1533085264916},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9e05a2232faabb41bcebb51d545d897a76f077da","modified":1533085264917},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1533085264918},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"94d76e6da600a36d80e2470326ebb6b3be447ccb","modified":1533085264919},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1533085264920},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"02ee0eb49c256ecb4e71bbc65072f9147418d7d7","modified":1533085264924},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1533085264923},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1533085264925},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1533085264927},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1533085264928},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1533085264929},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1533085264930},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1533085264933},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1533085264932},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f4d8144c22544bdb89787c14ab9d39578dae4b7c","modified":1533085264935},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1533085264936},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1533085264938},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1533085264939},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1533085264940},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1533085264941},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"acfdd76b1c90d2e384affb3d0006a39b524609d2","modified":1533085264943},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"c31fbaec7e6373ecfb8588500b972d451695a6ad","modified":1533085264944},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1533085264982},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1533085264984},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1533085264993}],"Category":[{"name":"杂记","_id":"cjkdjcw8m0004ygz74341ownw"},{"name":"前端","_id":"cjkdjcw900009ygz7kaw9udun"},{"name":"生活","_id":"cjkdjcw9x000wygz7qpwdw9jw"}],"Data":[],"Page":[{"title":"分类","date":"2018-08-01T02:53:57.843Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 日期\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-08-01T02:53:57.843Z","path":"categories/index.html","layout":"page","_id":"cjkdjcw8g0001ygz7n7c1r1if","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-08-01T02:56:42.840Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 日期\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-08-01T02:56:42.840Z","path":"tags/index.html","layout":"page","_id":"cjkdjcw8j0003ygz74z2uxr1y"}],"Post":[{"title":"pic","date":"2018-08-01T04:10:42.000Z","_content":"\n# 收集一些图片作为文章的插图。\n\n[图片站点](https://en.gallerix.ru/album/Vincent-Van-Gogh)\n\n<!-- more -->\n\n## 2018/8/3\n\n![Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked](pic/877090454.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked 1847\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Wave](pic/596444702.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Wave 1889\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Ninth Wave](pic/713080393.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Ninth Wave 1850\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Shipwreck](pic/456066894.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Shipwreck 1864\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Evening In Cairo](pic/2900977792.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Evening In Cairo 1870\n\n---\n\n![Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon](pic/4282315052.jpg)\n\n> Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon 1503-05\n\n---\n\n![Edvard Munch – The Scream](pic/944233120.jpg)\n\n> Edvard Munch – The Scream. ver. 1893\n\n---\n\n![Edvard Munch – img742](pic/196334101.jpg)\n\n> Edvard Munch – img742\n\n---\n\n![Edvard Munch – Calvary](pic/565924812.jpg)\n\n> Edvard Munch – Calvary 1900\n\n---\n\n## 2018/8/2\n\n![Johannes Vermeer – Girl with a Pearl Earring](pic/3526.jpg)\n\n> Johannes Vermeer – Girl with a Pearl Earring 1665-67\n\n---\n\n![Johannes Vermeer – The Milkmaid](pic/1012308194.jpg)\n\n> Johannes Vermeer – The Milkmaid 1658-61\n\n---\n\n![Johannes Vermeer – Officer and Laughing Girl](pic/431359834.jpg)\n\n> Johannes Vermeer – Officer and Laughing Girl 1655-60\n\n---\n\n![Johannes Vermeer – View of Delft](pic/1762221382.jpg)\n\n> Johannes Vermeer – View of Delft 1660-61\n\n---\n\n## 2018/8/1\n\n![Vincent van Gogh – Cafe Terrace in Arles at Night](pic/1959017488.jpg)\n\n> Vincent van Gogh – Cafe Terrace in Arles at Night 1888\n\n---\n\n![Vincent van Gogh – The Parsonage at Nuenen](pic/1917180847.jpg)\n\n> Vincent van Gogh – The Parsonage at Nuenen 1885\n\n---\n\n![Vincent van Gogh – Canal with Women Washing](pic/2048547518.jpg)\n\n> Vincent van Gogh – Canal with Women Washing 1888\n\n---\n\n![Vincent van Gogh – Sunny Lawn in a Public Park](pic/898024871.jpg)\n\n> Vincent van Gogh – Sunny Lawn in a Public Park 1888\n\n---\n\n![Vincent van Gogh – Old Man in Sorrow](pic/1132638050.jpg)\n\n> Vincent van Gogh – Old Man in Sorrow 1890\n\n---\n\n![Vincent van Gogh – Noon Rest from (after Millet)](pic/1997264555.jpg)\n\n> Vincent van Gogh – Noon Rest from (after Millet) 1890\n\n---\n","source":"_posts/pic.md","raw":"---\ntitle: pic\ndate: 2018-08-01 12:10:42\ntags: 图库\ncategories: 杂记\n---\n\n# 收集一些图片作为文章的插图。\n\n[图片站点](https://en.gallerix.ru/album/Vincent-Van-Gogh)\n\n<!-- more -->\n\n## 2018/8/3\n\n![Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked](pic/877090454.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked 1847\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Wave](pic/596444702.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Wave 1889\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Ninth Wave](pic/713080393.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Ninth Wave 1850\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Shipwreck](pic/456066894.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Shipwreck 1864\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Evening In Cairo](pic/2900977792.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Evening In Cairo 1870\n\n---\n\n![Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon](pic/4282315052.jpg)\n\n> Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon 1503-05\n\n---\n\n![Edvard Munch – The Scream](pic/944233120.jpg)\n\n> Edvard Munch – The Scream. ver. 1893\n\n---\n\n![Edvard Munch – img742](pic/196334101.jpg)\n\n> Edvard Munch – img742\n\n---\n\n![Edvard Munch – Calvary](pic/565924812.jpg)\n\n> Edvard Munch – Calvary 1900\n\n---\n\n## 2018/8/2\n\n![Johannes Vermeer – Girl with a Pearl Earring](pic/3526.jpg)\n\n> Johannes Vermeer – Girl with a Pearl Earring 1665-67\n\n---\n\n![Johannes Vermeer – The Milkmaid](pic/1012308194.jpg)\n\n> Johannes Vermeer – The Milkmaid 1658-61\n\n---\n\n![Johannes Vermeer – Officer and Laughing Girl](pic/431359834.jpg)\n\n> Johannes Vermeer – Officer and Laughing Girl 1655-60\n\n---\n\n![Johannes Vermeer – View of Delft](pic/1762221382.jpg)\n\n> Johannes Vermeer – View of Delft 1660-61\n\n---\n\n## 2018/8/1\n\n![Vincent van Gogh – Cafe Terrace in Arles at Night](pic/1959017488.jpg)\n\n> Vincent van Gogh – Cafe Terrace in Arles at Night 1888\n\n---\n\n![Vincent van Gogh – The Parsonage at Nuenen](pic/1917180847.jpg)\n\n> Vincent van Gogh – The Parsonage at Nuenen 1885\n\n---\n\n![Vincent van Gogh – Canal with Women Washing](pic/2048547518.jpg)\n\n> Vincent van Gogh – Canal with Women Washing 1888\n\n---\n\n![Vincent van Gogh – Sunny Lawn in a Public Park](pic/898024871.jpg)\n\n> Vincent van Gogh – Sunny Lawn in a Public Park 1888\n\n---\n\n![Vincent van Gogh – Old Man in Sorrow](pic/1132638050.jpg)\n\n> Vincent van Gogh – Old Man in Sorrow 1890\n\n---\n\n![Vincent van Gogh – Noon Rest from (after Millet)](pic/1997264555.jpg)\n\n> Vincent van Gogh – Noon Rest from (after Millet) 1890\n\n---\n","slug":"pic","published":1,"updated":"2018-08-03T05:12:04.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcw8a0000ygz7pnahndad","content":"<h1 id=\"收集一些图片作为文章的插图。\"><a href=\"#收集一些图片作为文章的插图。\" class=\"headerlink\" title=\"收集一些图片作为文章的插图。\"></a>收集一些图片作为文章的插图。</h1><p><a href=\"https://en.gallerix.ru/album/Vincent-Van-Gogh\" target=\"_blank\" rel=\"noopener\">图片站点</a></p>\n<a id=\"more\"></a>\n<h2 id=\"2018-8-3\"><a href=\"#2018-8-3\" class=\"headerlink\" title=\"2018/8/3\"></a>2018/8/3</h2><p><img src=\"/2018/08/01/pic/877090454.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked 1847</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/596444702.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Wave\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Wave 1889</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/713080393.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Ninth Wave\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Ninth Wave 1850</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/456066894.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Shipwreck\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Shipwreck 1864</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/2900977792.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Evening In Cairo\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Evening In Cairo 1870</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/4282315052.jpg\" alt=\"Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon\"></p>\n<blockquote>\n<p>Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon 1503-05</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/944233120.jpg\" alt=\"Edvard Munch – The Scream\"></p>\n<blockquote>\n<p>Edvard Munch – The Scream. ver. 1893</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/196334101.jpg\" alt=\"Edvard Munch – img742\"></p>\n<blockquote>\n<p>Edvard Munch – img742</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/565924812.jpg\" alt=\"Edvard Munch – Calvary\"></p>\n<blockquote>\n<p>Edvard Munch – Calvary 1900</p>\n</blockquote>\n<hr>\n<h2 id=\"2018-8-2\"><a href=\"#2018-8-2\" class=\"headerlink\" title=\"2018/8/2\"></a>2018/8/2</h2><p><img src=\"/2018/08/01/pic/3526.jpg\" alt=\"Johannes Vermeer – Girl with a Pearl Earring\"></p>\n<blockquote>\n<p>Johannes Vermeer – Girl with a Pearl Earring 1665-67</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1012308194.jpg\" alt=\"Johannes Vermeer – The Milkmaid\"></p>\n<blockquote>\n<p>Johannes Vermeer – The Milkmaid 1658-61</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/431359834.jpg\" alt=\"Johannes Vermeer – Officer and Laughing Girl\"></p>\n<blockquote>\n<p>Johannes Vermeer – Officer and Laughing Girl 1655-60</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1762221382.jpg\" alt=\"Johannes Vermeer – View of Delft\"></p>\n<blockquote>\n<p>Johannes Vermeer – View of Delft 1660-61</p>\n</blockquote>\n<hr>\n<h2 id=\"2018-8-1\"><a href=\"#2018-8-1\" class=\"headerlink\" title=\"2018/8/1\"></a>2018/8/1</h2><p><img src=\"/2018/08/01/pic/1959017488.jpg\" alt=\"Vincent van Gogh – Cafe Terrace in Arles at Night\"></p>\n<blockquote>\n<p>Vincent van Gogh – Cafe Terrace in Arles at Night 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1917180847.jpg\" alt=\"Vincent van Gogh – The Parsonage at Nuenen\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Parsonage at Nuenen 1885</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/2048547518.jpg\" alt=\"Vincent van Gogh – Canal with Women Washing\"></p>\n<blockquote>\n<p>Vincent van Gogh – Canal with Women Washing 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/898024871.jpg\" alt=\"Vincent van Gogh – Sunny Lawn in a Public Park\"></p>\n<blockquote>\n<p>Vincent van Gogh – Sunny Lawn in a Public Park 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1132638050.jpg\" alt=\"Vincent van Gogh – Old Man in Sorrow\"></p>\n<blockquote>\n<p>Vincent van Gogh – Old Man in Sorrow 1890</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1997264555.jpg\" alt=\"Vincent van Gogh – Noon Rest from (after Millet)\"></p>\n<blockquote>\n<p>Vincent van Gogh – Noon Rest from (after Millet) 1890</p>\n</blockquote>\n<hr>\n","site":{"data":{}},"excerpt":"<h1 id=\"收集一些图片作为文章的插图。\"><a href=\"#收集一些图片作为文章的插图。\" class=\"headerlink\" title=\"收集一些图片作为文章的插图。\"></a>收集一些图片作为文章的插图。</h1><p><a href=\"https://en.gallerix.ru/album/Vincent-Van-Gogh\" target=\"_blank\" rel=\"noopener\">图片站点</a></p>","more":"<h2 id=\"2018-8-3\"><a href=\"#2018-8-3\" class=\"headerlink\" title=\"2018/8/3\"></a>2018/8/3</h2><p><img src=\"/2018/08/01/pic/877090454.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked 1847</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/596444702.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Wave\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Wave 1889</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/713080393.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Ninth Wave\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Ninth Wave 1850</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/456066894.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Shipwreck\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Shipwreck 1864</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/2900977792.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Evening In Cairo\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Evening In Cairo 1870</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/4282315052.jpg\" alt=\"Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon\"></p>\n<blockquote>\n<p>Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon 1503-05</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/944233120.jpg\" alt=\"Edvard Munch – The Scream\"></p>\n<blockquote>\n<p>Edvard Munch – The Scream. ver. 1893</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/196334101.jpg\" alt=\"Edvard Munch – img742\"></p>\n<blockquote>\n<p>Edvard Munch – img742</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/565924812.jpg\" alt=\"Edvard Munch – Calvary\"></p>\n<blockquote>\n<p>Edvard Munch – Calvary 1900</p>\n</blockquote>\n<hr>\n<h2 id=\"2018-8-2\"><a href=\"#2018-8-2\" class=\"headerlink\" title=\"2018/8/2\"></a>2018/8/2</h2><p><img src=\"/2018/08/01/pic/3526.jpg\" alt=\"Johannes Vermeer – Girl with a Pearl Earring\"></p>\n<blockquote>\n<p>Johannes Vermeer – Girl with a Pearl Earring 1665-67</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1012308194.jpg\" alt=\"Johannes Vermeer – The Milkmaid\"></p>\n<blockquote>\n<p>Johannes Vermeer – The Milkmaid 1658-61</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/431359834.jpg\" alt=\"Johannes Vermeer – Officer and Laughing Girl\"></p>\n<blockquote>\n<p>Johannes Vermeer – Officer and Laughing Girl 1655-60</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1762221382.jpg\" alt=\"Johannes Vermeer – View of Delft\"></p>\n<blockquote>\n<p>Johannes Vermeer – View of Delft 1660-61</p>\n</blockquote>\n<hr>\n<h2 id=\"2018-8-1\"><a href=\"#2018-8-1\" class=\"headerlink\" title=\"2018/8/1\"></a>2018/8/1</h2><p><img src=\"/2018/08/01/pic/1959017488.jpg\" alt=\"Vincent van Gogh – Cafe Terrace in Arles at Night\"></p>\n<blockquote>\n<p>Vincent van Gogh – Cafe Terrace in Arles at Night 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1917180847.jpg\" alt=\"Vincent van Gogh – The Parsonage at Nuenen\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Parsonage at Nuenen 1885</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/2048547518.jpg\" alt=\"Vincent van Gogh – Canal with Women Washing\"></p>\n<blockquote>\n<p>Vincent van Gogh – Canal with Women Washing 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/898024871.jpg\" alt=\"Vincent van Gogh – Sunny Lawn in a Public Park\"></p>\n<blockquote>\n<p>Vincent van Gogh – Sunny Lawn in a Public Park 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1132638050.jpg\" alt=\"Vincent van Gogh – Old Man in Sorrow\"></p>\n<blockquote>\n<p>Vincent van Gogh – Old Man in Sorrow 1890</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1997264555.jpg\" alt=\"Vincent van Gogh – Noon Rest from (after Millet)\"></p>\n<blockquote>\n<p>Vincent van Gogh – Noon Rest from (after Millet) 1890</p>\n</blockquote>\n<hr>"},{"title":"react-motion文档及学习","date":"2018-08-03T04:55:22.000Z","_content":"\n# react-motion文档及学习\n\n之前没怎么重视过动画，所以做出来的东西体验不是特别好，所以回过来学一些动画库，然后发现 `react-motion` 这个库的例子真棒，就学一下这个库的 `API` ，在 `github` 上也只有[英文版文档](https://github.com/chenglou/react-motion)，好在文档内容不算长，所以准备大致翻译一下。\n\n## 这个库解决了什么问题？\n\n在95%的动画组件的应用场景下，我们不必采用硬编码的缓动曲线和持续时间。给你的 `UI` 组件设置一个刚度值和阻尼值，然后让物理魔法来处理剩下的事情。这样就不必担心出现动画中断之类的小问题。这也大大地简化了 `API`。\n\n这个库同时还为 `React` 的 `TransitionGroup` 提供了一个更强大的替代 `API` 。\n\n## API\n\nExports:\n\n* spring\n* Motion\n* StaggeredMotion\n* TransitionMotion\n* presets\n\n## 辅助函数\n\n> -spring: (val: number, config?: SpringHelperConfig) => OpaqueConfig\n\n与相关的组件一起用，明确如何动画到目标值，比如 `spring(10, {stiffness: 120, damping: 17})`意味着以 **120** 的 *刚度* 和 **17** 的 *阻尼*运动到*目标值* 10。\n\n* `val` ：目标值\n* `config` : 可选，作进一步调整。可能的属性值：\n  * `stiffness` : 刚度，可选，默认 `170`\n  * `damping` : 阻尼，可选， 默认 `26`\n  * `precision` : 可选，默认 `0.01`， 指定内插值的舍入和速度，内部值，一般外部不用去改变改值。\n\n> Presets for {stiffness, damping}\n\n大部分是像 `spring(10, presets.wobbly)` 、 `spring(20, {...presets.gentle})` 这样子使用 spring 的预设配置。\n\n## `<Motion/>`\n\n一般的动画组件\n\n### `<Motion/>` 用法\n\n```jsx\n/**\n * interpolation -> 插值\n * Motion组件的写法比较特殊，传了一个函数当作 Motion 的 chlidren属性\n*/\n<Motion defaultStyle={{x: 0}} style={{x: spring(10)}}>\n    {interpolatingStyle => <div style={interpolatingStyle} />}\n</Motion>\n```\n\n### `<Motion/>` 属性(props)\n\n-style: Style\n\n必须。 `Style` 是一个对象类型映射到上面的 `spring` 返回的数字或者是 `OpaqueConfig` 对象。在组件整个存活期间必须保持相同的值。值的意义：\n\n* `spring` 返回的 `OpaqueConfig` : 插值到 `x`\n* `spring` 返回的数字 `x`: 跳到 `x`， 不插入\n\n-defaultStyle?: PlainStyle\n\n可选。`PlainStyle` 类型映射到数字，和上面的 `style` 相同键的对象，值是初始化要插入的数据。注意，在后续的渲染过程中这个属性会被忽略。从当前值插入的目标值是由 `style` 决定。\n\n-children: (interpolatedStyle: PlainStyle) => ReactElement\n\n必须，且是函数。\n\n* `interpolatedStyle`: 返回给你被插入值的 `style` 对象。举个例子： 如果你写了 `style={{x: spring(10), y: spring(20)}}`, 然后就会在函数里接收到 `interpolatedStyle` 对象，在某一时间，可能拿到这样的数据 `{x:5.2, y: 12.1}`,就可以把这些数据用到你的 `div` 上或者其他地方。\n* `Return` 一定要返回一个 `React element`，这样 `Motion` 才能渲染你的组件。\n\n-onRest?: () => void\n\n可选。动画休息的时候触发的回调函数。\n\n## `<StaggeredMotion/>`\n\n交错的动画组件。\n\n创建一个彼此之间依赖的集合（固定长度）的动画，达到*自然*、*弹性*、*惊人*的效果。这比对一系列运动硬编码延迟的方式（不太自然的动画效果）更加有效。\n\n### `<StaggeredMotion/>` 用法\n\n```jsx\n<StaggeredMotion\n  defaultStyles={[{h: 0}, {h: 0}, {h: 0}]}\n  styles={prevInterpolatedStyles => prevInterpolatedStyles.map((_, i) => {\n    return i === 0\n      ? {h: spring(100)}\n      : {h: spring(prevInterpolatedStyles[i - 1].h)}\n  })}>\n  {interpolatingStyles =>\n    <div>\n      {interpolatingStyles.map((style, i) =>\n        <div key={i} style={{border: '1px solid', height: style.h}} />)\n      }\n    </div>\n  }\n</StaggeredMotion>\n```\n\n### `<StaggeredMotion/>` 属性(props)\n\n-styles:(previousInterpolatedStyles: ?Array<PlainStyle>) => Array<style>\n\n必须,函数。**不要忘记`\"s\"`**\n\n* `previousInterpolatedStyles` 前一个插入值的 `styles` ,(第一次渲染的时候是 `undefined` ,除非提供了 `defaultStyles`)\n\n* Return 一定要返回包含*目的值*的 `styles` 数组,举个例子:[{x: spring(10), x: spring(20)}]\n\n-defaultStyles?: Array<PlainStyle>\n\n可选。和 `Motion` 的 `defaultStyle` 类似，但是是一个数组。\n\n-children: (interpolatedStyles: Array<PlainStyle>) => ReactElement\n\n必须，函数。和 `Motion` 的 `children` 类似, 但是接受一个插入值的数组作为函数的参数。举个例子：`[{x: 5}, {x: 6.4}, {x: 8.1}]`。\n\n(没有 `noRest`, 我们没有发现有什么意义在 `StaggeredMotion` 中加入 `noReset`)\n\n## `<TransitionMotion>`\n\n帮助你创建 `mounting` 和 `unmounting` 时的动画。\n\n### `<TransitionMotion>` 用法\n\n有 `a`、`b`、`c` 三个项目，有各自的 `style` 配置，\n\n---\n\n![Edvard Munch – The Scream](react-motion文档及学习/944233120.jpg)\n\n> Edvard Munch – The Scream. ver. 1893","source":"_posts/react-motion文档及学习.md","raw":"---\ntitle: react-motion文档及学习\ndate: 2018-08-03 12:55:22\ntags:\n  - 翻译\n  - react-motion\n  - react\ncategories: 前端\n---\n\n# react-motion文档及学习\n\n之前没怎么重视过动画，所以做出来的东西体验不是特别好，所以回过来学一些动画库，然后发现 `react-motion` 这个库的例子真棒，就学一下这个库的 `API` ，在 `github` 上也只有[英文版文档](https://github.com/chenglou/react-motion)，好在文档内容不算长，所以准备大致翻译一下。\n\n## 这个库解决了什么问题？\n\n在95%的动画组件的应用场景下，我们不必采用硬编码的缓动曲线和持续时间。给你的 `UI` 组件设置一个刚度值和阻尼值，然后让物理魔法来处理剩下的事情。这样就不必担心出现动画中断之类的小问题。这也大大地简化了 `API`。\n\n这个库同时还为 `React` 的 `TransitionGroup` 提供了一个更强大的替代 `API` 。\n\n## API\n\nExports:\n\n* spring\n* Motion\n* StaggeredMotion\n* TransitionMotion\n* presets\n\n## 辅助函数\n\n> -spring: (val: number, config?: SpringHelperConfig) => OpaqueConfig\n\n与相关的组件一起用，明确如何动画到目标值，比如 `spring(10, {stiffness: 120, damping: 17})`意味着以 **120** 的 *刚度* 和 **17** 的 *阻尼*运动到*目标值* 10。\n\n* `val` ：目标值\n* `config` : 可选，作进一步调整。可能的属性值：\n  * `stiffness` : 刚度，可选，默认 `170`\n  * `damping` : 阻尼，可选， 默认 `26`\n  * `precision` : 可选，默认 `0.01`， 指定内插值的舍入和速度，内部值，一般外部不用去改变改值。\n\n> Presets for {stiffness, damping}\n\n大部分是像 `spring(10, presets.wobbly)` 、 `spring(20, {...presets.gentle})` 这样子使用 spring 的预设配置。\n\n## `<Motion/>`\n\n一般的动画组件\n\n### `<Motion/>` 用法\n\n```jsx\n/**\n * interpolation -> 插值\n * Motion组件的写法比较特殊，传了一个函数当作 Motion 的 chlidren属性\n*/\n<Motion defaultStyle={{x: 0}} style={{x: spring(10)}}>\n    {interpolatingStyle => <div style={interpolatingStyle} />}\n</Motion>\n```\n\n### `<Motion/>` 属性(props)\n\n-style: Style\n\n必须。 `Style` 是一个对象类型映射到上面的 `spring` 返回的数字或者是 `OpaqueConfig` 对象。在组件整个存活期间必须保持相同的值。值的意义：\n\n* `spring` 返回的 `OpaqueConfig` : 插值到 `x`\n* `spring` 返回的数字 `x`: 跳到 `x`， 不插入\n\n-defaultStyle?: PlainStyle\n\n可选。`PlainStyle` 类型映射到数字，和上面的 `style` 相同键的对象，值是初始化要插入的数据。注意，在后续的渲染过程中这个属性会被忽略。从当前值插入的目标值是由 `style` 决定。\n\n-children: (interpolatedStyle: PlainStyle) => ReactElement\n\n必须，且是函数。\n\n* `interpolatedStyle`: 返回给你被插入值的 `style` 对象。举个例子： 如果你写了 `style={{x: spring(10), y: spring(20)}}`, 然后就会在函数里接收到 `interpolatedStyle` 对象，在某一时间，可能拿到这样的数据 `{x:5.2, y: 12.1}`,就可以把这些数据用到你的 `div` 上或者其他地方。\n* `Return` 一定要返回一个 `React element`，这样 `Motion` 才能渲染你的组件。\n\n-onRest?: () => void\n\n可选。动画休息的时候触发的回调函数。\n\n## `<StaggeredMotion/>`\n\n交错的动画组件。\n\n创建一个彼此之间依赖的集合（固定长度）的动画，达到*自然*、*弹性*、*惊人*的效果。这比对一系列运动硬编码延迟的方式（不太自然的动画效果）更加有效。\n\n### `<StaggeredMotion/>` 用法\n\n```jsx\n<StaggeredMotion\n  defaultStyles={[{h: 0}, {h: 0}, {h: 0}]}\n  styles={prevInterpolatedStyles => prevInterpolatedStyles.map((_, i) => {\n    return i === 0\n      ? {h: spring(100)}\n      : {h: spring(prevInterpolatedStyles[i - 1].h)}\n  })}>\n  {interpolatingStyles =>\n    <div>\n      {interpolatingStyles.map((style, i) =>\n        <div key={i} style={{border: '1px solid', height: style.h}} />)\n      }\n    </div>\n  }\n</StaggeredMotion>\n```\n\n### `<StaggeredMotion/>` 属性(props)\n\n-styles:(previousInterpolatedStyles: ?Array<PlainStyle>) => Array<style>\n\n必须,函数。**不要忘记`\"s\"`**\n\n* `previousInterpolatedStyles` 前一个插入值的 `styles` ,(第一次渲染的时候是 `undefined` ,除非提供了 `defaultStyles`)\n\n* Return 一定要返回包含*目的值*的 `styles` 数组,举个例子:[{x: spring(10), x: spring(20)}]\n\n-defaultStyles?: Array<PlainStyle>\n\n可选。和 `Motion` 的 `defaultStyle` 类似，但是是一个数组。\n\n-children: (interpolatedStyles: Array<PlainStyle>) => ReactElement\n\n必须，函数。和 `Motion` 的 `children` 类似, 但是接受一个插入值的数组作为函数的参数。举个例子：`[{x: 5}, {x: 6.4}, {x: 8.1}]`。\n\n(没有 `noRest`, 我们没有发现有什么意义在 `StaggeredMotion` 中加入 `noReset`)\n\n## `<TransitionMotion>`\n\n帮助你创建 `mounting` 和 `unmounting` 时的动画。\n\n### `<TransitionMotion>` 用法\n\n有 `a`、`b`、`c` 三个项目，有各自的 `style` 配置，\n\n---\n\n![Edvard Munch – The Scream](react-motion文档及学习/944233120.jpg)\n\n> Edvard Munch – The Scream. ver. 1893","slug":"react-motion文档及学习","published":1,"updated":"2018-08-03T05:12:48.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcw8h0002ygz7tap2m19b"},{"title":"redux之compose","date":"2018-08-03T04:59:26.000Z","_content":"\n# redux之compose\n\n`redux` 是状态管理库，与其他框架如 `react` 是没有直接关系，所以 `redux` 可以脱离 `react` 在别的环境下使用。由于没有和`react` 相关逻辑耦合，所以 `redux` 的源码很纯粹，目的就是把如何数据管理好。而真正在 `react` 项目中使用 `redux` 时，是需要有一个 `react-redux` 当作连接器，去连接 `react` 和 `redux` 。\n\n没看 `redux` 源码之前，我觉得看 `redux` 应该是件很困难的事情，因为当初在学 `redux` 如何使用的时候就已经被 `redux` 繁多的概念所淹没。真正翻看 `redux` 源码的时候，会发现 `redux` 源码内容相当之少，代码量也相当少，代码质量也相当高，所以是非常值得看的源码。\n\n## 目录结构\n\n其他目录都可以不看，直接看 `./src` 吧：\n\n.\\REDUX\\SRC\n│  applyMiddleware.js\n│  bindActionCreators.js\n│  combineReducers.js\n│  compose.js\n│  createStore.js\n│  index.js\n│\n└─utils\n        actionTypes.js\n        isPlainObject.js\n        warning.js\n\n`index.js` 就是把 `applyMiddleware.js` 等汇集再统一暴露出去。`utils` 里面就放一些辅助函数。所以一共就五个文件需要看，这五个文件也就是 `redux` 暴露出去的五个 `API`。\n\n```js\n// index.js\nimport createStore from './createStore'\nimport combineReducers from './combineReducers'\nimport bindActionCreators from './bindActionCreators'\nimport applyMiddleware from './applyMiddleware'\nimport compose from './compose'\nimport warning from './utils/warning'\nimport __DO_NOT_USE__ActionTypes from './utils/actionTypes'\n\n// 忽略内容\n\nexport {\n  createStore,\n  combineReducers,\n  bindActionCreators,\n  applyMiddleware,\n  compose,\n  __DO_NOT_USE__ActionTypes\n}\n```\n\n## compose.js\n\n这是五个 `API` 里唯一一个能单独拿出来用的函数，就是函数式编程里常用的组合函数，和 `redux` 本身没有什么多大关系，先了解下函数式编程的一些概念：\n\n> [纯函数](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html#%E8%BF%BD%E6%B1%82%E2%80%9C%E7%BA%AF%E2%80%9D%E7%9A%84%E7%90%86%E7%94%B1)是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用。\n> [代码组合](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html)\n\n代码：\n\n```js\nexport default function compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n```\n\n其实 `compose` 函数做的事就是把 `var a = fn1(fn2(fn3(fn4(x))))` 这种嵌套的调用方式改成 `var a = compose(fn1,fn2,fn3,fn4)(x)` 的方式调用。\n\n`redux` 的 `compose` 实现很简洁，用了数组的 `reduce` 方法，`reduce` 的用法可以参照 [mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)。\n\n核心代码就一句：`return funcs.reduce((a,b) => (..args) => a(b(...args)))`\n\n我虽然经常写 `reduce` 函数，但是看到这句代码还是有点懵的，所以这里举一个实际的例子，看看这个函数是怎么执行的：\n\n```js\nimport {compose} from 'redux'\nlet x = 10\nfunction fn1 (x) {return x + 1}\nfunction fn2(x) {return x + 2}\nfunction fn3(x) {return x + 3}\nfunction fn4(x) {return x + 4}\n\n// 假设我这里想求得这样的值\nlet a = fn1(fn2(fn3(fn4(x)))) // 10 + 4 + 3 + 2 + 1 = 20\n\n// 根据compose的功能，我们可以把上面的这条式子改成如下：\nlet composeFn = compose(fn1, fn2, fn3, fn4)\nlet b = composeFn(x) // 理论上也应该得到20\n```\n\n看一下 `compose(fn1, fn2, fn3, fn4)`根据 `compose` 的源码, 其实执行的就是：\n`[fn1,fn2,fn3.fn4].reduce((a, b) => (...args) => a(b(...args)))`\n\n| 第几轮循环 | a的值 | b的值 | 返回的值 |\n| --- | --- | --- | --- |\n| 第一轮循环 | fn1 | fn2 | (...args) => fn1(fn2(...args)) |\n| 第二轮循环 | (...args) => fn1(fn2(...args)) | fn3 | (...args) => fn1(fn2(fn3(...args))) |\n| 第三轮循环 | (...args) => fn1(fn2(fn3(...args))) | fn4 | (...args) => fn1(fn2(fn3(fn4(...args)))) |\n\n循环最后的返回值就是 `(...args) => fn1(fn2(fn3(fn4(...args))))`。所以经过 `compose` 处理过之后，函数就变成我们想要的格式了。\n\n## 总结\n\n`compose` 函数在函数式编程里很常见。这里 `redux` 的对 `compose` 实现很简单，理解起来却没有那么容易，主要还是因为对 `Array.prototype.reduce` 函数没有那么熟练，其次就是这种接受函数返回函数的写法，再配上几个连续的 `=>` ，容易看晕。\n\n这是 `redux` 解读的第一篇，后续把几个 `API` 都讲一下。特别是 `applyMiddleware` 这个 `API` 有用到这个 `compose` 来组合中间件，也是有那么一个点比较难理解。\n\n---\n\n![Edvard Munch – img742](redux之compose/196334101.jpg)\n\n> Edvard Munch – img742\n","source":"_posts/redux之compose.md","raw":"---\ntitle: redux之compose\ndate: 2018-08-03 12:59:26\ntags:\n  - redux\n  - react\n  - 源码\ncategories: 前端\n---\n\n# redux之compose\n\n`redux` 是状态管理库，与其他框架如 `react` 是没有直接关系，所以 `redux` 可以脱离 `react` 在别的环境下使用。由于没有和`react` 相关逻辑耦合，所以 `redux` 的源码很纯粹，目的就是把如何数据管理好。而真正在 `react` 项目中使用 `redux` 时，是需要有一个 `react-redux` 当作连接器，去连接 `react` 和 `redux` 。\n\n没看 `redux` 源码之前，我觉得看 `redux` 应该是件很困难的事情，因为当初在学 `redux` 如何使用的时候就已经被 `redux` 繁多的概念所淹没。真正翻看 `redux` 源码的时候，会发现 `redux` 源码内容相当之少，代码量也相当少，代码质量也相当高，所以是非常值得看的源码。\n\n## 目录结构\n\n其他目录都可以不看，直接看 `./src` 吧：\n\n.\\REDUX\\SRC\n│  applyMiddleware.js\n│  bindActionCreators.js\n│  combineReducers.js\n│  compose.js\n│  createStore.js\n│  index.js\n│\n└─utils\n        actionTypes.js\n        isPlainObject.js\n        warning.js\n\n`index.js` 就是把 `applyMiddleware.js` 等汇集再统一暴露出去。`utils` 里面就放一些辅助函数。所以一共就五个文件需要看，这五个文件也就是 `redux` 暴露出去的五个 `API`。\n\n```js\n// index.js\nimport createStore from './createStore'\nimport combineReducers from './combineReducers'\nimport bindActionCreators from './bindActionCreators'\nimport applyMiddleware from './applyMiddleware'\nimport compose from './compose'\nimport warning from './utils/warning'\nimport __DO_NOT_USE__ActionTypes from './utils/actionTypes'\n\n// 忽略内容\n\nexport {\n  createStore,\n  combineReducers,\n  bindActionCreators,\n  applyMiddleware,\n  compose,\n  __DO_NOT_USE__ActionTypes\n}\n```\n\n## compose.js\n\n这是五个 `API` 里唯一一个能单独拿出来用的函数，就是函数式编程里常用的组合函数，和 `redux` 本身没有什么多大关系，先了解下函数式编程的一些概念：\n\n> [纯函数](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html#%E8%BF%BD%E6%B1%82%E2%80%9C%E7%BA%AF%E2%80%9D%E7%9A%84%E7%90%86%E7%94%B1)是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用。\n> [代码组合](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html)\n\n代码：\n\n```js\nexport default function compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n```\n\n其实 `compose` 函数做的事就是把 `var a = fn1(fn2(fn3(fn4(x))))` 这种嵌套的调用方式改成 `var a = compose(fn1,fn2,fn3,fn4)(x)` 的方式调用。\n\n`redux` 的 `compose` 实现很简洁，用了数组的 `reduce` 方法，`reduce` 的用法可以参照 [mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)。\n\n核心代码就一句：`return funcs.reduce((a,b) => (..args) => a(b(...args)))`\n\n我虽然经常写 `reduce` 函数，但是看到这句代码还是有点懵的，所以这里举一个实际的例子，看看这个函数是怎么执行的：\n\n```js\nimport {compose} from 'redux'\nlet x = 10\nfunction fn1 (x) {return x + 1}\nfunction fn2(x) {return x + 2}\nfunction fn3(x) {return x + 3}\nfunction fn4(x) {return x + 4}\n\n// 假设我这里想求得这样的值\nlet a = fn1(fn2(fn3(fn4(x)))) // 10 + 4 + 3 + 2 + 1 = 20\n\n// 根据compose的功能，我们可以把上面的这条式子改成如下：\nlet composeFn = compose(fn1, fn2, fn3, fn4)\nlet b = composeFn(x) // 理论上也应该得到20\n```\n\n看一下 `compose(fn1, fn2, fn3, fn4)`根据 `compose` 的源码, 其实执行的就是：\n`[fn1,fn2,fn3.fn4].reduce((a, b) => (...args) => a(b(...args)))`\n\n| 第几轮循环 | a的值 | b的值 | 返回的值 |\n| --- | --- | --- | --- |\n| 第一轮循环 | fn1 | fn2 | (...args) => fn1(fn2(...args)) |\n| 第二轮循环 | (...args) => fn1(fn2(...args)) | fn3 | (...args) => fn1(fn2(fn3(...args))) |\n| 第三轮循环 | (...args) => fn1(fn2(fn3(...args))) | fn4 | (...args) => fn1(fn2(fn3(fn4(...args)))) |\n\n循环最后的返回值就是 `(...args) => fn1(fn2(fn3(fn4(...args))))`。所以经过 `compose` 处理过之后，函数就变成我们想要的格式了。\n\n## 总结\n\n`compose` 函数在函数式编程里很常见。这里 `redux` 的对 `compose` 实现很简单，理解起来却没有那么容易，主要还是因为对 `Array.prototype.reduce` 函数没有那么熟练，其次就是这种接受函数返回函数的写法，再配上几个连续的 `=>` ，容易看晕。\n\n这是 `redux` 解读的第一篇，后续把几个 `API` 都讲一下。特别是 `applyMiddleware` 这个 `API` 有用到这个 `compose` 来组合中间件，也是有那么一个点比较难理解。\n\n---\n\n![Edvard Munch – img742](redux之compose/196334101.jpg)\n\n> Edvard Munch – img742\n","slug":"redux之compose","published":1,"updated":"2018-08-03T05:14:21.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcw8p0006ygz7ps6viog8"},{"title":"vue、react隐式实例化","date":"2018-08-03T01:33:40.000Z","_content":"\n# vue、react隐式实例化\n\n> 写这篇的缘由是因为上一篇[vue与react组件对比学习](https://github.com/limengke123/my-note/blob/master/%E5%89%8D%E7%AB%AF/vue%E4%B8%8Ereact%E7%BB%84%E4%BB%B6%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0.md)写的有点啰嗦也没有写的很明白同时也存在一点错误，所以重新写一篇简介概要点的。\n\n## 隐式实例化\n\n> 隐式实例化，不希望写在`react`的`jsx`里或是`vue`的`template`，而是希望通过手动去实例化一个`react`或是`vue`组件。\n\n说的有点绕，这种*隐式实例化*的应用场景在提示信息(message)、模态框(modal)、加载条(loadingbar)，例如一个`ajax`请求，在成功或失败的时候需要给一个提示：\n\n```js\n// 下面是伪代码...\n\nimport message from 'message'\n\nfetch('/api/xxx')\n    .then(resp => {\n        if(resp.success === true){\n            message({\n                type:\"success\",\n                text:\"请求成功\"\n            })\n        } else {\n            message({\n                type:\"error\",\n                text:\"请求出错\"\n            })\n        }\n    })\n\n```\n\n可以看的出来，我们的需求是想有一个组件能像`html`原生的`alert`一样，在需要的地方能够直接去调用，而不是需要把`message`组件写进节点中。\n\n## 难点\n\n我们都知道不论是`react`、还是`vue`也好，写的都是一个类或者叫构造器：\n\n```js\n\n// react 引用代码省略\n\nexport default class Message extends React.Component{}\n\n// vue\n// export default {\n    data(){},\n    props:{},\n    methods:{},\n    render:function(){}\n}\n\n\n```\n\n`react`相当明显地创建了一个`class`，`vue`表面上好像只是暴露一个对象，实际上`vue`的组件被使用时，你需要把子组件传入父组件的`component`的对象中，所以`Vue`会调用`Vue.extend({...自组建的选项对象})`，这个方法就返回了一个构造器。\n\n既然知道了子组件是一个构造器，那我能不能直接去手动`new`一个子组件呢？在我测试下来，好像是不行。\n\n## vue实例化\n\n那么如何实例化呢？分成两部分，先是实例化一个组件，然后再把实例化后的组件挂载到html中去。先拿`vue`说：\n\n### 拿到构造器\n\n```js\nimport Vue from 'vue'\nimport message from './message.vue'\n\n// 注意： 这里的message仅仅就是一个对象，需要转成构造器\n\nconst messageConstructor = Vue.extend(message)\n\n\n```\n\n### 实例化\n\n```js\nconst customProps = {\n    // 传给组件的一些props\n}\n\n\n// 这样就能拿到了一个vue组件的实例，就能做很多事情了，比如调用实例中写好的methods中的方法，当然这还没完，我们还得把实例挂载到Html中\nconst messageInstance = new messageConstuctor({propsData:customProps})\n```\n\n### 挂载\n\n`vue`的实例有一个很重要的方法：`$mount`，在选项对象中我们没有传入`el`属性，所以你在这里手动实例化的`vue`实例是没有挂载出来的，需要手动调用一遍`$mount`，可以传入一个DOM节点做为挂载节点，当然也可以不传入参数，后面手动用`dom`方法把节点插入。\n\n```js\n\n// 这里返回的messageWithDom依然还是vue实例而不是dom节点，但是这个实例多了一个$el属性，这个属性里面就藏着我们需要挂载的dom节点\nconst messageWithDom = messageInstance.$mount()\n\nconst dom = messageWithDom.$el\n\ndocument.body.appendChild(dom)\n\n```\n\n### 野路子\n\n`vue`隐式化实例，基本是这个套路，当然我在看*iview组件库*中用了一些其他的野路子，这里也贴一下：\n\n```js\n\nimport Notification from './notification.vue';\nimport Vue from 'vue';\n\nconst _props = properties || {};\n\nconst Instance = new Vue({\n    render (h) {\n        return h(Notification, {\n            props: _props\n        });\n    }\n});\n\n```\n\n道理基本上和我说的差不多，不过调用`Vue.extend`更加容易理解。\n\n### 后续控制\n\n拿到组件的实例后，基本上想怎么玩就能怎么玩了，比如说控制隐藏或显示，可以在组件内部定义一个`isShow`的`data`属性，在实例上可以这样用：\n\n```js\n\nif( xxxx ) {\n    messageWithDom.isShow = true\n} else {\n    messageWithDom.isShow = false\n}\n\n```\n\n## react实例化\n\n`react`的实例化和`vue`稍稍不同，首先引进来的直接就是一个类所以不需要像`Vue`一样多做一步转换成构造器，其次`react`是没有类似`vue`的`$mount`方法，这也是我一开始很疑惑的地方，后来突然想起来`react`把组件的挂载方法放到了`reactDom`这个包里面了。\n\n### 创建一个虚拟dom\n\n这里需要调用`React.createElement`去创建一个虚拟dom，其实`vue`也能创建一个虚拟dom，参考上面`iview`的野路子。\n\n```js\nimport React from 'react'\nimport Message from './message.jsx'\n\nconst customProps = {\n    // 传给自组件的一些props\n}\n\nconst Vnode = React.createElment(Message,{props:customProps})\n\n```\n\n### 挂载并且拿到实例\n\n`react`没有`$mount`方法，而是直接调用`reactDom`的`render`方法，相当于`vue`的两步直接一步完成:\n\n```js\nimport React from 'react'\nimport ReactDom from 'react-dom'\n\nconst containner = document.createElement('div')\ndocument.body.appendChild(containner)\n\n// 把虚拟dom传入reactDom.render方法中，第二个参数是挂载的节点，并返回这个组件的实例\nconst messageInstance = ReactDom.render(Vnode,containner)\n```\n\n### 后续的控制\n\n拿到组件的实例后，基本想怎么玩就能怎么玩了，但是**别忘记了！！！**，`react`修改`state`是调用`setState`，而不像`vue`直接修改。\n\n## 总结\n\n学会隐式化创建实例能够很好的看清楚`vue`和`react`内部的细节，对提高`vue`、`react`大有好处。我的一个项目有个加载条的组件，同时用`react`和`vue`都实现了一遍，可以对比学习发现两者的差异，喜欢的可以点个赞~~。\n\n* [loadingBar的vue实现](https://github.com/limengke123/fantastic-carnival/blob/master/admin/src/components/general/loading-bar/loading-bar.js#L6)\n* [loadingBar的react实现](https://github.com/limengke123/fantastic-carnival/blob/master/client/src/components/common/loading-bar/loading-bar.js#L7)\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Wave](vue、react隐式实例化/596444702.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Wave 1889\n","source":"_posts/vue、react隐式实例化.md","raw":"---\ntitle: vue、react隐式实例化\ndate: 2018-08-03 09:33:40\ntags:\n  - vue\n  - react\ncategories: 前端\n---\n\n# vue、react隐式实例化\n\n> 写这篇的缘由是因为上一篇[vue与react组件对比学习](https://github.com/limengke123/my-note/blob/master/%E5%89%8D%E7%AB%AF/vue%E4%B8%8Ereact%E7%BB%84%E4%BB%B6%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0.md)写的有点啰嗦也没有写的很明白同时也存在一点错误，所以重新写一篇简介概要点的。\n\n## 隐式实例化\n\n> 隐式实例化，不希望写在`react`的`jsx`里或是`vue`的`template`，而是希望通过手动去实例化一个`react`或是`vue`组件。\n\n说的有点绕，这种*隐式实例化*的应用场景在提示信息(message)、模态框(modal)、加载条(loadingbar)，例如一个`ajax`请求，在成功或失败的时候需要给一个提示：\n\n```js\n// 下面是伪代码...\n\nimport message from 'message'\n\nfetch('/api/xxx')\n    .then(resp => {\n        if(resp.success === true){\n            message({\n                type:\"success\",\n                text:\"请求成功\"\n            })\n        } else {\n            message({\n                type:\"error\",\n                text:\"请求出错\"\n            })\n        }\n    })\n\n```\n\n可以看的出来，我们的需求是想有一个组件能像`html`原生的`alert`一样，在需要的地方能够直接去调用，而不是需要把`message`组件写进节点中。\n\n## 难点\n\n我们都知道不论是`react`、还是`vue`也好，写的都是一个类或者叫构造器：\n\n```js\n\n// react 引用代码省略\n\nexport default class Message extends React.Component{}\n\n// vue\n// export default {\n    data(){},\n    props:{},\n    methods:{},\n    render:function(){}\n}\n\n\n```\n\n`react`相当明显地创建了一个`class`，`vue`表面上好像只是暴露一个对象，实际上`vue`的组件被使用时，你需要把子组件传入父组件的`component`的对象中，所以`Vue`会调用`Vue.extend({...自组建的选项对象})`，这个方法就返回了一个构造器。\n\n既然知道了子组件是一个构造器，那我能不能直接去手动`new`一个子组件呢？在我测试下来，好像是不行。\n\n## vue实例化\n\n那么如何实例化呢？分成两部分，先是实例化一个组件，然后再把实例化后的组件挂载到html中去。先拿`vue`说：\n\n### 拿到构造器\n\n```js\nimport Vue from 'vue'\nimport message from './message.vue'\n\n// 注意： 这里的message仅仅就是一个对象，需要转成构造器\n\nconst messageConstructor = Vue.extend(message)\n\n\n```\n\n### 实例化\n\n```js\nconst customProps = {\n    // 传给组件的一些props\n}\n\n\n// 这样就能拿到了一个vue组件的实例，就能做很多事情了，比如调用实例中写好的methods中的方法，当然这还没完，我们还得把实例挂载到Html中\nconst messageInstance = new messageConstuctor({propsData:customProps})\n```\n\n### 挂载\n\n`vue`的实例有一个很重要的方法：`$mount`，在选项对象中我们没有传入`el`属性，所以你在这里手动实例化的`vue`实例是没有挂载出来的，需要手动调用一遍`$mount`，可以传入一个DOM节点做为挂载节点，当然也可以不传入参数，后面手动用`dom`方法把节点插入。\n\n```js\n\n// 这里返回的messageWithDom依然还是vue实例而不是dom节点，但是这个实例多了一个$el属性，这个属性里面就藏着我们需要挂载的dom节点\nconst messageWithDom = messageInstance.$mount()\n\nconst dom = messageWithDom.$el\n\ndocument.body.appendChild(dom)\n\n```\n\n### 野路子\n\n`vue`隐式化实例，基本是这个套路，当然我在看*iview组件库*中用了一些其他的野路子，这里也贴一下：\n\n```js\n\nimport Notification from './notification.vue';\nimport Vue from 'vue';\n\nconst _props = properties || {};\n\nconst Instance = new Vue({\n    render (h) {\n        return h(Notification, {\n            props: _props\n        });\n    }\n});\n\n```\n\n道理基本上和我说的差不多，不过调用`Vue.extend`更加容易理解。\n\n### 后续控制\n\n拿到组件的实例后，基本上想怎么玩就能怎么玩了，比如说控制隐藏或显示，可以在组件内部定义一个`isShow`的`data`属性，在实例上可以这样用：\n\n```js\n\nif( xxxx ) {\n    messageWithDom.isShow = true\n} else {\n    messageWithDom.isShow = false\n}\n\n```\n\n## react实例化\n\n`react`的实例化和`vue`稍稍不同，首先引进来的直接就是一个类所以不需要像`Vue`一样多做一步转换成构造器，其次`react`是没有类似`vue`的`$mount`方法，这也是我一开始很疑惑的地方，后来突然想起来`react`把组件的挂载方法放到了`reactDom`这个包里面了。\n\n### 创建一个虚拟dom\n\n这里需要调用`React.createElement`去创建一个虚拟dom，其实`vue`也能创建一个虚拟dom，参考上面`iview`的野路子。\n\n```js\nimport React from 'react'\nimport Message from './message.jsx'\n\nconst customProps = {\n    // 传给自组件的一些props\n}\n\nconst Vnode = React.createElment(Message,{props:customProps})\n\n```\n\n### 挂载并且拿到实例\n\n`react`没有`$mount`方法，而是直接调用`reactDom`的`render`方法，相当于`vue`的两步直接一步完成:\n\n```js\nimport React from 'react'\nimport ReactDom from 'react-dom'\n\nconst containner = document.createElement('div')\ndocument.body.appendChild(containner)\n\n// 把虚拟dom传入reactDom.render方法中，第二个参数是挂载的节点，并返回这个组件的实例\nconst messageInstance = ReactDom.render(Vnode,containner)\n```\n\n### 后续的控制\n\n拿到组件的实例后，基本想怎么玩就能怎么玩了，但是**别忘记了！！！**，`react`修改`state`是调用`setState`，而不像`vue`直接修改。\n\n## 总结\n\n学会隐式化创建实例能够很好的看清楚`vue`和`react`内部的细节，对提高`vue`、`react`大有好处。我的一个项目有个加载条的组件，同时用`react`和`vue`都实现了一遍，可以对比学习发现两者的差异，喜欢的可以点个赞~~。\n\n* [loadingBar的vue实现](https://github.com/limengke123/fantastic-carnival/blob/master/admin/src/components/general/loading-bar/loading-bar.js#L6)\n* [loadingBar的react实现](https://github.com/limengke123/fantastic-carnival/blob/master/client/src/components/common/loading-bar/loading-bar.js#L7)\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Wave](vue、react隐式实例化/596444702.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Wave 1889\n","slug":"vue、react隐式实例化","published":1,"updated":"2018-08-03T01:34:39.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcw8u0007ygz76y6t354g"},{"title":"一次面试记录","date":"2018-08-03T01:37:20.000Z","_content":"\n# 一次面试记录\n\n## 电面\n\n基本上是围绕简历提问，外带一些基本问题。\n\n* 说一说`vue`指令\n* 说一说`webpack`打包大概是什么样的，为什么能把所有资源都能打进来\n* 了解`es6`吗，讲一下装饰器，以及装饰器编译成`es5`是什么样，`babel`如何配置才能用`es7`、`es8`等最新语法\n* `node`爬虫以及解码问题\n* 说一说`react`和`vue`的对比\n* 说一说`虚拟dom`是什么，以及`diff`算法\n* `react`没有`Vue`的依赖收集，所以谈一谈`react`的性能优化\n* 再说一说`React.pureComponent`原理\n* 高阶函数是否知道，以及高阶函数(hoc)和混入(mixin)的对比\n* 浮动影响，怎么清除浮动，父元素伪类设置的`content`为空的时候对清除浮动是否影响，\n* 讲一讲`BFC`\n* 是否了解`BEM`\n* position的取值，以及`relative`、`absolute`的区别，以及`relative`设置`top`，`left`等值是否破坏文档流\n\n## 现场面\n\n传闻现场面有三轮，技术面、hr面、TL(teamLeader)面，结果面完以后内推的小伙伴告诉我面试官是teamLeader才知道这直接就是TL面了，面的不太理想，所以最后是挂了。\n\n### 笔试题\n\n* 函数作用域的那种题，涉及一些基本的闭包，全局作用域一些相关问题\n* 一个10秒钟的`while`循环，这时候事件点击的问题\n* 原型链相关的一个问题\n* 分析一段函数是否存在问题，重点在于递归问题\n\n### mac敲代码题\n\n实现一个解析`url`参数的函数，也算很常见的一个面试题了。\n\n### 提问\n\n* `vue-router`原理\n* 多次改变`this.data`的值，是否多次渲染，渲染之后如何操作，以及`nextTick`原理\n* `vue`原理\n* `koa`中间件原理\n* `node`单线程，那么线程和进程区别\n* 是否有计算机基础\n* webpack怎么涉及文件缓冲,文件名设置为`hash`值后，怎么映射到`index.html`的引入中去\n\n--- \n\n![Ivan Konstantinovich Aivazovsky – Shipwreck](一次面试记录/456066894.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Shipwreck 1864\n","source":"_posts/一次面试记录.md","raw":"---\ntitle: 一次面试记录\ndate: 2018-08-03 09:37:20\ntags:\n  - 面试\ncategories: 前端\n---\n\n# 一次面试记录\n\n## 电面\n\n基本上是围绕简历提问，外带一些基本问题。\n\n* 说一说`vue`指令\n* 说一说`webpack`打包大概是什么样的，为什么能把所有资源都能打进来\n* 了解`es6`吗，讲一下装饰器，以及装饰器编译成`es5`是什么样，`babel`如何配置才能用`es7`、`es8`等最新语法\n* `node`爬虫以及解码问题\n* 说一说`react`和`vue`的对比\n* 说一说`虚拟dom`是什么，以及`diff`算法\n* `react`没有`Vue`的依赖收集，所以谈一谈`react`的性能优化\n* 再说一说`React.pureComponent`原理\n* 高阶函数是否知道，以及高阶函数(hoc)和混入(mixin)的对比\n* 浮动影响，怎么清除浮动，父元素伪类设置的`content`为空的时候对清除浮动是否影响，\n* 讲一讲`BFC`\n* 是否了解`BEM`\n* position的取值，以及`relative`、`absolute`的区别，以及`relative`设置`top`，`left`等值是否破坏文档流\n\n## 现场面\n\n传闻现场面有三轮，技术面、hr面、TL(teamLeader)面，结果面完以后内推的小伙伴告诉我面试官是teamLeader才知道这直接就是TL面了，面的不太理想，所以最后是挂了。\n\n### 笔试题\n\n* 函数作用域的那种题，涉及一些基本的闭包，全局作用域一些相关问题\n* 一个10秒钟的`while`循环，这时候事件点击的问题\n* 原型链相关的一个问题\n* 分析一段函数是否存在问题，重点在于递归问题\n\n### mac敲代码题\n\n实现一个解析`url`参数的函数，也算很常见的一个面试题了。\n\n### 提问\n\n* `vue-router`原理\n* 多次改变`this.data`的值，是否多次渲染，渲染之后如何操作，以及`nextTick`原理\n* `vue`原理\n* `koa`中间件原理\n* `node`单线程，那么线程和进程区别\n* 是否有计算机基础\n* webpack怎么涉及文件缓冲,文件名设置为`hash`值后，怎么映射到`index.html`的引入中去\n\n--- \n\n![Ivan Konstantinovich Aivazovsky – Shipwreck](一次面试记录/456066894.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Shipwreck 1864\n","slug":"一次面试记录","published":1,"updated":"2018-08-03T01:38:14.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcw8z0008ygz7cuknwumm"},{"title":"三月的烟雨","date":"2018-08-01T11:44:41.000Z","_content":"\n# 三月的烟雨\n\n>三月的烟雨，飘荡的南方\n\n有很多次想写一写关于生活的笔记，碍于自己的描述表达能力不行迟迟都没有开始。所以这篇算是开山第一篇了，以后也终于可以在想说话、想表达、想发泄的时候能合理的释放情绪了。\n\n## 回不去\n\n从2016.11.3来杭实习到现在的2018.3.27，竟然也快过去了一年半了，不得不感叹时间真的过得很快，我有时候也经常想起大学的时光，想起来的那些人那些事，所有这些的过去开始一点点模糊，大家也都有了新的生活，就是这种淡淡的感觉里承载着四年时间里的酸甜苦辣，五味陈杂的感觉总让我想去触摸它却又始终不敢也不可能去触摸得到。\n\n## 情绪\n\n我有时候是个很悲观的人，容易积累负面情绪，我喜欢这样想：`发生这样的事情还不如回到以前`，所以表现出一点恋旧的情绪，同时也有一种`弱者情绪`，我定义的`弱者情绪`就是喜欢从弱者的视角去过度同情他，因为在我的想法里我一直是这样的`弱者`\n\n## 民谣\n\n始终听不腻民谣，这种失意人的共鸣真的让自己心生怜悯，难免也会同情自己有多可怜，其实我也没有那么多痛痒的青春故事和一直低谷的情绪，可能就是喜欢吉他的声音吧。\n\n## 健身\n\n最近我也开始了在keep的帮助下健身，从来没想过去健身的我竟然也开始了锻炼身体。我给自己定了目标，每天锻炼二十分钟，虽然我感觉我坚持不了几天了，但是这几天自律健身，我也开始想着去识图合理分配下班后到家剩下来的时间。这是一个好的开始，希望能好好地坚持！！！\n\n---\n\n![Vincent van Gogh – Sunny Lawn in a Public Park](三月的烟雨/898024871.jpg)\n\n> Vincent van Gogh – Sunny Lawn in a Public Park 1888\n","source":"_posts/三月的烟雨.md","raw":"---\ntitle: 三月的烟雨\ndate: 2018-08-01 19:44:41\ntags: \ncategories: 生活\n---\n\n# 三月的烟雨\n\n>三月的烟雨，飘荡的南方\n\n有很多次想写一写关于生活的笔记，碍于自己的描述表达能力不行迟迟都没有开始。所以这篇算是开山第一篇了，以后也终于可以在想说话、想表达、想发泄的时候能合理的释放情绪了。\n\n## 回不去\n\n从2016.11.3来杭实习到现在的2018.3.27，竟然也快过去了一年半了，不得不感叹时间真的过得很快，我有时候也经常想起大学的时光，想起来的那些人那些事，所有这些的过去开始一点点模糊，大家也都有了新的生活，就是这种淡淡的感觉里承载着四年时间里的酸甜苦辣，五味陈杂的感觉总让我想去触摸它却又始终不敢也不可能去触摸得到。\n\n## 情绪\n\n我有时候是个很悲观的人，容易积累负面情绪，我喜欢这样想：`发生这样的事情还不如回到以前`，所以表现出一点恋旧的情绪，同时也有一种`弱者情绪`，我定义的`弱者情绪`就是喜欢从弱者的视角去过度同情他，因为在我的想法里我一直是这样的`弱者`\n\n## 民谣\n\n始终听不腻民谣，这种失意人的共鸣真的让自己心生怜悯，难免也会同情自己有多可怜，其实我也没有那么多痛痒的青春故事和一直低谷的情绪，可能就是喜欢吉他的声音吧。\n\n## 健身\n\n最近我也开始了在keep的帮助下健身，从来没想过去健身的我竟然也开始了锻炼身体。我给自己定了目标，每天锻炼二十分钟，虽然我感觉我坚持不了几天了，但是这几天自律健身，我也开始想着去识图合理分配下班后到家剩下来的时间。这是一个好的开始，希望能好好地坚持！！！\n\n---\n\n![Vincent van Gogh – Sunny Lawn in a Public Park](三月的烟雨/898024871.jpg)\n\n> Vincent van Gogh – Sunny Lawn in a Public Park 1888\n","slug":"三月的烟雨","published":1,"updated":"2018-08-02T01:04:23.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcw95000cygz76zjzjdao"},{"title":"你好，世界","date":"2018-08-01T03:14:20.000Z","_content":"\n折腾了一天,终于用 `hexo` 搭出来博客了,一开始上手的时候感觉很简单,应该小半天就能把原来的文章迁移过来，结果还是遇到了不少的坑。中途在 `gitee` 和 `github` 上来回折腾，`github` 实在是太卡了，无形中增加了不少搭建的时间。所幸，最终还是弄好了，下一步就是把之前写在另一个仓库下的文章迁移过来了。\n\n`hexo` 最大的方便就是完成了基本的配置和主题的选择之后，只要专心写好 `markdown` 就好了，文章页面就交由 `hexo` 处理即可，大大提升对文章本身的专注力。\n\n最后还是要说一句：“你好，世界！”\n\n---\n\n![Cafe Terrace in Arles at Night](你好，世界/1959017488.jpg)\n> Vincent van Gogh – Cafe Terrace in Arles at Night 1888\n","source":"_posts/你好，世界.md","raw":"---\ntitle: 你好，世界\ndate: 2018-08-01 11:14:20\ntags:\ncategories: 杂记\n---\n\n折腾了一天,终于用 `hexo` 搭出来博客了,一开始上手的时候感觉很简单,应该小半天就能把原来的文章迁移过来，结果还是遇到了不少的坑。中途在 `gitee` 和 `github` 上来回折腾，`github` 实在是太卡了，无形中增加了不少搭建的时间。所幸，最终还是弄好了，下一步就是把之前写在另一个仓库下的文章迁移过来了。\n\n`hexo` 最大的方便就是完成了基本的配置和主题的选择之后，只要专心写好 `markdown` 就好了，文章页面就交由 `hexo` 处理即可，大大提升对文章本身的专注力。\n\n最后还是要说一句：“你好，世界！”\n\n---\n\n![Cafe Terrace in Arles at Night](你好，世界/1959017488.jpg)\n> Vincent van Gogh – Cafe Terrace in Arles at Night 1888\n","slug":"你好，世界","published":1,"updated":"2018-08-01T04:02:43.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcw99000dygz755sbwrv9"},{"title":"前端部署nginx配置","date":"2018-08-03T04:56:43.000Z","_content":"\n# 前端部署nginx配置\n\n之前很少接触前端项目的部署，这次为了更全面的学习就在本机上装了一个虚拟机上，在虚拟机上练习了如何把一个 `react` 写的 `spa` 项目部署到这个虚拟机的服务器上。由于 `linux` 也是刚接触不久，所以整个过程还是遇到了很多坑，这里记录下。\n\n## 目标\n\n我有一个用 `react` 写的单页面应用，然后希望部署到服务器上，通过 `ip` 如 `192.168.1.240/config` 这种路径下访问到我的应用。这个 `react` 项目依赖一个 `node.js` 的一个 `api` 服务，我需要在 `nginx` 上配置代理使得我的 `react` 应用能够访问到我的 `api` 服务。\n\n## 准备\n\n首先要准备的就是打包好的的 `react` 应用，然后在服务器上装一个 `nginx` 和一个 `node.js`。\n\n针对我这个项目, 我把 `react` 打包好的项目全部放到了 `/root/html/pageConfig` 这个路径下。\n\n## nginx配置\n\n修改 `nginx` 安装目录下的 `./conf/nginx.conf` 文件：\n\n``` conf\n#user nodody;\n# 1. 由于我的 react 项目打包出来放在 root 目录下，需要设置user 为 root 时内容才能够被访问\nuser root;\n\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        # 2. 对我的/api请求转发到8989端口下node.js服务\n        location /api {\n            proxy_pass  http://127.0.0.1:8989;\n        }\n        # 3. 在/config下的请求都指向到我放在root下的configPage里的内容\n         location /config {\n            alias /root/html/configPage;\n            index index.html index.htm;\n            #rewrite /config  /root/html/configPage/index.html;\n            try_files $uri $uri/ /config/index.html;\n         }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n```\n\n这里就是只修改了默认配置文件的三个地方，来满足我的要求：\n\n1. 修改 `user` 为 `root`，使得 `root` 下的内容能够被访问\n2. 新增 `location /api` 设置 `proxy_pass` 使得 `/api`下的请求都被转发到 `proxy_pass` 设置的 `node.js` 服务处,满足我的前端页面 `api` 接口代理的问题\n3. 新增 `location /config` 的配置，使得 `/config` 下请求都转发至我 `react` 打包文件所在的路径。这样我访问 `192.168.1.240/config`就能看到我的页面。*这里我当初是复制的`location /` 的配置，用的也是 `root` 指向路径，结果一直不行，查了资料，发现应该要写成 `alias` 才行*\n\n这里的配置文件可能需要更改多次，才能成功，需要注意的是，每次修改完 `nginx` 配置，需要重启下 `nginx`:\n\n```bash\nnginx -s reload\n```\n\n## 静态资源路径问题\n\n把打包好的文件传到服务器上的时候，可能出现静态资源文件找不到的情况。\n\n### 资源路径找不到的原因\n\n可能的原因是当 `react` 应用打包的时候，生成 `index.html` 文件中插入 `style` 和 `script` 标签的路径不对，从而找不到静态资源。\n\n### 静态资源找不到的解决方法\n\n需要在 `webpack` 的配置文件中去修改一下 `publicPath` 这个属性，这个属性会影响你的静态资源文件插入到 `index.html` 中的路径。像我这个项目设置 `publicPath: './'`就可以了，具体可以多修改几次多打包几次试试就行了。\n\n## 前端路由\n\n### 前端路由分类\n\n前端路由分为两种实现，一种就是 `hashRouter`，另一种就是用 `H5` 新的 `History API` 实现的 `browserRouter`。由于 `hashRouter` 的路径带一个 `#` 不是特别好看，一般还是用 `browserRouter` 较多。\n\n### 前端路由的问题\n\n前端路由说白了就是路径变了，不去请求服务器，而是用 `js` 去改变页面的方式。这样的话，用 `browserRouter` 的话这里就存在一个问题，我用前端路由跳转到某一个路径下 `/xxx`，这是我刷新页面，这时候就会去服务器上拿资源，这个前端路由路径下肯定找不到资源，所以就会出现 `404` 报错。\n\n### 解决方案\n\n解决页面刷新 `404` 这个问题，只需要把所有的请求全部返回 `index.html`，可以搜索 `history fallback` 这个关键词查看相关资料。\n\n针对我的这个 `nginx` 配置而言，只需要加入 `try_files $uri $uri/ /config/index.html;`,就能把前端路由路径发送给服务器时全部返回 `index.html`，这样就解决了 `404`问题。\n\n## Route路径匹配问题\n\n配置好上述的 `nginx` 以及把打包好的文件放到对应的目录，再把我的 `api` 服务启动，再访问 `192.168.1.240/config` 时，已经能够正常的显示页面，并且接口也能正常代理请求到了。但是涉及到路由的页面却没有被渲染出来。\n\n### Route路径匹配的原因\n\n回想一下，在 `react-router-dom` 的 `Route` 标签里传递一个 `path={'/xx'}` 的属性时，前端路由会根据这个 `path` 来渲染对应的 `Route` 上传递过去的 `Component` 组件。那么在我的 `nginx` 的设置中，我设置的是 `location /config`，也就是说我实际访问路径都是加上了前缀 `/config`，所以每个 `Route` 标签中传过去的路径都因为缺少了 `/config` 前缀导致所以的匹配都不成立，所以 `Route` 的页面都没有办法渲染。\n\n### Route路径匹配修改方法\n\n方法很简单，在 `BrowserRouter` 上加一个 `basename` 的属性，给这属性传递 `config` (*具体是什么值，依据你给 `nginx`设置 `location` 时的前缀，我的例子中是 `config`*)，这样 `Route` 在匹配路径的时候会加上 `basename`，这样就能和对应路径匹配上，然后渲染对应页面。\n\n## 总结\n\n对 `linux` 不熟悉，`nginx` 也不熟悉，依靠着百度，摸爬滚打尝试修改了好多次 `nginx` 配置，终于能够 `react` 打包好的文件部署上去了， `vue` 项目的部署也是没什么区别的。\n\n---\n\n![Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon](前端部署nginx配置/4282315052.jpg)\n\n> Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon 1503-05","source":"_posts/前端部署nginx配置.md","raw":"---\ntitle: 前端部署nginx配置\ndate: 2018-08-03 12:56:43\ntags:\n  - nginx\n  - 部署\ncategories: 前端\n---\n\n# 前端部署nginx配置\n\n之前很少接触前端项目的部署，这次为了更全面的学习就在本机上装了一个虚拟机上，在虚拟机上练习了如何把一个 `react` 写的 `spa` 项目部署到这个虚拟机的服务器上。由于 `linux` 也是刚接触不久，所以整个过程还是遇到了很多坑，这里记录下。\n\n## 目标\n\n我有一个用 `react` 写的单页面应用，然后希望部署到服务器上，通过 `ip` 如 `192.168.1.240/config` 这种路径下访问到我的应用。这个 `react` 项目依赖一个 `node.js` 的一个 `api` 服务，我需要在 `nginx` 上配置代理使得我的 `react` 应用能够访问到我的 `api` 服务。\n\n## 准备\n\n首先要准备的就是打包好的的 `react` 应用，然后在服务器上装一个 `nginx` 和一个 `node.js`。\n\n针对我这个项目, 我把 `react` 打包好的项目全部放到了 `/root/html/pageConfig` 这个路径下。\n\n## nginx配置\n\n修改 `nginx` 安装目录下的 `./conf/nginx.conf` 文件：\n\n``` conf\n#user nodody;\n# 1. 由于我的 react 项目打包出来放在 root 目录下，需要设置user 为 root 时内容才能够被访问\nuser root;\n\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        # 2. 对我的/api请求转发到8989端口下node.js服务\n        location /api {\n            proxy_pass  http://127.0.0.1:8989;\n        }\n        # 3. 在/config下的请求都指向到我放在root下的configPage里的内容\n         location /config {\n            alias /root/html/configPage;\n            index index.html index.htm;\n            #rewrite /config  /root/html/configPage/index.html;\n            try_files $uri $uri/ /config/index.html;\n         }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n```\n\n这里就是只修改了默认配置文件的三个地方，来满足我的要求：\n\n1. 修改 `user` 为 `root`，使得 `root` 下的内容能够被访问\n2. 新增 `location /api` 设置 `proxy_pass` 使得 `/api`下的请求都被转发到 `proxy_pass` 设置的 `node.js` 服务处,满足我的前端页面 `api` 接口代理的问题\n3. 新增 `location /config` 的配置，使得 `/config` 下请求都转发至我 `react` 打包文件所在的路径。这样我访问 `192.168.1.240/config`就能看到我的页面。*这里我当初是复制的`location /` 的配置，用的也是 `root` 指向路径，结果一直不行，查了资料，发现应该要写成 `alias` 才行*\n\n这里的配置文件可能需要更改多次，才能成功，需要注意的是，每次修改完 `nginx` 配置，需要重启下 `nginx`:\n\n```bash\nnginx -s reload\n```\n\n## 静态资源路径问题\n\n把打包好的文件传到服务器上的时候，可能出现静态资源文件找不到的情况。\n\n### 资源路径找不到的原因\n\n可能的原因是当 `react` 应用打包的时候，生成 `index.html` 文件中插入 `style` 和 `script` 标签的路径不对，从而找不到静态资源。\n\n### 静态资源找不到的解决方法\n\n需要在 `webpack` 的配置文件中去修改一下 `publicPath` 这个属性，这个属性会影响你的静态资源文件插入到 `index.html` 中的路径。像我这个项目设置 `publicPath: './'`就可以了，具体可以多修改几次多打包几次试试就行了。\n\n## 前端路由\n\n### 前端路由分类\n\n前端路由分为两种实现，一种就是 `hashRouter`，另一种就是用 `H5` 新的 `History API` 实现的 `browserRouter`。由于 `hashRouter` 的路径带一个 `#` 不是特别好看，一般还是用 `browserRouter` 较多。\n\n### 前端路由的问题\n\n前端路由说白了就是路径变了，不去请求服务器，而是用 `js` 去改变页面的方式。这样的话，用 `browserRouter` 的话这里就存在一个问题，我用前端路由跳转到某一个路径下 `/xxx`，这是我刷新页面，这时候就会去服务器上拿资源，这个前端路由路径下肯定找不到资源，所以就会出现 `404` 报错。\n\n### 解决方案\n\n解决页面刷新 `404` 这个问题，只需要把所有的请求全部返回 `index.html`，可以搜索 `history fallback` 这个关键词查看相关资料。\n\n针对我的这个 `nginx` 配置而言，只需要加入 `try_files $uri $uri/ /config/index.html;`,就能把前端路由路径发送给服务器时全部返回 `index.html`，这样就解决了 `404`问题。\n\n## Route路径匹配问题\n\n配置好上述的 `nginx` 以及把打包好的文件放到对应的目录，再把我的 `api` 服务启动，再访问 `192.168.1.240/config` 时，已经能够正常的显示页面，并且接口也能正常代理请求到了。但是涉及到路由的页面却没有被渲染出来。\n\n### Route路径匹配的原因\n\n回想一下，在 `react-router-dom` 的 `Route` 标签里传递一个 `path={'/xx'}` 的属性时，前端路由会根据这个 `path` 来渲染对应的 `Route` 上传递过去的 `Component` 组件。那么在我的 `nginx` 的设置中，我设置的是 `location /config`，也就是说我实际访问路径都是加上了前缀 `/config`，所以每个 `Route` 标签中传过去的路径都因为缺少了 `/config` 前缀导致所以的匹配都不成立，所以 `Route` 的页面都没有办法渲染。\n\n### Route路径匹配修改方法\n\n方法很简单，在 `BrowserRouter` 上加一个 `basename` 的属性，给这属性传递 `config` (*具体是什么值，依据你给 `nginx`设置 `location` 时的前缀，我的例子中是 `config`*)，这样 `Route` 在匹配路径的时候会加上 `basename`，这样就能和对应路径匹配上，然后渲染对应页面。\n\n## 总结\n\n对 `linux` 不熟悉，`nginx` 也不熟悉，依靠着百度，摸爬滚打尝试修改了好多次 `nginx` 配置，终于能够 `react` 打包好的文件部署上去了， `vue` 项目的部署也是没什么区别的。\n\n---\n\n![Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon](前端部署nginx配置/4282315052.jpg)\n\n> Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon 1503-05","slug":"前端部署nginx配置","published":1,"updated":"2018-08-03T05:05:15.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcw9e000hygz7bnntxnhl"},{"title":"四月的清风","date":"2018-08-01T12:04:57.000Z","_content":"\n# 四月的清风\n\n我忍不住地感叹时间的快速流逝，这已经又到了四月份了，啊，时间请慢点走。\n\n## 压力\n\n做一个底层的`js`程序员，虽然表面上看起来没什么压力，可是我的内心总是被无形的压力给压迫着，像是一块重重的石头，压得喘不过气，我知道此时的我不能停下来，憋住气努力去学习。学习是一件持久的事，急躁不得，急躁不得，急躁不得。\n\n## 4.9总结\n\n过完清明节，玩了三天后，整个人好像有点零散了，注意力很难集中去做一件事，也可能是最近没什么项目可以做，有点无头苍蝇一般，不知道去做什么，心里也是因此有点烦躁啊，没有进步就是退步，希望找到一个点，平衡下，潜下心，去做一些事情。\n\n---\n\n![Vincent van Gogh – Old Man in Sorrow](四月的清风/1132638050.jpg)\n\n> Vincent van Gogh – Old Man in Sorrow 1890","source":"_posts/四月的清风.md","raw":"---\ntitle: 四月的清风\ndate: 2018-08-01 20:04:57\ntags:\ncategories: 生活\n---\n\n# 四月的清风\n\n我忍不住地感叹时间的快速流逝，这已经又到了四月份了，啊，时间请慢点走。\n\n## 压力\n\n做一个底层的`js`程序员，虽然表面上看起来没什么压力，可是我的内心总是被无形的压力给压迫着，像是一块重重的石头，压得喘不过气，我知道此时的我不能停下来，憋住气努力去学习。学习是一件持久的事，急躁不得，急躁不得，急躁不得。\n\n## 4.9总结\n\n过完清明节，玩了三天后，整个人好像有点零散了，注意力很难集中去做一件事，也可能是最近没什么项目可以做，有点无头苍蝇一般，不知道去做什么，心里也是因此有点烦躁啊，没有进步就是退步，希望找到一个点，平衡下，潜下心，去做一些事情。\n\n---\n\n![Vincent van Gogh – Old Man in Sorrow](四月的清风/1132638050.jpg)\n\n> Vincent van Gogh – Old Man in Sorrow 1890","slug":"四月的清风","published":1,"updated":"2018-08-02T01:04:23.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcw9h000iygz72uf3k9an"},{"title":"小时候吃的","date":"2018-08-01T12:08:13.000Z","_content":"\n# 小时候吃的\n\n今天在公交车上回家的路上，看着车窗外城市慢慢被黑夜蒙住，街上下班的人来来往往，匆匆忙忙地，大大小小的店铺也都亮起了灯。每一天几乎同样的生活，同样的城市，好\n像什么都没有改变，只有我的年纪不断不断地在增长，有那么一瞬间，我恍惚地想起了小时候吃过的猪脏面。\n\n哈哈，我也不知道为什么突然想起了这个，小时候没什么钱，有太多太多想吃而不舍得吃的东西，长大了，也开始自己打工上班了，虽然钱不多，多少也还是积存了一小部分的钱，但小时候的味道好像很久没吃过了，垃圾街的小吃一条街也吃过几回，真的没有什么好吃的。但是小时候一碗早餐的糯米饭是真的棒啊，还有一碗紫菜汤，我在杭州打工的这段时间也吃过几次，嗯，差得远了。这么简单的糯米饭竟然做的还没有小时候的好吃，我觉得可能不是这家店没做好的原因，也可能人老了，味蕾也退化了，再也没有小时候那种的感觉了，那是种什么感觉呢，碗上的米粒全部吃干净，一粒都不剩，真是喜欢吃啊那个时候。\n\n那个时候竟然隔了那么久了，我现在依然还记得走路去小学时候的样子，在学校拐角的地方，棚子的下面，就是那家常吃的早饭店。我每天都要犹豫犹豫到底是吃糯米饭呢还是炒粉干呢，毕竟都很好吃啊，我的兜里就那么一两块，吃完早饭最多也就剩个五毛钱，那时候的物价真是让人无比的怀念啊！\n\n初中的时候，最喜欢吃的是学校出门左转一百来米的路边，都是卖的垃圾食品，大家也都喜欢中午跑那边吃吃东西，还蛮有想法，来一条两块的饭团，哎，真便宜啊，两块一条的饭团量还挺多啊，我都吃不完，旁边还有炸鸡柳，这个炸鸡柳是真的无敌好吃，我现在有点怀疑是不是加了什么罂粟壳之类的东西，怎么能那么好吃，我偶尔吃一次，，一块五一小杯，有钱人家小孩就会买个两三块钱那个装鸡柳的杯子被压的满满的看的羡慕死了，自己加料，一般也就孜然粉再来点醋，有的人喜欢加半杯醋，真的太可怕啦。\n\n高中，被关着，老实说，很少吃到好吃的东西，这几年基本没有什么特别喜欢吃的东西。\n\n大学，没有被关着，家里不是每个月固定给钱，钱不够就可以用，我没好意思向家里多要，所以也不怎么花钱，所以徐州也没留下什么特别喜欢吃的，前几天烤面筋突然火起来了，烤面筋勉强算的上还不错的廉价小食。\n\n开始打工了，自由了，也有自己的钱了，依然穷人想法，能省则省，攒钱很快乐，偶尔吃吃，和小时候的物价比起来，总感觉好多东西都消失了再也回不来了，就算同样是吃糯米饭好像带给我的感受已经完全没有小时候期待的那种感觉了，毕竟这价格和小时候的一比，根本就是对过去的回忆是一个冲击嘛！\n\n找个什么放假的时候，想找个猪脏粉的店吃一吃。在公交车上的时候查了一下，哟，这价格果然挺高啊，再考虑考虑。\n\n真想带上现在的钱，回到过去对小学拐角处棚子下的早饭店的老板说：\n\n“糯米饭和炒粉干都来一份！”\n\n---\n\n![Vincent van Gogh – Noon Rest from (after Millet)](小时候吃的/1997264555.jpg)\n\n> Vincent van Gogh – Noon Rest from (after Millet) 1890\n","source":"_posts/小时候吃的.md","raw":"---\ntitle: 小时候吃的\ndate: 2018-08-01 20:08:13\ntags:\ncategories: 生活\n---\n\n# 小时候吃的\n\n今天在公交车上回家的路上，看着车窗外城市慢慢被黑夜蒙住，街上下班的人来来往往，匆匆忙忙地，大大小小的店铺也都亮起了灯。每一天几乎同样的生活，同样的城市，好\n像什么都没有改变，只有我的年纪不断不断地在增长，有那么一瞬间，我恍惚地想起了小时候吃过的猪脏面。\n\n哈哈，我也不知道为什么突然想起了这个，小时候没什么钱，有太多太多想吃而不舍得吃的东西，长大了，也开始自己打工上班了，虽然钱不多，多少也还是积存了一小部分的钱，但小时候的味道好像很久没吃过了，垃圾街的小吃一条街也吃过几回，真的没有什么好吃的。但是小时候一碗早餐的糯米饭是真的棒啊，还有一碗紫菜汤，我在杭州打工的这段时间也吃过几次，嗯，差得远了。这么简单的糯米饭竟然做的还没有小时候的好吃，我觉得可能不是这家店没做好的原因，也可能人老了，味蕾也退化了，再也没有小时候那种的感觉了，那是种什么感觉呢，碗上的米粒全部吃干净，一粒都不剩，真是喜欢吃啊那个时候。\n\n那个时候竟然隔了那么久了，我现在依然还记得走路去小学时候的样子，在学校拐角的地方，棚子的下面，就是那家常吃的早饭店。我每天都要犹豫犹豫到底是吃糯米饭呢还是炒粉干呢，毕竟都很好吃啊，我的兜里就那么一两块，吃完早饭最多也就剩个五毛钱，那时候的物价真是让人无比的怀念啊！\n\n初中的时候，最喜欢吃的是学校出门左转一百来米的路边，都是卖的垃圾食品，大家也都喜欢中午跑那边吃吃东西，还蛮有想法，来一条两块的饭团，哎，真便宜啊，两块一条的饭团量还挺多啊，我都吃不完，旁边还有炸鸡柳，这个炸鸡柳是真的无敌好吃，我现在有点怀疑是不是加了什么罂粟壳之类的东西，怎么能那么好吃，我偶尔吃一次，，一块五一小杯，有钱人家小孩就会买个两三块钱那个装鸡柳的杯子被压的满满的看的羡慕死了，自己加料，一般也就孜然粉再来点醋，有的人喜欢加半杯醋，真的太可怕啦。\n\n高中，被关着，老实说，很少吃到好吃的东西，这几年基本没有什么特别喜欢吃的东西。\n\n大学，没有被关着，家里不是每个月固定给钱，钱不够就可以用，我没好意思向家里多要，所以也不怎么花钱，所以徐州也没留下什么特别喜欢吃的，前几天烤面筋突然火起来了，烤面筋勉强算的上还不错的廉价小食。\n\n开始打工了，自由了，也有自己的钱了，依然穷人想法，能省则省，攒钱很快乐，偶尔吃吃，和小时候的物价比起来，总感觉好多东西都消失了再也回不来了，就算同样是吃糯米饭好像带给我的感受已经完全没有小时候期待的那种感觉了，毕竟这价格和小时候的一比，根本就是对过去的回忆是一个冲击嘛！\n\n找个什么放假的时候，想找个猪脏粉的店吃一吃。在公交车上的时候查了一下，哟，这价格果然挺高啊，再考虑考虑。\n\n真想带上现在的钱，回到过去对小学拐角处棚子下的早饭店的老板说：\n\n“糯米饭和炒粉干都来一份！”\n\n---\n\n![Vincent van Gogh – Noon Rest from (after Millet)](小时候吃的/1997264555.jpg)\n\n> Vincent van Gogh – Noon Rest from (after Millet) 1890\n","slug":"小时候吃的","published":1,"updated":"2018-08-02T01:04:23.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcw9l000mygz710oy6zk6"},{"title":"家乡","date":"2018-08-02T01:18:15.000Z","_content":"\n# 家乡\n\n四月的最后两天，五月的前夕，我回到了老家。同样是在外地，上学的时候身边有很多的同学，每个寒暑假也基本都能回家，所以基本上端午、五一这种三天小假我是不会回家的，甚至十一的小长假我也是从来没有回去过。正式上班以后，虽然上班的地方离家乡更近了，可能少了同学陪伴，也可能是人成长了，当然也可能是父母也老了，总之，温州我回来了。\n\n下了高铁，坐上了回家的公交车，窗外的变化的城市给我的感觉是那么的熟悉又特别的陌生，这两年拆迁很疯狂，沿途看到太多处被推平留下大量建筑残渣的空地，也有很多工地开着挖掘机不停的建设着，我知道这座小城在慢慢地改变，以后我可能就认不出来这就是我的家乡了。我的家也在去年的年底被拆除了，在四月的最后一天我去了曾经生活了二十余年的地方，原本高高矮矮建筑丛生的城中村，已经基本全部被推平了，我曾经住着的房子已经没了，道路也被石头砖头杂乱的放置，认不出来了，哎，真的认不出来了。而此刻的我，已经没有了家。曾经许诺给我迎接新娘的房子已经不在了。想起了*雷子*的[家乡](http://www.kugou.com/song/#hash=CA4FB3923F4F1DD4F369B9FBA9D145C7&album_id=8439437):\n\n---\n\n我的家乡 越来越年轻\n\n就像一件俗气的衣裳\n\n越来越老的不止 爸爸的脸庞\n\n擦干那扇\n\n蒙着雾的车窗\n\n我清晰地望着陌生的家乡\n\n流失的岁月被冲抹\n\n一切都变了\n\n---\n\n回去看了住在老人房的爷爷奶奶，他们老一本的人生活很艰苦，本该退休享受生活却依然在打着给着很少钱的小零工。生活一直很艰难，我知道，平时一顿吃饭的钱可以够他们生活很久。生活不易，生活真的不容易啊。\n\n城市越来越年轻，而人却慢慢地开始变老了。\n\n---\n\n![Johannes Vermeer – View of Delft](家乡/1762221382.jpg)\n\n> Johannes Vermeer – View of Delft 1660-61\n","source":"_posts/家乡.md","raw":"---\ntitle: 家乡\ndate: 2018-08-02 09:18:15\ntags:\ncategories: 生活\n---\n\n# 家乡\n\n四月的最后两天，五月的前夕，我回到了老家。同样是在外地，上学的时候身边有很多的同学，每个寒暑假也基本都能回家，所以基本上端午、五一这种三天小假我是不会回家的，甚至十一的小长假我也是从来没有回去过。正式上班以后，虽然上班的地方离家乡更近了，可能少了同学陪伴，也可能是人成长了，当然也可能是父母也老了，总之，温州我回来了。\n\n下了高铁，坐上了回家的公交车，窗外的变化的城市给我的感觉是那么的熟悉又特别的陌生，这两年拆迁很疯狂，沿途看到太多处被推平留下大量建筑残渣的空地，也有很多工地开着挖掘机不停的建设着，我知道这座小城在慢慢地改变，以后我可能就认不出来这就是我的家乡了。我的家也在去年的年底被拆除了，在四月的最后一天我去了曾经生活了二十余年的地方，原本高高矮矮建筑丛生的城中村，已经基本全部被推平了，我曾经住着的房子已经没了，道路也被石头砖头杂乱的放置，认不出来了，哎，真的认不出来了。而此刻的我，已经没有了家。曾经许诺给我迎接新娘的房子已经不在了。想起了*雷子*的[家乡](http://www.kugou.com/song/#hash=CA4FB3923F4F1DD4F369B9FBA9D145C7&album_id=8439437):\n\n---\n\n我的家乡 越来越年轻\n\n就像一件俗气的衣裳\n\n越来越老的不止 爸爸的脸庞\n\n擦干那扇\n\n蒙着雾的车窗\n\n我清晰地望着陌生的家乡\n\n流失的岁月被冲抹\n\n一切都变了\n\n---\n\n回去看了住在老人房的爷爷奶奶，他们老一本的人生活很艰苦，本该退休享受生活却依然在打着给着很少钱的小零工。生活一直很艰难，我知道，平时一顿吃饭的钱可以够他们生活很久。生活不易，生活真的不容易啊。\n\n城市越来越年轻，而人却慢慢地开始变老了。\n\n---\n\n![Johannes Vermeer – View of Delft](家乡/1762221382.jpg)\n\n> Johannes Vermeer – View of Delft 1660-61\n","slug":"家乡","published":1,"updated":"2018-08-02T01:19:25.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcw9p000oygz70xgot88g"},{"title":"牢骚","date":"2018-08-02T01:19:49.000Z","_content":"\n# 牢骚\n\n最近筹备挺久的一场面试，在昨天2018/6/4晚上终于结束了，虽然结果目前不清楚，但是自己感觉面试过程不太顺利，大概率是失败了。面完出来，外面下着小雨，狼狈地跑向公交站台，心里想法也很多，有一些失落。从一开始准备到真正面试其实时间挺长的，前后大概经过了一个来月，这一个月挺有压迫感的，虽然结果可能不如意。\n\n其实回想起来，我的一路走来虽然不是特别的坎坎坷坷波折起伏，但总归不是特别顺利。成长其实是在不断地在选择中继续选择，我也很多次试图去回想如果当初没有做出这样的选择，现在的我应该是个什么样的境地。想多了也没有什么用，只是会不断地让自己变得消极不乐观。有时候我也会去想我是幸运的，我应该承认，大学同学室友们毕业出来工作也都是坎坷满满，所以大部分的人都不是一帆风顺的，我也没必要自怨自艾。\n\n>这个世界会好吗？\n\n我想会的。\n\n---\n\n![Johannes Vermeer – Officer and Laughing Girl](牢骚/431359834.jpg)\n\n> Johannes Vermeer – Officer and Laughing Girl 1655-60\n","source":"_posts/牢骚.md","raw":"---\ntitle: 牢骚\ndate: 2018-08-02 09:19:49\ntags:\ncategories: 生活\n---\n\n# 牢骚\n\n最近筹备挺久的一场面试，在昨天2018/6/4晚上终于结束了，虽然结果目前不清楚，但是自己感觉面试过程不太顺利，大概率是失败了。面完出来，外面下着小雨，狼狈地跑向公交站台，心里想法也很多，有一些失落。从一开始准备到真正面试其实时间挺长的，前后大概经过了一个来月，这一个月挺有压迫感的，虽然结果可能不如意。\n\n其实回想起来，我的一路走来虽然不是特别的坎坎坷坷波折起伏，但总归不是特别顺利。成长其实是在不断地在选择中继续选择，我也很多次试图去回想如果当初没有做出这样的选择，现在的我应该是个什么样的境地。想多了也没有什么用，只是会不断地让自己变得消极不乐观。有时候我也会去想我是幸运的，我应该承认，大学同学室友们毕业出来工作也都是坎坷满满，所以大部分的人都不是一帆风顺的，我也没必要自怨自艾。\n\n>这个世界会好吗？\n\n我想会的。\n\n---\n\n![Johannes Vermeer – Officer and Laughing Girl](牢骚/431359834.jpg)\n\n> Johannes Vermeer – Officer and Laughing Girl 1655-60\n","slug":"牢骚","published":1,"updated":"2018-08-02T01:20:30.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcw9t000sygz7y4amuvzn"},{"title":"看到的面试题","date":"2018-08-03T01:35:15.000Z","_content":"\n# 看到的面试题\n\n## 1. 一个函数a接受一个整数参数b，返回[1,4,6,14,26,54...],长度为b\n\n规律：`currentValue`为当前值，`index`为当前索引值,`nextValue`为下一个值，`nextValue`为`currentValue * 2 然后根据index奇偶性加减2`\n\n```js\nconst a = (b) => {\n    const arr = new Array(b).fill(0)\n    arr.reduce((accu,val,index,arr) => {\n        arr[index] = accu\n        accu = arr[index] * 2 + (index % 2 === 0 ? 2 : -2)\n        return accu\n    },1)\n    return arr\n}\n```\n\n以为简单，依然还是有坑，稍微总结一下，`reduce`方法是数组操作比较万能的方法，也比较简洁，中途遇到最大的一个问题是`new Array()`出来的数组是空的，空数组进不到`reduce`里面\n\n## 2. 设计一个函数a，可以让a这样执行：`a(() => console.log(1)).a(() => {console.log(2)})(() => {console.log(3)})`;输出213，如果这样执行`a(() => {console.log(1)})(() => {console.log(2)}).a(() => {console.log(3)})`;输出321；（考察**函数返回值**、**队列**、**构造函数**的理解）\n\n```js\na(() => {\n    console.log(1)\n}).a(() => {\n    console.log(2)\n})(() => {\n    console.log(3)\n})\n\n// a(1).a(2)(3)\n//output 213\n```\n\n```js\na(() => {\n    console.log(1)\n    })(() => {\n        console.log(2)\n        }).a(() => {\n            console.log(3)\n            })\n// a(1)(2).a(3)\n// output 321\n```\n\n* `a函数`可以接受一个`function`做为参数\n\n```js\n//这是大概想像a可能是这样的\nfunction a(func){\n    func()\n}\n```\n\n* 执行完`a`函数可以继续调用`a`函数\n\n```js\n//假想可能返回了this\nfunction a(func){\n    func()\n    return this\n}\n```\n\n* 返回值能够继续传入参数，说明返回值是个`方法`，返回`this`应该不对,并且这个方法上有自身的引用\n\n```js\nfunction a(func){\n    a.a = a\n    func()\n    return a\n}\n```\n\n* 这样子就有问题了，虽然能满足不报错，但是输出值的顺序不对，全是顺序输出,并且`a.a = a`这种方式不好，所以加入`b函数`\n\n```js\nfunction a(func){\n    var b = function(){\n\n    }\n\n    func()\n\n    b.a = a\n\n    return b\n}\n```\n\n* 这样还是没有解决数序的问题，但是从`a`本身剥离出一个`b`\n\n```js\n//a(1)._a(2)(3)  -> 213\n//a(1)(2)._a(3)  -> 321\nfunction a(func){\n    var b = function(b_func){\n        b_func()\n        return b\n    }\n\n    b._a = function(_func){\n        _func()\n        b(func)\n        return b\n    }\n\n    return b\n}\n```\n\n结果不对，还得再看看\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Ninth Wave](看到的面试题/713080393.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Ninth Wave 1850","source":"_posts/看到的面试题.md","raw":"---\ntitle: 看到的面试题\ndate: 2018-08-03 09:35:15\ntags:\n  - 面试\n  - 题目\ncategories: 前端\n---\n\n# 看到的面试题\n\n## 1. 一个函数a接受一个整数参数b，返回[1,4,6,14,26,54...],长度为b\n\n规律：`currentValue`为当前值，`index`为当前索引值,`nextValue`为下一个值，`nextValue`为`currentValue * 2 然后根据index奇偶性加减2`\n\n```js\nconst a = (b) => {\n    const arr = new Array(b).fill(0)\n    arr.reduce((accu,val,index,arr) => {\n        arr[index] = accu\n        accu = arr[index] * 2 + (index % 2 === 0 ? 2 : -2)\n        return accu\n    },1)\n    return arr\n}\n```\n\n以为简单，依然还是有坑，稍微总结一下，`reduce`方法是数组操作比较万能的方法，也比较简洁，中途遇到最大的一个问题是`new Array()`出来的数组是空的，空数组进不到`reduce`里面\n\n## 2. 设计一个函数a，可以让a这样执行：`a(() => console.log(1)).a(() => {console.log(2)})(() => {console.log(3)})`;输出213，如果这样执行`a(() => {console.log(1)})(() => {console.log(2)}).a(() => {console.log(3)})`;输出321；（考察**函数返回值**、**队列**、**构造函数**的理解）\n\n```js\na(() => {\n    console.log(1)\n}).a(() => {\n    console.log(2)\n})(() => {\n    console.log(3)\n})\n\n// a(1).a(2)(3)\n//output 213\n```\n\n```js\na(() => {\n    console.log(1)\n    })(() => {\n        console.log(2)\n        }).a(() => {\n            console.log(3)\n            })\n// a(1)(2).a(3)\n// output 321\n```\n\n* `a函数`可以接受一个`function`做为参数\n\n```js\n//这是大概想像a可能是这样的\nfunction a(func){\n    func()\n}\n```\n\n* 执行完`a`函数可以继续调用`a`函数\n\n```js\n//假想可能返回了this\nfunction a(func){\n    func()\n    return this\n}\n```\n\n* 返回值能够继续传入参数，说明返回值是个`方法`，返回`this`应该不对,并且这个方法上有自身的引用\n\n```js\nfunction a(func){\n    a.a = a\n    func()\n    return a\n}\n```\n\n* 这样子就有问题了，虽然能满足不报错，但是输出值的顺序不对，全是顺序输出,并且`a.a = a`这种方式不好，所以加入`b函数`\n\n```js\nfunction a(func){\n    var b = function(){\n\n    }\n\n    func()\n\n    b.a = a\n\n    return b\n}\n```\n\n* 这样还是没有解决数序的问题，但是从`a`本身剥离出一个`b`\n\n```js\n//a(1)._a(2)(3)  -> 213\n//a(1)(2)._a(3)  -> 321\nfunction a(func){\n    var b = function(b_func){\n        b_func()\n        return b\n    }\n\n    b._a = function(_func){\n        _func()\n        b(func)\n        return b\n    }\n\n    return b\n}\n```\n\n结果不对，还得再看看\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Ninth Wave](看到的面试题/713080393.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Ninth Wave 1850","slug":"看到的面试题","published":1,"updated":"2018-08-03T01:36:23.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcw9w000vygz7q5lfxrak"},{"title":"绕不开的promise","date":"2018-08-02T01:21:44.000Z","_content":"\n# 绕不开的promise\n\njs这玩意儿的异步处理真的是让人头疼的一个东西，回调函数这种处理方式写稍微多一点的逻辑就整个人都被绕进去了，所以嘛，业界也就搞出乱七八糟的方案，一套一套的，好在es6也接受业界的一些做法，比如就把promise、async这种异步的处理方案搞进规范了。async也离不开promise，所以深入理解promise对现代化处理异步编程很有帮助。\n\n> 所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。\n\nPromise在用起来的时候就是`new Promise((resolve,reject) => {})`,看到出来这个玩意就是一个构造函数嘛，哟，还挺奇怪，这个构造函数竟然还接受一个函数当作参数，传入的这个函数又有两个固定的参数`resolve`、`reject`，这两个参数也是两个方法。\n\nPromise的两个特点：\n\n1. 对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。\n\n2. 一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n\n## 怎么用\n\n就是`new`一个`Promise`实例出来，用这个实例的`then`方法搞。\n\n```js\nconst promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n```\n\n### Promise.prototype.then()\n\n> Promise 实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。\n\nthen方法很重要，甚至可以继续返回一个promise链式调用\n\n```js\ngetJSON(\"/post/1.json\").then(\n  post => getJSON(post.commentURL)\n).then(\n  comments => console.log(\"resolved: \", comments),\n  err => console.log(\"rejected: \", err)\n);\n```\n\n### Promise.prototype.catch()\n\n`promise`的异常捕获是个难点，重点掌握。\n\n> `Promise.prototype.catch`方法是`.then(null, rejection)`的别名，用于指定发生错误时的回调函数,这就说明catch也和then一样返回一个promise，可以继续then和catch。\n\n```js\np.then((val) => console.log('fulfilled:', val))\n  .catch((err) => console.log('rejected', err));\n\n// 等同于\np.then((val) => console.log('fulfilled:', val))\n  .then(null, (err) => console.log(\"rejected:\", err));\n```\n\n如果该对象状态变为`resolved`，则会调用`then`方法指定的回调函数；如果异步操作抛出错误，状态就会变为`rejected`，就会调用`catch`方法指定的回调函数，处理这个错误。**另外，then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获**\n\n```js\n// 写法一\nconst promise = new Promise(function(resolve, reject) {\n  try {\n    throw new Error('test');\n  } catch(e) {\n    reject(e);\n  }\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n\n// 写法二\nconst promise = new Promise(function(resolve, reject) {\n  reject(new Error('test'));\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n```\n\n这两种写法相同，reject相当于抛出异常，然后让catch捕获。\n**如果 Promise 状态已经变成resolved，再抛出错误是无效的。**\n\n```js\nconst promise = new Promise(function(resolve, reject) {\n  resolve('ok');\n  throw new Error('test');\n});\npromise\n  .then(function(value) { console.log(value) })\n  .catch(function(error) { console.log(error) });\n// ok\n```\n\n上面代码中，`Promise` 在`resolve`语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 `Promise` 的状态一旦改变，就永久保持该状态，不会再变了。\n\n`Promise`对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个`catch`语句捕获。\n**所以一般在最后面加上一个`catch`就够了，没必要在每个`then`方法里面传入第二个捕获错误的参数，`then就只要处理成功的情况就行**\n\n> **Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”**\n\n所以在`node`中`process`有个`unhandleRejection`专门来捕获这种`promise`中没有捕获的异常\n\n```js\nprocess.on('unhandledRejection', function (err, p) {\n  throw err;\n});\n```\n\n### Promise.prototype.finally()\n\n`finally`方法用于指定不管 `Promise` 对象最后状态如何，都会执行的操作。\nfinally本质上是then方法的特例，实际上就是简化了成功和失败共同要做的事情。\n\n```js\npromise\n.finally(() => {\n  // 语句\n});\n\n// 等同于\npromise\n.then(\n  result => {\n    // 语句\n    return result;\n  },\n  error => {\n    // 语句\n    throw error;\n  }\n);\n```\n\n### Promise.all()\n\n`Promise.all`方法用于将多个 `Promise` 实例，包装成一个新的 `Promise` 实例。\n\n```js\nconst p = Promise.all([p1, p2, p3]);\n```\n\n1. `p1`、`p2`、`p3`全部成功后，`p1`、`p2`、`p3`的返回值组成一个数组传给P的回调\n2. 其中一个失败，就把失败的reject传给P的失败回调\n\n同样这里也存在异常的处理情况，**作为参数的promise自己定义了catch方法，则如果出现异常外层的promise不能捕获到**\n\n### Promise.race()\n\n和Promise.all差不多\n\n```js\nconst p = Promise.race([p1, p2, p3]);\n```\n\n上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。\n\n### Promise.resolve()\n\n有时需要将现有对象转为 Promise 对象，Promise.resolve方法就起到这个作用。\n\n```js\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n```\n\n需要注意的是，立即resolve的 Promise 对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。\n\n```js\nsetTimeout(function () {\n  console.log('three');\n}, 0);\n\nPromise.resolve().then(function () {\n  console.log('two');\n});\n\nconsole.log('one');\n\n// one\n// two\n// three\n```\n\n上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log('one')则是立即执行，因此最先输出。\n\n这种用处不多，倒是这种类型面试题不少。\n\n### Promise.reject()\n\n和Promise.resolve()差不多。\n\n### Promise.try()\n\n不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误\n\n[参考文献](https://juejin.im/post/5ab20c58f265da23a228fe0f?utm_source=gold_browser_extension)\n\n---\n\n![Johannes Vermeer – The Milkmaid](绕不开的promise/1012308194.jpg)\n\n> Johannes Vermeer – The Milkmaid 1658-61","source":"_posts/绕不开的promise.md","raw":"---\ntitle: 绕不开的promise\ndate: 2018-08-02 09:21:44\ntags:\n  - promise\ncategories: 前端\n---\n\n# 绕不开的promise\n\njs这玩意儿的异步处理真的是让人头疼的一个东西，回调函数这种处理方式写稍微多一点的逻辑就整个人都被绕进去了，所以嘛，业界也就搞出乱七八糟的方案，一套一套的，好在es6也接受业界的一些做法，比如就把promise、async这种异步的处理方案搞进规范了。async也离不开promise，所以深入理解promise对现代化处理异步编程很有帮助。\n\n> 所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。\n\nPromise在用起来的时候就是`new Promise((resolve,reject) => {})`,看到出来这个玩意就是一个构造函数嘛，哟，还挺奇怪，这个构造函数竟然还接受一个函数当作参数，传入的这个函数又有两个固定的参数`resolve`、`reject`，这两个参数也是两个方法。\n\nPromise的两个特点：\n\n1. 对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。\n\n2. 一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n\n## 怎么用\n\n就是`new`一个`Promise`实例出来，用这个实例的`then`方法搞。\n\n```js\nconst promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n```\n\n### Promise.prototype.then()\n\n> Promise 实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。\n\nthen方法很重要，甚至可以继续返回一个promise链式调用\n\n```js\ngetJSON(\"/post/1.json\").then(\n  post => getJSON(post.commentURL)\n).then(\n  comments => console.log(\"resolved: \", comments),\n  err => console.log(\"rejected: \", err)\n);\n```\n\n### Promise.prototype.catch()\n\n`promise`的异常捕获是个难点，重点掌握。\n\n> `Promise.prototype.catch`方法是`.then(null, rejection)`的别名，用于指定发生错误时的回调函数,这就说明catch也和then一样返回一个promise，可以继续then和catch。\n\n```js\np.then((val) => console.log('fulfilled:', val))\n  .catch((err) => console.log('rejected', err));\n\n// 等同于\np.then((val) => console.log('fulfilled:', val))\n  .then(null, (err) => console.log(\"rejected:\", err));\n```\n\n如果该对象状态变为`resolved`，则会调用`then`方法指定的回调函数；如果异步操作抛出错误，状态就会变为`rejected`，就会调用`catch`方法指定的回调函数，处理这个错误。**另外，then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获**\n\n```js\n// 写法一\nconst promise = new Promise(function(resolve, reject) {\n  try {\n    throw new Error('test');\n  } catch(e) {\n    reject(e);\n  }\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n\n// 写法二\nconst promise = new Promise(function(resolve, reject) {\n  reject(new Error('test'));\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n```\n\n这两种写法相同，reject相当于抛出异常，然后让catch捕获。\n**如果 Promise 状态已经变成resolved，再抛出错误是无效的。**\n\n```js\nconst promise = new Promise(function(resolve, reject) {\n  resolve('ok');\n  throw new Error('test');\n});\npromise\n  .then(function(value) { console.log(value) })\n  .catch(function(error) { console.log(error) });\n// ok\n```\n\n上面代码中，`Promise` 在`resolve`语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 `Promise` 的状态一旦改变，就永久保持该状态，不会再变了。\n\n`Promise`对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个`catch`语句捕获。\n**所以一般在最后面加上一个`catch`就够了，没必要在每个`then`方法里面传入第二个捕获错误的参数，`then就只要处理成功的情况就行**\n\n> **Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”**\n\n所以在`node`中`process`有个`unhandleRejection`专门来捕获这种`promise`中没有捕获的异常\n\n```js\nprocess.on('unhandledRejection', function (err, p) {\n  throw err;\n});\n```\n\n### Promise.prototype.finally()\n\n`finally`方法用于指定不管 `Promise` 对象最后状态如何，都会执行的操作。\nfinally本质上是then方法的特例，实际上就是简化了成功和失败共同要做的事情。\n\n```js\npromise\n.finally(() => {\n  // 语句\n});\n\n// 等同于\npromise\n.then(\n  result => {\n    // 语句\n    return result;\n  },\n  error => {\n    // 语句\n    throw error;\n  }\n);\n```\n\n### Promise.all()\n\n`Promise.all`方法用于将多个 `Promise` 实例，包装成一个新的 `Promise` 实例。\n\n```js\nconst p = Promise.all([p1, p2, p3]);\n```\n\n1. `p1`、`p2`、`p3`全部成功后，`p1`、`p2`、`p3`的返回值组成一个数组传给P的回调\n2. 其中一个失败，就把失败的reject传给P的失败回调\n\n同样这里也存在异常的处理情况，**作为参数的promise自己定义了catch方法，则如果出现异常外层的promise不能捕获到**\n\n### Promise.race()\n\n和Promise.all差不多\n\n```js\nconst p = Promise.race([p1, p2, p3]);\n```\n\n上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。\n\n### Promise.resolve()\n\n有时需要将现有对象转为 Promise 对象，Promise.resolve方法就起到这个作用。\n\n```js\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n```\n\n需要注意的是，立即resolve的 Promise 对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。\n\n```js\nsetTimeout(function () {\n  console.log('three');\n}, 0);\n\nPromise.resolve().then(function () {\n  console.log('two');\n});\n\nconsole.log('one');\n\n// one\n// two\n// three\n```\n\n上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log('one')则是立即执行，因此最先输出。\n\n这种用处不多，倒是这种类型面试题不少。\n\n### Promise.reject()\n\n和Promise.resolve()差不多。\n\n### Promise.try()\n\n不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误\n\n[参考文献](https://juejin.im/post/5ab20c58f265da23a228fe0f?utm_source=gold_browser_extension)\n\n---\n\n![Johannes Vermeer – The Milkmaid](绕不开的promise/1012308194.jpg)\n\n> Johannes Vermeer – The Milkmaid 1658-61","slug":"绕不开的promise","published":1,"updated":"2018-08-02T01:23:26.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcw9y000zygz7n0651fp5"},{"title":"redux之createStore","date":"2018-08-03T05:00:20.000Z","_content":"\n# redux之createStore\n\n回顾一下 `redux` 的目录结构:\n\n.\\REDUX\\SRC\n│  applyMiddleware.js\n│  bindActionCreators.js\n│  combineReducers.js\n│  compose.js\n│  createStore.js\n│  index.js\n│\n└─utils\n        actionTypes.js\n        isPlainObject.js\n        warning.js\n\n`redux` 在 `index.js` 中一共暴露了5个 `API`, 上一篇文章讲了下和 `redux` 关联性不太大的 `compose` 。现在正式讲一讲最核心的 `createStore`。\n\n## createStore.js\n\n`createStore` 大概是长成这个样子的：\n\n```js\nimport $$observable from 'symbol-observable'\n\nimport ActionTypes from './utils/actionTypes'\nimport isPlainObject from './utils/isPlainObject'\n\nexport default function createStore(reducer, preloadedState, enhancer) {\n\n    // 1. 对传入参数的顺序处理\n    // 先忽略这一块\n\n    // 2. 变量的定义\n    let currentReducer = reducer\n    let currentState = preloadedState\n    let currentListeners = []\n    let nextListeners = currentListeners\n    let isDispatching = false\n\n    // 3. 一系列函数定义\n    function ensuerCanMutateNextListeners(){}\n\n    function getState(){}\n\n    function subscribe(listener){}\n\n    function dispatch(action){}\n\n    function replaceReducer(nextReducer){}\n\n    function observable(){}\n\n    // 4. dispatch一个初始化的action\n    dispatch({ type: ActionTypes.INIT })\n\n    // 5. 返回store对象\n    return {\n        dispatch,\n        subscribe,\n        getState,\n        replaceReducer,\n        [$$observable]: observable\n    }\n}\n```\n\n我们分别对这五块来看看。\n\n### 1. 参数的顺序处理\n\n这一步就是对传入给 `createStore` 的三个参数 `reducer` 、 `preloadedState` 、 `enhancer` 的顺序调整。\n\n```js\nexport default function createStore(reducer, preloadedState, enhancer) {\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    // 第二个参数是一个函数，没有第三个参数的情况\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n        // enhancer 不是函数就报错\n      throw new Error('Expected the enhancer to be a function.')\n    }\n    // enhancer就是高阶函数，强化了本身这个createStore的函数，拿到增强后的createStore函数去处理\n    // applyMiddleware这个函数还会涉及到这个\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n\n  if (typeof reducer !== 'function') {\n      // reducer不是函数报错\n    throw new Error('Expected the reducer to be a function.')\n  }\n\n  // 其他代码省略\n}\n```\n\n### 2. 变量的定义\n\n```js\n  let currentReducer = reducer\n  let currentState = preloadedState\n  let currentListeners = []\n  let nextListeners = currentListeners\n  let isDispatching = false\n```\n\n- `currentReducer` 当前 `store` 的 `reducer`，由 `createStore` 传入的第一个参数 `reducer` 初始化\n- `currentState` 保存当前整个 `state` 的状态,初始值就是 `createStore` 传进来的第二个参数 `preloadedState`,相当于 `store` 的初始值\n- `currentListeners` 当前的监听器，默认是空\n- `nextListeners` 下一个监听器，由 `currentListeners` 赋值\n- `isDispatching` 当前的 `store` 是否正在 `dispatch` 一个action\n\n全是闭包保存的变量\n\n### 3. 函数的定义\n\n在 `createStore` 的最后，`dispatch` 了一个 `{ type: ActionTypes.INIT }` 对象，那就按图索骥，从 `dispatch` 函数开始看。\n\n先把 `./utils` 下的三个辅助函数(`actionTypes` 、 `isPlainObject` 、`warning`)看一下：\n\nactionTypes:\n\n```js\nconst randomString = () =>\n  Math.random()\n    .toString(36)\n    .substring(7)\n    .split('')\n    .join('.')\n\nconst ActionTypes = {\n  INIT: `@@redux/INIT${randomString()}`,\n  REPLACE: `@@redux/REPLACE${randomString()}`,\n  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`\n}\n\nexport default ActionTypes\n```\n\n这里返回的都是随机的 `action.type`,为了区别常规业务开发写的 `action.type`，比如：`ActionTypes.INIT` 拿到的是一个类似与 `@@redux/INITg.f.m.0.0.4` 随机字符串,只有这样奇奇怪怪的随机数才不会和业务中定义的 `reducer` 所判断的 `type` 重复。\n\n---\n\nisPlainObject:\n\n判断函数是否是纯对象，`[1,23]`、`new Date()`这些都会返回 `false`。\n\n```js\nexport default function isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false\n\n  let proto = obj\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto)\n  }\n\n  return Object.getPrototypeOf(obj) === proto\n}\n```\n\n---\n\nwarning:\n\n就是一个报错函数\n\n```js\nexport default function warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message)\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message)\n  } catch (e) {} // eslint-disable-line no-empty\n}\n```\n\n#### dispatch\n\n`dispatch` 用过 `redux` 的都知道，这就是派发 `action` 的函数，把派发出去的 `action` 交由 `reducer` 处理。\n\n```js\nfunction dispatch(action) {\n    if (!isPlainObject(action)) {\n        // action不是纯对象报错\n      throw new Error(\n        'Actions must be plain objects. ' +\n          'Use custom middleware for async actions.'\n      )\n    }\n\n    if (typeof action.type === 'undefined') {\n        // action没有type属性也报错\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. ' +\n          'Have you misspelled a constant?'\n      )\n    }\n\n    if (isDispatching) {\n        // 这个store正在dispach别的action的时候不能再dispatch另外一个action\n      throw new Error('Reducers may not dispatch actions.')\n    }\n\n    try {\n        // 当前state和action交由当前的reducer处理\n        // 同时改变isDispatching 为 true 表明正在处理action中，不能dispatch新的action了\n      isDispatching = true\n      currentState = currentReducer(currentState, action)\n    } finally {\n        // 修改为 false ，可以dispatch新的action\n      isDispatching = false\n    }\n\n    // 赋值，最终 listeners 、 currentListeners 、nextListeners的值都是 nextListeners\n    const listeners = (currentListeners = nextListeners)\n    for (let i = 0; i < listeners.length; i++) {\n        // 遍历调用监听的函数\n      const listener = listeners[i]\n      listener()\n    }\n    // 返回这个action, 没什么作用\n    return action\n}\n```\n\n核心代码就是 `currentState = currentReducer(currentState, action)`，传入 `currentState`、`action` 给 `currentReducer`，`currentReducer` 把返回值赋值给了 `currentState`。\n\n#### subscribe\n\n订阅监听器。\n\n```js\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n        // 不给函数就报错\n      throw new Error('Expected the listener to be a function.')\n    }\n\n    if (isDispatching) {\n        // 正在dispatch一个store的时候是不能订阅监听器的\n      throw new Error(\n        'You may not call store.subscribe() while the reducer is executing. ' +\n          'If you would like to be notified after the store has been updated, subscribe from a ' +\n          'component and invoke store.getState() in the callback to access the latest state. ' +\n          'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'\n      )\n    }\n\n    // 给unsubscribe调用解除订阅标识\n    let isSubscribed = true\n\n    // 下面解释为什么要调用这个ensureCanMutateNextListeners函数\n    ensureCanMutateNextListeners()\n    // 就是简单的把传入的listeners放到nextListeners\n    nextListeners.push(listener)\n\n    // 返回一个解除订阅的函数\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return\n      }\n\n      if (isDispatching) {\n        throw new Error(\n          'You may not unsubscribe from a store listener while the reducer is executing. ' +\n            'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'\n        )\n      }\n\n      isSubscribed = false\n\n      ensureCanMutateNextListeners()\n      const index = nextListeners.indexOf(listener)\n      // 从 nextListeners 数组中移除\n      nextListeners.splice(index, 1)\n    }\n  }\n```\n\n订阅没什么问题，就是为啥用调用 `ensureCanMutateNextListeners` 呢？\n看一下这个函数：\n\n```js\n function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice()\n    }\n  }\n```\n\n这个函数就是检查 `nextListeners` 和 `currentListeners` 是否是相同的，如果是相同的就把 `currentListeners` 拷贝一个新的赋值给`nextListeners`。因为数组是引用类型的关系，如果 `nextListeners` 和 `currentListeners` 相同，像 `nextListeners` 中 `push` 新的 `listener` 的时候会直接影响到 `currentListeners` 的值。\n\n注意到另外一点，在 `dispatch` 函数的最后遍历 `listeners` 的时候，是这样操作的： `const listeners = (currentListeners = nextListeners)`，这里 `nextListeners` 和 `currentListeners` 就相同了。\n\n那么为啥内部需要有 `currentListeners` 和 `nextListeners`，主要是**通知订阅者的过程中发生了其他的订阅(`subscribe`)和退订(`unsubscribe`),那肯定会发生错误或者不确定性。**\n\n这里有[一篇文章](https://segmentfault.com/a/1190000010263353)论述到这个问题。\n\n#### getState\n\n简单的把 `store` 的 `currentState` 返回出来。\n\n```js\n  function getState() {\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.getState() while the reducer is executing. ' +\n          'The reducer has already received the state as an argument. ' +\n          'Pass it down from the top reducer instead of reading it from the store.'\n      )\n    }\n\n    return currentState\n  }\n```\n\n#### replaceReducer\n\n这个 `API` 帮你替换把原来的 `reducer` 替换成新的 `reducer`。\n\n```js\n function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.')\n    }\n\n    // nextReducer替换旧的reducer\n    currentReducer = nextReducer\n    // 注意这里也dispatch了一个随机action，和createStore的最后dispatch一个随机的初始化action功能是相同的，都是了初始化state\n    dispatch({ type: ActionTypes.REPLACE })\n  }\n```\n\n#### observable\n\n不懂，还是贴一下代码：\n\n```js\n  function observable() {\n    const outerSubscribe = subscribe\n    return {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.')\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState())\n          }\n        }\n\n        observeState()\n        const unsubscribe = outerSubscribe(observeState)\n        return { unsubscribe }\n      },\n\n      [$$observable]() {\n        return this\n      }\n    }\n  }\n```\n\n### 4. dispatch一个初始化的action\n\n```js\ndispatch({ type: ActionTypes.INIT })\n```\n\n在最后，`dispatch` 了一个 `type` 为随机值的 `action`， 我们业务的 `reducer` 中最后没有匹配到对用的 `action.type` 都会默认返回默认的 `state`, 而这个默认的 `state` 往往又在 `reducer` 函数最开始写的时候已经给好了默认值,这样 `dispatch` 的 `action` 与任何 `reducer` 都不匹配,所以拿到了所有 `reducer` 的默认值从而 `currentState` 就被更新成了 `reducer` 定义过的默认值。\n\n### 5. 返回的store对象\n\n把定义好的方法挂载到一个对象上面，这个对象就是 `store` 对象。\n\n```js\nreturn {\n    dispatch,\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  }\n```\n\n## 总结\n\n`redux` 的代码是真的简洁，代码的注释甚至比代码本身还要长，还是非常值得阅读的。\n\n---\n\n![Edvard Munch – Calvary](redux之createStore/565924812.jpg)\n\n> Edvard Munch – Calvary 1900\n","source":"_posts/redux之createStore.md","raw":"---\ntitle: redux之createStore\ndate: 2018-08-03 13:00:20\ntags:\n  - redux\n  - react\n  - 源码\ncategories: 前端\n---\n\n# redux之createStore\n\n回顾一下 `redux` 的目录结构:\n\n.\\REDUX\\SRC\n│  applyMiddleware.js\n│  bindActionCreators.js\n│  combineReducers.js\n│  compose.js\n│  createStore.js\n│  index.js\n│\n└─utils\n        actionTypes.js\n        isPlainObject.js\n        warning.js\n\n`redux` 在 `index.js` 中一共暴露了5个 `API`, 上一篇文章讲了下和 `redux` 关联性不太大的 `compose` 。现在正式讲一讲最核心的 `createStore`。\n\n## createStore.js\n\n`createStore` 大概是长成这个样子的：\n\n```js\nimport $$observable from 'symbol-observable'\n\nimport ActionTypes from './utils/actionTypes'\nimport isPlainObject from './utils/isPlainObject'\n\nexport default function createStore(reducer, preloadedState, enhancer) {\n\n    // 1. 对传入参数的顺序处理\n    // 先忽略这一块\n\n    // 2. 变量的定义\n    let currentReducer = reducer\n    let currentState = preloadedState\n    let currentListeners = []\n    let nextListeners = currentListeners\n    let isDispatching = false\n\n    // 3. 一系列函数定义\n    function ensuerCanMutateNextListeners(){}\n\n    function getState(){}\n\n    function subscribe(listener){}\n\n    function dispatch(action){}\n\n    function replaceReducer(nextReducer){}\n\n    function observable(){}\n\n    // 4. dispatch一个初始化的action\n    dispatch({ type: ActionTypes.INIT })\n\n    // 5. 返回store对象\n    return {\n        dispatch,\n        subscribe,\n        getState,\n        replaceReducer,\n        [$$observable]: observable\n    }\n}\n```\n\n我们分别对这五块来看看。\n\n### 1. 参数的顺序处理\n\n这一步就是对传入给 `createStore` 的三个参数 `reducer` 、 `preloadedState` 、 `enhancer` 的顺序调整。\n\n```js\nexport default function createStore(reducer, preloadedState, enhancer) {\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    // 第二个参数是一个函数，没有第三个参数的情况\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n        // enhancer 不是函数就报错\n      throw new Error('Expected the enhancer to be a function.')\n    }\n    // enhancer就是高阶函数，强化了本身这个createStore的函数，拿到增强后的createStore函数去处理\n    // applyMiddleware这个函数还会涉及到这个\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n\n  if (typeof reducer !== 'function') {\n      // reducer不是函数报错\n    throw new Error('Expected the reducer to be a function.')\n  }\n\n  // 其他代码省略\n}\n```\n\n### 2. 变量的定义\n\n```js\n  let currentReducer = reducer\n  let currentState = preloadedState\n  let currentListeners = []\n  let nextListeners = currentListeners\n  let isDispatching = false\n```\n\n- `currentReducer` 当前 `store` 的 `reducer`，由 `createStore` 传入的第一个参数 `reducer` 初始化\n- `currentState` 保存当前整个 `state` 的状态,初始值就是 `createStore` 传进来的第二个参数 `preloadedState`,相当于 `store` 的初始值\n- `currentListeners` 当前的监听器，默认是空\n- `nextListeners` 下一个监听器，由 `currentListeners` 赋值\n- `isDispatching` 当前的 `store` 是否正在 `dispatch` 一个action\n\n全是闭包保存的变量\n\n### 3. 函数的定义\n\n在 `createStore` 的最后，`dispatch` 了一个 `{ type: ActionTypes.INIT }` 对象，那就按图索骥，从 `dispatch` 函数开始看。\n\n先把 `./utils` 下的三个辅助函数(`actionTypes` 、 `isPlainObject` 、`warning`)看一下：\n\nactionTypes:\n\n```js\nconst randomString = () =>\n  Math.random()\n    .toString(36)\n    .substring(7)\n    .split('')\n    .join('.')\n\nconst ActionTypes = {\n  INIT: `@@redux/INIT${randomString()}`,\n  REPLACE: `@@redux/REPLACE${randomString()}`,\n  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`\n}\n\nexport default ActionTypes\n```\n\n这里返回的都是随机的 `action.type`,为了区别常规业务开发写的 `action.type`，比如：`ActionTypes.INIT` 拿到的是一个类似与 `@@redux/INITg.f.m.0.0.4` 随机字符串,只有这样奇奇怪怪的随机数才不会和业务中定义的 `reducer` 所判断的 `type` 重复。\n\n---\n\nisPlainObject:\n\n判断函数是否是纯对象，`[1,23]`、`new Date()`这些都会返回 `false`。\n\n```js\nexport default function isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false\n\n  let proto = obj\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto)\n  }\n\n  return Object.getPrototypeOf(obj) === proto\n}\n```\n\n---\n\nwarning:\n\n就是一个报错函数\n\n```js\nexport default function warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message)\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message)\n  } catch (e) {} // eslint-disable-line no-empty\n}\n```\n\n#### dispatch\n\n`dispatch` 用过 `redux` 的都知道，这就是派发 `action` 的函数，把派发出去的 `action` 交由 `reducer` 处理。\n\n```js\nfunction dispatch(action) {\n    if (!isPlainObject(action)) {\n        // action不是纯对象报错\n      throw new Error(\n        'Actions must be plain objects. ' +\n          'Use custom middleware for async actions.'\n      )\n    }\n\n    if (typeof action.type === 'undefined') {\n        // action没有type属性也报错\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. ' +\n          'Have you misspelled a constant?'\n      )\n    }\n\n    if (isDispatching) {\n        // 这个store正在dispach别的action的时候不能再dispatch另外一个action\n      throw new Error('Reducers may not dispatch actions.')\n    }\n\n    try {\n        // 当前state和action交由当前的reducer处理\n        // 同时改变isDispatching 为 true 表明正在处理action中，不能dispatch新的action了\n      isDispatching = true\n      currentState = currentReducer(currentState, action)\n    } finally {\n        // 修改为 false ，可以dispatch新的action\n      isDispatching = false\n    }\n\n    // 赋值，最终 listeners 、 currentListeners 、nextListeners的值都是 nextListeners\n    const listeners = (currentListeners = nextListeners)\n    for (let i = 0; i < listeners.length; i++) {\n        // 遍历调用监听的函数\n      const listener = listeners[i]\n      listener()\n    }\n    // 返回这个action, 没什么作用\n    return action\n}\n```\n\n核心代码就是 `currentState = currentReducer(currentState, action)`，传入 `currentState`、`action` 给 `currentReducer`，`currentReducer` 把返回值赋值给了 `currentState`。\n\n#### subscribe\n\n订阅监听器。\n\n```js\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n        // 不给函数就报错\n      throw new Error('Expected the listener to be a function.')\n    }\n\n    if (isDispatching) {\n        // 正在dispatch一个store的时候是不能订阅监听器的\n      throw new Error(\n        'You may not call store.subscribe() while the reducer is executing. ' +\n          'If you would like to be notified after the store has been updated, subscribe from a ' +\n          'component and invoke store.getState() in the callback to access the latest state. ' +\n          'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'\n      )\n    }\n\n    // 给unsubscribe调用解除订阅标识\n    let isSubscribed = true\n\n    // 下面解释为什么要调用这个ensureCanMutateNextListeners函数\n    ensureCanMutateNextListeners()\n    // 就是简单的把传入的listeners放到nextListeners\n    nextListeners.push(listener)\n\n    // 返回一个解除订阅的函数\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return\n      }\n\n      if (isDispatching) {\n        throw new Error(\n          'You may not unsubscribe from a store listener while the reducer is executing. ' +\n            'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'\n        )\n      }\n\n      isSubscribed = false\n\n      ensureCanMutateNextListeners()\n      const index = nextListeners.indexOf(listener)\n      // 从 nextListeners 数组中移除\n      nextListeners.splice(index, 1)\n    }\n  }\n```\n\n订阅没什么问题，就是为啥用调用 `ensureCanMutateNextListeners` 呢？\n看一下这个函数：\n\n```js\n function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice()\n    }\n  }\n```\n\n这个函数就是检查 `nextListeners` 和 `currentListeners` 是否是相同的，如果是相同的就把 `currentListeners` 拷贝一个新的赋值给`nextListeners`。因为数组是引用类型的关系，如果 `nextListeners` 和 `currentListeners` 相同，像 `nextListeners` 中 `push` 新的 `listener` 的时候会直接影响到 `currentListeners` 的值。\n\n注意到另外一点，在 `dispatch` 函数的最后遍历 `listeners` 的时候，是这样操作的： `const listeners = (currentListeners = nextListeners)`，这里 `nextListeners` 和 `currentListeners` 就相同了。\n\n那么为啥内部需要有 `currentListeners` 和 `nextListeners`，主要是**通知订阅者的过程中发生了其他的订阅(`subscribe`)和退订(`unsubscribe`),那肯定会发生错误或者不确定性。**\n\n这里有[一篇文章](https://segmentfault.com/a/1190000010263353)论述到这个问题。\n\n#### getState\n\n简单的把 `store` 的 `currentState` 返回出来。\n\n```js\n  function getState() {\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.getState() while the reducer is executing. ' +\n          'The reducer has already received the state as an argument. ' +\n          'Pass it down from the top reducer instead of reading it from the store.'\n      )\n    }\n\n    return currentState\n  }\n```\n\n#### replaceReducer\n\n这个 `API` 帮你替换把原来的 `reducer` 替换成新的 `reducer`。\n\n```js\n function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.')\n    }\n\n    // nextReducer替换旧的reducer\n    currentReducer = nextReducer\n    // 注意这里也dispatch了一个随机action，和createStore的最后dispatch一个随机的初始化action功能是相同的，都是了初始化state\n    dispatch({ type: ActionTypes.REPLACE })\n  }\n```\n\n#### observable\n\n不懂，还是贴一下代码：\n\n```js\n  function observable() {\n    const outerSubscribe = subscribe\n    return {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.')\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState())\n          }\n        }\n\n        observeState()\n        const unsubscribe = outerSubscribe(observeState)\n        return { unsubscribe }\n      },\n\n      [$$observable]() {\n        return this\n      }\n    }\n  }\n```\n\n### 4. dispatch一个初始化的action\n\n```js\ndispatch({ type: ActionTypes.INIT })\n```\n\n在最后，`dispatch` 了一个 `type` 为随机值的 `action`， 我们业务的 `reducer` 中最后没有匹配到对用的 `action.type` 都会默认返回默认的 `state`, 而这个默认的 `state` 往往又在 `reducer` 函数最开始写的时候已经给好了默认值,这样 `dispatch` 的 `action` 与任何 `reducer` 都不匹配,所以拿到了所有 `reducer` 的默认值从而 `currentState` 就被更新成了 `reducer` 定义过的默认值。\n\n### 5. 返回的store对象\n\n把定义好的方法挂载到一个对象上面，这个对象就是 `store` 对象。\n\n```js\nreturn {\n    dispatch,\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  }\n```\n\n## 总结\n\n`redux` 的代码是真的简洁，代码的注释甚至比代码本身还要长，还是非常值得阅读的。\n\n---\n\n![Edvard Munch – Calvary](redux之createStore/565924812.jpg)\n\n> Edvard Munch – Calvary 1900\n","slug":"redux之createStore","published":1,"updated":"2018-08-03T05:15:04.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcwb4001yygz7w7r6b7i4"},{"title":"vue较少关注的地方","date":"2018-08-02T01:24:33.000Z","_content":"\n# vue较少关注的地方\n\n`vue`总体来说还是很简单的一个库，基本的一些需求能够很快地完成，但是有的需求用`vue`去实现，可能还是有点头疼，可能是因为一些api很少使用，所以这些地方也是需要查漏补缺，同时看看别的组件库是怎么封装组件的也能够学到很多东西。\n\n## 查漏补缺\n\n> 在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。\n所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象 (一些根实例特有的选项除外)。\n\n### 侦听器&计算属性&方法\n\n计算属性依赖于`data`、`props`或其他`computed`的变化而变化，具有缓冲，方法就没有缓冲。\n\n侦听器的应用场景在**数据变化时执行异步或开销较大的操作**。\n\n### v-if&v-else可复用组件\n\n来回切换的，`if`和`else`里面的一些共同的节点会存在复用的情况减少渲染开支，加入属性Key，避免复用。\n\n这里`v-if`和`v-else`切换的时候可以用这种空的`template`来代替`div`\n\n**`v-show`是不支持`template的`**\n\n```js\n<template v-if=\"loginType === 'username'\">\n  <label>Username</label>\n  <input placeholder=\"Enter your username\">\n</template>\n<template v-else>\n  <label>Email</label>\n  <input placeholder=\"Enter your email address\">\n</template>\n```\n\n### 事件处理\n\n> 有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：\n\n```js\n<button v-on:click=\"warn('Form cannot be submitted yet.', $event)\">\n  Submit\n</button>\n```\n\n### 组件\n\n> 当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，你会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。尤其要注意，像 `<ul>`、`<ol>`、`<table>`、`<select>` 这样的元素里允许包含的元素有限制，而另一些像 `<option>` 这样的元素只能出现在某些特定元素的内部。\n\n~~这个时候用上`is`，其他时候基本用不上。`.vue`没有影响，所以`is`基本没什么卵用。~~\n这个`is`好像还是很有用的...，配合`conponent`组件好像能搞出大事情，后续文章这块会有再介绍用法。\n\n#### 自定义事件的表单输入组件\n\n表单输入是业务中太常见的需求了，具体怎么搞，得深入理解下：\n\n> `v-model`是语法糖\n\n```js\n<input v-model=\"something\">\n```\n\n是以下示例的语法糖：\n\n```js\n<input\n  v-bind:value=\"something\"\n  v-on:input=\"something = $event.target.value\">\n```\n\n所以在组件中使用时，它相当于下面的简写：\n\n```js\n<custom-input\n  v-bind:value=\"something\"\n  v-on:input=\"something = arguments[0]\">\n</custom-input>\n```\n\n所以要让组件的 v-model 生效:\n\n* 接受一个`value`prop\n* 在有新的值时候触发`input`事件并将新的值作为参数\n\n官网例子：\n\n```js\n<currency-input v-model=\"price\"></currency-input>\n```\n\n```js\nVue.component('currency-input', {\n  template: '\\\n    <span>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      >\\\n    </span>\\\n  ',\n  props: ['value'],\n  methods: {\n    // 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制\n    updateValue: function (value) {\n      var formattedValue = value\n        // 删除两侧的空格符\n        .trim()\n        // 保留 2 位小数\n        .slice(\n          0,\n          value.indexOf('.') === -1\n            ? value.length\n            : value.indexOf('.') + 3\n        )\n      // 如果值尚不合规，则手动覆盖为合规的值\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      // 通过 input 事件带出数值\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})\n```\n\n#### 非父子组件通信\n\n官方给了一种比较奇怪的做法，实例化一个Vue实例，专门用来实现事件监听的空壳：\n\n```js\nvar bus = new Vue()\n```\n\n```js\nbus.$emit(`id-select`,1)\n```\n\n```js\nbus.$on('id-selected',function(id){})\n```\n\n这种方案，不清楚在`vue单文件`模式下如何使用。\n\n### 插槽slot\n\n写这篇文章最主要的目的可能就是因为这个插槽，之前过了一遍文档，这块一带而过，没有深入理解，现在遇到需要实现`tooltip`等组件时，发现`element ui`在插槽在[tooltip](https://github.com/ElemeFE/element/tree/dev/packages/tooltip)这一块就是用的`slot`，所以还是很有必要回过头好好学一下这个东西。\n\n先看官网定义，虽然官网这一块写的不是特别容易懂:\n\n自定义组件内部再套一个组件或是一个普通dom节点是插槽解决的问题，`vue`中的叫法叫做`内容分发`，在`React`中好像直接用`this.props.children`就能搞定，`React`在某些地方确实很灵活也比较容易理解：\n\n```html\n<app>\n  <app-header></app-header>\n  <app-footer></app-footer>\n</app>\n```\n\n* 编译作用域\n\n> 父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。\n* 单个插槽\n\n子组件至少包含一个`<slot>`插口，否则父组件的内容将会被**丢弃**。\n当子组件模板只有一个没有属性的插槽时，父组件传入的整个内容片段将插入到插槽所在的 `DOM` 位置，并替换掉插槽标签本身。\n\n例子也简单，贴一下吧：\n\n```js\n//这是子组件my-component\n<div>\n  <h2>我是子组件的标题</h2>\n  <slot>\n    只有在没有要分发的内容时才会显示。\n  </slot>\n</div>\n```\n\n```js\n//父组件调用子组件\n<div>\n  <h1>我是父组件的标题</h1>\n  <my-component>\n    <p>这是一些初始内容</p>\n    <p>这是更多的初始内容</p>\n  </my-component>\n</div>\n```\n\n```js\n//结果\n<div>\n  <h1>我是父组件的标题</h1>\n  <div>\n    <h2>我是子组件的标题</h2>\n    <p>这是一些初始内容</p>\n    <p>这是更多的初始内容</p>\n  </div>\n</div>\n```\n\n* 具名插槽\n\n> `<slot>` 元素可以用一个特殊的特性 `name` 来进一步配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 `slot` 特性的元素。仍然可以有一个`匿名插槽`，它是`默认插槽`，作为找不到匹配的内容片段的备用插槽。如果没有`默认插槽`，这些找不到匹配的内容片段将被抛弃。\n\n继续看例子，也没有什么难度：\n\n```js\n//一个布局组件app-layout\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n```\n\n```js\n//父组件去调用这个组件的时候\n<app-layout>\n  <h1 slot=\"header\">这里可能是一个页面标题</h1>\n\n  <p>主要内容的一个段落。</p>\n  <p>另一个主要段落。</p>\n\n  <p slot=\"footer\">这里有一些联系信息</p>\n</app-layout>\n```\n\n```js\n//结果\n<div class=\"container\">\n  <header>\n    <h1>这里可能是一个页面标题</h1>\n  </header>\n  <main>\n    <p>主要内容的一个段落。</p>\n    <p>另一个主要段落。</p>\n  </main>\n  <footer>\n    <p>这里有一些联系信息</p>\n  </footer>\n</div>\n```\n\n* 作用域插槽\n\n~~这里就是看不太懂的地方，先留一个坑。~~\n看了一圈看的差不多明白了，放一个官网例子：\n\n```js\n//子组件\n<div class=\"child\">\n  <slot text=\"hello from child\"></slot>\n</div>\n```\n\n```js\n//父组件\n<div class=\"parent\">\n  <child>\n    <template slot-scope=\"props\">\n      <span>hello from parent</span>\n      <span>{{ props.text }}</span>\n    </template>\n  </child>\n</div>\n```\n\n```js\n//結果\n<div class=\"parent\">\n  <div class=\"child\">\n    <span>hello from parent</span>\n    <span>hello from child</span>\n  </div>\n</div>\n```\n\n什么意思呢，子组件的内容可以传递到父组件上去给父组件用，例子中在自组建的`slot`上挂了一个`text`属性，然后父组件在`template`上声明一个`slot-scope`属性，通过这个属性的值就可以访问到自组件想要给父组件的值，有点绕，看起来很灵活很有用，但是实际应用场景应该不多。\n\n* 动态组件\n\n> 通过使用保留的 `<component>` 元素，并对其 `is` 特性进行动态绑定，你可以在同一个挂载点动态切换多个组件：\n\n感觉简单的一个可切换card页面可以用这种方法解决：\n\n```js\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: 'home'\n  },\n  components: {\n    home: { /* ... */ },\n    posts: { /* ... */ },\n    archive: { /* ... */ }\n  }\n})\n```\n\n```js\n<component v-bind:is=\"currentView\">\n  <!-- 组件在 vm.currentview 变化时改变！ -->\n</component>\n```\n\n```js\nvar Home = {\n  template: '<p>Welcome home!</p>'\n}\n\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: Home\n  }\n})\n```\n\n* keep-alive\n\n这种专门针对切换可以缓冲组件。\n\n```js\n<keep-alive>\n  <component :is=\"currentView\">\n    <!-- 非活动组件将被缓存！ -->\n  </component>\n</keep-alive>\n```\n\n### 自定义指令\n\n> 有的情况下，你仍然需要对**普通 `DOM` 元素**进行底层操作，这时候就会用到自定义指令\n\n官网的这个例子很好,组件在加载完自动focus：\n\n```js\n// 注册一个全局自定义指令 `v-focus`\nVue.directive('focus', {\n  // 当被绑定的元素插入到 DOM 中时……\n  inserted: function (el) {\n    // 聚焦元素\n    el.focus()\n  }\n})\n```\n\n```js\n//调用\n  <input v-focus>\n```\n\n几个钩子函数：\n\n1. bind 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\n2. inserted 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。\n3. update 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新。\n4. componentUpdated 指令所在组件的 VNode 及其子 VNode 全部更新后调用。\n5. unbind 只调用一次，指令与元素解绑时调用。\n\n钩子函数的参数：\n\n* el  指令所绑定的元素，可以用来直接操作 DOM\n* binding\n  * name 指令名，不包括 `v-` 前缀。\n  * value 指令的绑定值\n  * oldValue 指令绑定的前一个值，仅在 `update` 和 `componentUpdated` 钩子中可用。无论值是否改变都可用。\n  * expression 字符串形式的指令表达式。\n  * arg 传给指令的参数，可选。\n  * modifiers 一个包含修饰符的对象。\n* vnode Vue 编译生成的虚拟节点。\n* oldVnode 上一个虚拟节点，仅在 `update` 和 `componentUpdated` 钩子中可用。\n\n比较重要的也就`el`和`binding`，用`binding`里的`value`可以给`el`用。\n\n> 除了 `el` 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 `dataset` 来进行。\n\n---\n\n## 补充\n\n2018/4/6：\n\n最近看了一些别人组件一些用法，感觉学的`vue`还是比较皮毛的，有空再写一篇`vue`的较为高级用法。先留一个坑[《细看vue组件》](https://github.com/limengke123/my-note/blob/master/%E5%89%8D%E7%AB%AF/vue%E8%BE%83%E5%B0%91%E5%85%B3%E6%B3%A8%E7%9A%84%E5%9C%B0%E6%96%B9.md)\n\n---\n\n参考资料：\n\n1. [element UI](https://github.com/ElemeFE/element)\n\n2. [vant](https://github.com/youzan/vant)\n\n3. [vue组件思考](https://nlush.com/blog/2017/10/14/VUE-%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/)\n\n我的相关项目：\n\n* [fantastic-carnival](https://github.com/limengke123/fantastic-carnival) 一个前后端都有的博客\n\n* [md-editor](https://github.com/limengke123/md-editor) markdown的编辑器\n\n---\n\n![Johannes Vermeer – Girl with a Pearl Earring](vue较少关注的地方/3526.jpg)\n\n> Johannes Vermeer – Girl with a Pearl Earring 1665-67","source":"_posts/vue较少关注的地方.md","raw":"---\ntitle: vue较少关注的地方\ndate: 2018-08-02 09:24:33\ntags:\n  - vue\ncategories: 前端\n---\n\n# vue较少关注的地方\n\n`vue`总体来说还是很简单的一个库，基本的一些需求能够很快地完成，但是有的需求用`vue`去实现，可能还是有点头疼，可能是因为一些api很少使用，所以这些地方也是需要查漏补缺，同时看看别的组件库是怎么封装组件的也能够学到很多东西。\n\n## 查漏补缺\n\n> 在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。\n所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象 (一些根实例特有的选项除外)。\n\n### 侦听器&计算属性&方法\n\n计算属性依赖于`data`、`props`或其他`computed`的变化而变化，具有缓冲，方法就没有缓冲。\n\n侦听器的应用场景在**数据变化时执行异步或开销较大的操作**。\n\n### v-if&v-else可复用组件\n\n来回切换的，`if`和`else`里面的一些共同的节点会存在复用的情况减少渲染开支，加入属性Key，避免复用。\n\n这里`v-if`和`v-else`切换的时候可以用这种空的`template`来代替`div`\n\n**`v-show`是不支持`template的`**\n\n```js\n<template v-if=\"loginType === 'username'\">\n  <label>Username</label>\n  <input placeholder=\"Enter your username\">\n</template>\n<template v-else>\n  <label>Email</label>\n  <input placeholder=\"Enter your email address\">\n</template>\n```\n\n### 事件处理\n\n> 有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：\n\n```js\n<button v-on:click=\"warn('Form cannot be submitted yet.', $event)\">\n  Submit\n</button>\n```\n\n### 组件\n\n> 当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，你会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。尤其要注意，像 `<ul>`、`<ol>`、`<table>`、`<select>` 这样的元素里允许包含的元素有限制，而另一些像 `<option>` 这样的元素只能出现在某些特定元素的内部。\n\n~~这个时候用上`is`，其他时候基本用不上。`.vue`没有影响，所以`is`基本没什么卵用。~~\n这个`is`好像还是很有用的...，配合`conponent`组件好像能搞出大事情，后续文章这块会有再介绍用法。\n\n#### 自定义事件的表单输入组件\n\n表单输入是业务中太常见的需求了，具体怎么搞，得深入理解下：\n\n> `v-model`是语法糖\n\n```js\n<input v-model=\"something\">\n```\n\n是以下示例的语法糖：\n\n```js\n<input\n  v-bind:value=\"something\"\n  v-on:input=\"something = $event.target.value\">\n```\n\n所以在组件中使用时，它相当于下面的简写：\n\n```js\n<custom-input\n  v-bind:value=\"something\"\n  v-on:input=\"something = arguments[0]\">\n</custom-input>\n```\n\n所以要让组件的 v-model 生效:\n\n* 接受一个`value`prop\n* 在有新的值时候触发`input`事件并将新的值作为参数\n\n官网例子：\n\n```js\n<currency-input v-model=\"price\"></currency-input>\n```\n\n```js\nVue.component('currency-input', {\n  template: '\\\n    <span>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      >\\\n    </span>\\\n  ',\n  props: ['value'],\n  methods: {\n    // 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制\n    updateValue: function (value) {\n      var formattedValue = value\n        // 删除两侧的空格符\n        .trim()\n        // 保留 2 位小数\n        .slice(\n          0,\n          value.indexOf('.') === -1\n            ? value.length\n            : value.indexOf('.') + 3\n        )\n      // 如果值尚不合规，则手动覆盖为合规的值\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      // 通过 input 事件带出数值\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})\n```\n\n#### 非父子组件通信\n\n官方给了一种比较奇怪的做法，实例化一个Vue实例，专门用来实现事件监听的空壳：\n\n```js\nvar bus = new Vue()\n```\n\n```js\nbus.$emit(`id-select`,1)\n```\n\n```js\nbus.$on('id-selected',function(id){})\n```\n\n这种方案，不清楚在`vue单文件`模式下如何使用。\n\n### 插槽slot\n\n写这篇文章最主要的目的可能就是因为这个插槽，之前过了一遍文档，这块一带而过，没有深入理解，现在遇到需要实现`tooltip`等组件时，发现`element ui`在插槽在[tooltip](https://github.com/ElemeFE/element/tree/dev/packages/tooltip)这一块就是用的`slot`，所以还是很有必要回过头好好学一下这个东西。\n\n先看官网定义，虽然官网这一块写的不是特别容易懂:\n\n自定义组件内部再套一个组件或是一个普通dom节点是插槽解决的问题，`vue`中的叫法叫做`内容分发`，在`React`中好像直接用`this.props.children`就能搞定，`React`在某些地方确实很灵活也比较容易理解：\n\n```html\n<app>\n  <app-header></app-header>\n  <app-footer></app-footer>\n</app>\n```\n\n* 编译作用域\n\n> 父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。\n* 单个插槽\n\n子组件至少包含一个`<slot>`插口，否则父组件的内容将会被**丢弃**。\n当子组件模板只有一个没有属性的插槽时，父组件传入的整个内容片段将插入到插槽所在的 `DOM` 位置，并替换掉插槽标签本身。\n\n例子也简单，贴一下吧：\n\n```js\n//这是子组件my-component\n<div>\n  <h2>我是子组件的标题</h2>\n  <slot>\n    只有在没有要分发的内容时才会显示。\n  </slot>\n</div>\n```\n\n```js\n//父组件调用子组件\n<div>\n  <h1>我是父组件的标题</h1>\n  <my-component>\n    <p>这是一些初始内容</p>\n    <p>这是更多的初始内容</p>\n  </my-component>\n</div>\n```\n\n```js\n//结果\n<div>\n  <h1>我是父组件的标题</h1>\n  <div>\n    <h2>我是子组件的标题</h2>\n    <p>这是一些初始内容</p>\n    <p>这是更多的初始内容</p>\n  </div>\n</div>\n```\n\n* 具名插槽\n\n> `<slot>` 元素可以用一个特殊的特性 `name` 来进一步配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 `slot` 特性的元素。仍然可以有一个`匿名插槽`，它是`默认插槽`，作为找不到匹配的内容片段的备用插槽。如果没有`默认插槽`，这些找不到匹配的内容片段将被抛弃。\n\n继续看例子，也没有什么难度：\n\n```js\n//一个布局组件app-layout\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n```\n\n```js\n//父组件去调用这个组件的时候\n<app-layout>\n  <h1 slot=\"header\">这里可能是一个页面标题</h1>\n\n  <p>主要内容的一个段落。</p>\n  <p>另一个主要段落。</p>\n\n  <p slot=\"footer\">这里有一些联系信息</p>\n</app-layout>\n```\n\n```js\n//结果\n<div class=\"container\">\n  <header>\n    <h1>这里可能是一个页面标题</h1>\n  </header>\n  <main>\n    <p>主要内容的一个段落。</p>\n    <p>另一个主要段落。</p>\n  </main>\n  <footer>\n    <p>这里有一些联系信息</p>\n  </footer>\n</div>\n```\n\n* 作用域插槽\n\n~~这里就是看不太懂的地方，先留一个坑。~~\n看了一圈看的差不多明白了，放一个官网例子：\n\n```js\n//子组件\n<div class=\"child\">\n  <slot text=\"hello from child\"></slot>\n</div>\n```\n\n```js\n//父组件\n<div class=\"parent\">\n  <child>\n    <template slot-scope=\"props\">\n      <span>hello from parent</span>\n      <span>{{ props.text }}</span>\n    </template>\n  </child>\n</div>\n```\n\n```js\n//結果\n<div class=\"parent\">\n  <div class=\"child\">\n    <span>hello from parent</span>\n    <span>hello from child</span>\n  </div>\n</div>\n```\n\n什么意思呢，子组件的内容可以传递到父组件上去给父组件用，例子中在自组建的`slot`上挂了一个`text`属性，然后父组件在`template`上声明一个`slot-scope`属性，通过这个属性的值就可以访问到自组件想要给父组件的值，有点绕，看起来很灵活很有用，但是实际应用场景应该不多。\n\n* 动态组件\n\n> 通过使用保留的 `<component>` 元素，并对其 `is` 特性进行动态绑定，你可以在同一个挂载点动态切换多个组件：\n\n感觉简单的一个可切换card页面可以用这种方法解决：\n\n```js\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: 'home'\n  },\n  components: {\n    home: { /* ... */ },\n    posts: { /* ... */ },\n    archive: { /* ... */ }\n  }\n})\n```\n\n```js\n<component v-bind:is=\"currentView\">\n  <!-- 组件在 vm.currentview 变化时改变！ -->\n</component>\n```\n\n```js\nvar Home = {\n  template: '<p>Welcome home!</p>'\n}\n\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: Home\n  }\n})\n```\n\n* keep-alive\n\n这种专门针对切换可以缓冲组件。\n\n```js\n<keep-alive>\n  <component :is=\"currentView\">\n    <!-- 非活动组件将被缓存！ -->\n  </component>\n</keep-alive>\n```\n\n### 自定义指令\n\n> 有的情况下，你仍然需要对**普通 `DOM` 元素**进行底层操作，这时候就会用到自定义指令\n\n官网的这个例子很好,组件在加载完自动focus：\n\n```js\n// 注册一个全局自定义指令 `v-focus`\nVue.directive('focus', {\n  // 当被绑定的元素插入到 DOM 中时……\n  inserted: function (el) {\n    // 聚焦元素\n    el.focus()\n  }\n})\n```\n\n```js\n//调用\n  <input v-focus>\n```\n\n几个钩子函数：\n\n1. bind 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\n2. inserted 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。\n3. update 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新。\n4. componentUpdated 指令所在组件的 VNode 及其子 VNode 全部更新后调用。\n5. unbind 只调用一次，指令与元素解绑时调用。\n\n钩子函数的参数：\n\n* el  指令所绑定的元素，可以用来直接操作 DOM\n* binding\n  * name 指令名，不包括 `v-` 前缀。\n  * value 指令的绑定值\n  * oldValue 指令绑定的前一个值，仅在 `update` 和 `componentUpdated` 钩子中可用。无论值是否改变都可用。\n  * expression 字符串形式的指令表达式。\n  * arg 传给指令的参数，可选。\n  * modifiers 一个包含修饰符的对象。\n* vnode Vue 编译生成的虚拟节点。\n* oldVnode 上一个虚拟节点，仅在 `update` 和 `componentUpdated` 钩子中可用。\n\n比较重要的也就`el`和`binding`，用`binding`里的`value`可以给`el`用。\n\n> 除了 `el` 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 `dataset` 来进行。\n\n---\n\n## 补充\n\n2018/4/6：\n\n最近看了一些别人组件一些用法，感觉学的`vue`还是比较皮毛的，有空再写一篇`vue`的较为高级用法。先留一个坑[《细看vue组件》](https://github.com/limengke123/my-note/blob/master/%E5%89%8D%E7%AB%AF/vue%E8%BE%83%E5%B0%91%E5%85%B3%E6%B3%A8%E7%9A%84%E5%9C%B0%E6%96%B9.md)\n\n---\n\n参考资料：\n\n1. [element UI](https://github.com/ElemeFE/element)\n\n2. [vant](https://github.com/youzan/vant)\n\n3. [vue组件思考](https://nlush.com/blog/2017/10/14/VUE-%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/)\n\n我的相关项目：\n\n* [fantastic-carnival](https://github.com/limengke123/fantastic-carnival) 一个前后端都有的博客\n\n* [md-editor](https://github.com/limengke123/md-editor) markdown的编辑器\n\n---\n\n![Johannes Vermeer – Girl with a Pearl Earring](vue较少关注的地方/3526.jpg)\n\n> Johannes Vermeer – Girl with a Pearl Earring 1665-67","slug":"vue较少关注的地方","published":1,"updated":"2018-08-02T01:25:49.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcwb5001zygz74nhrdekf"},{"title":"vue与react组件对比学习","date":"2018-08-03T01:29:03.000Z","_content":"\n# vue与react组件对比学习\n\n## 前言\n\n我最一开始是先学的`react`，然后也就前段时间开始学习`vue`，一开始给我的感受是两者很相似，`react`给我的感觉是*灵活*，`vue`是一种*死板*的感觉。为什么有这种感觉呢，`react`有一种很强烈的欲望，**all in js**只要能够用够`js`写的，就全用`js`写，所以一切都很灵活，`jsx`很酷，**高阶组件**牛逼，`es7`的装饰器也是可以玩的飞起。反观`vue`，搞的`.vue单文件`还是尽量保留原来前端开发的模式，留下了`template`、`script`、`style`三个最基本的东西，其实内部运作应该还是和`react`类似。\n\n## react\n\n`react`看的各种道听途说的文章，这玩意大概是怎么玩的呢？简单的说`jsx`被解析成`createElement`的方法，里面传到参数啊什么的就是告诉`react`怎么渲染之类，然后方法返回一个`虚拟dom`,大概是这么搞的，具体细节我也不是太懂。\n\n## vue\n\n`vue`一开始让我挺晕的，官网的学习教程和一般写的项目不太一样，官网教程的例子没有单文件，全是在选项对象中加入一个`template`属性，一般的项目开发的都是用的`.vue`的单文件。一开始我是没太理解`.vue`这文件到底是怎么玩，只是按着这样写，不理解原理好像也能够基本完成自己想要的效果。\n\n最近看了一些文章以及看了好几遍官网的`api`，[官网的api](https://cn.vuejs.org/v2/api/)还是很有必要每一个都看一遍的，之前大致看一遍感觉好多东西都没有见到过，别人代码看多了，发现很多没用的`api`还是很强的。下面讲讲我对`vue`的一些理解。\n\n`vue`是怎么玩的呢？每一个`vue`组件都是一个`Vue`实例，这样说也不是很准确，应该每一个自己写的组件都是通过调用`Vue.extend`继承`Vue`后扩展出来的新的类的实例，想一想怎么定义一个`vue`组件，就是调用了`Vue.component`[方法](https://cn.vuejs.org/v2/api/?#Vue-component)，\n\n```js\n// 注册组件，传入一个扩展过的构造器\nVue.component('my-component', Vue.extend({ /* ... */ }))\n\n// 注册组件，传入一个选项对象 (自动调用 Vue.extend)\nVue.component('my-component', { /* ... */ })\n\n// 获取注册的组件 (始终返回构造器)\nvar MyComponent = Vue.component('my-component')\n```\n\n一般情况下我们写的`.vue单文件`暴露出来的就是一个选项对象，这个方法的内部自动调用了`Vue.extend`。所以`.vue单文件`本质上是`vue-loader`去把`<template></template>`里的内容转成字符串形式，塞到`<scirpt></script>`里面的`export default {}`的对象里面的`template`去，当然了，这还没有完，`template`属性里面的字符串也可以说是一种糖，`vue`内部是要调用`Vue.compile`去做一次转换，最终把`template`的值转换成`render`，这个属性的值是一个方法，这里就和`react`统一了，用是有个同名的函数`createElement`去生成`Vnode`。所以在选项对象中，可以不给出`template`属性而是给出`render`属性，同时存在`template`和`render`的时候会忽视`template`。\n\n看看[官网](https://cn.vuejs.org/v2/guide/render-function.html)`render`用法：\n\n```js\nvar getChildrenTextContent = function (children) {\n  return children.map(function (node) {\n    return node.children\n      ? getChildrenTextContent(node.children)\n      : node.text\n  }).join('')\n}\n\nVue.component('anchored-heading', {\n  render: function (createElement) {\n    // create kebabCase id\n    var headingId = getChildrenTextContent(this.$slots.default)\n      .toLowerCase()\n      .replace(/\\W+/g, '-')\n      .replace(/(^\\-|\\-$)/g, '')\n\n    return createElement(\n      'h' + this.level,\n      [\n        createElement('a', {\n          attrs: {\n            name: headingId,\n            href: '#' + headingId\n          }\n        }, this.$slots.default)\n      ]\n    )\n  },\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})\n```\n\n看的出来这种直接写`render`比起`template`要麻烦的多，所以为了简化这种写法就搞出来了一个`jsx`写法，这里又和`react`又统一了。\n\n`jsx`用法:\n\n```js\nimport AnchoredHeading from './AnchoredHeading.vue'\n\nnew Vue({\n  el: '#demo',\n  render: function (h) {\n    return (\n      <AnchoredHeading level={1}>\n        <span>Hello</span> world!\n      </AnchoredHeading>\n    )\n  }\n})\n```\n\n## 一个需求引发的思考\n\n通常我们写`react`和`vue`都是一个写一个组件`customComp`，然后在别的组件要用的时候都是直接`<customComp/>`写进去的，但是有的组件就不能这么做了，比如一个提醒的`message`组件，我希望在`react`中是这样调用，像是一个工具类函数一般使用：\n\n```jsx\nimport message from 'message.js'\nimport React from 'react'\n\nclass XXXcomponent extends React.Component{\n    ...\n    componentDidMount(){\n        message.info({\n            type:'success',\n            text:'hello react!'\n        })\n    }\n}\n\n\n```\n\n在`vue`中我希望是这样的调用的：\n\n```js\n{\n    mounted(){\n        this.$message({\n            type:'success',\n            text:\"hello vue!\"\n        })\n    }\n}\n```\n\n在看了一些三方库的这种组件的实现方式，来回折腾了一段时间，对`react`和`vue`理解的更深了一些。\n\n### vue的实现\n\n先拿`vue`说，先写一个`message.vue`的组件文件，然后在`index.js`文件中把这个`message.vue`文件`import`进来，你可以试着打印下这个`vue`文件长得什么样，其实前面也分析过了，其实引进来的就是一个选项对象，而且`<template></template>`标签的内容也被弄成了render属性了，前面也铺垫过了`vue.extend`，这里把引入的选项对象传入`vue.extend`中就返回了一个扩展过的`Vue`类了,然后我们手动去`new`一个`message`的组件实例出来，可以传入一个`propsData`就能把数据传给到组件内部的`prop`中去，打印下实例就会发现定义在`.vue`文件中的`data`、`prop`之类的都有，这个时候我们只是实例化了一个实例，其实在`document`上是找不到这个节点的，只需要最后在实例上调用`$mount(el)`，就能把实例挂载到`document`上去了。直接修改实例上`data`里面定义的值，会发现也是响应的，至此这个`message`组件我们能够手动去控制这个组件了，具体细节该怎么暴露出`api`来个外部调用就不说了。\n\n```js\n//伪代码\nimport message from 'message.vue'\nimport Vue from 'vue'\n\nconst Constructor = Vue.extend(message) //扩展出一个新的类\n\nconst options = {\n    innerProps:\"inner props\"\n}\n\nconst instance = new Constructor({propsData:options})  //创建一个实例，也可以传给一个props\n\ninstance.$mount(document.body) //组件挂在body下\n\n//如果组件内部methods有方法，实例就能直接调用\n\n// instance.innerFunction()\n\n```\n\n### react实现\n\n大体上是和`vue`类似，有几个地方有变化，引进来的组件，因为是用`class extends React.Component`的形式写的，看的出来已经是扩展过`react`后组件类了，直接去`new`就能拿到实例了,或者是用`React.createElement`传入组件拿到`虚拟dom`。和`vue`不同的事，`vue`有个`$mount`方法帮助挂载组件到指定的位置，在`react`中要用到`react-dom`里面的`render`方法，传入前面拿到的`虚拟dom`以及要挂载的位置，这个方法会返回这个组件实例，这个时候就可以调用组件实例的`setState`方法去做一些事情了。\n\n## 总结\n\n`react`、`vue`随便用用带还是挺简单的，我的观点是`api文档`只能教会你**70%**的东西，但是你有了这**70%**的功力，大部分的东西基本都没什么问题，但是文档之外的**30%**，往往是最难学的，可能需要剥开`vue`、`react`简单易用的外表，来回看官方文档，每次都能有新的体会，翻看第三方优秀的组件库是最佳学习的方案，深入地去理解内部原理才能真正的掌握。\n\n这种组件函数式用法在我的[fantastic-carnival(一个博客系统)](https://github.com/limengke123/fantastic-carnival)中有体现：\n其中有一个`loadingBar`组件是一个加载条的组件，参考的是`iview`组件库中的`vue`实现，同时我用`react`也实现了一遍。\n\n* [vue的loadingBar实现](https://github.com/limengke123/fantastic-carnival/tree/master/admin/src/components/general/loading-bar)\n* [vue的message实现](https://github.com/limengke123/fantastic-carnival/tree/master/admin/src/components/general/message)\n* [react的lonadingBar实现](https://github.com/limengke123/fantastic-carnival/tree/master/client/src/components/common/loading-bar)\n\n## 参考资料\n\n1. [vue组件思考](https://nlush.com/blog/2017/10/14/VUE-%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/)\n2. [vue官网渲染函数](https://cn.vuejs.org/v2/guide/render-function.html)\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked](vue与react组件对比学习/877090454.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked 1847\n","source":"_posts/vue与react组件对比学习.md","raw":"---\ntitle: vue与react组件对比学习\ndate: 2018-08-03 09:29:03\ntags:\n  - vue\n  - react\ncategories: 前端\n---\n\n# vue与react组件对比学习\n\n## 前言\n\n我最一开始是先学的`react`，然后也就前段时间开始学习`vue`，一开始给我的感受是两者很相似，`react`给我的感觉是*灵活*，`vue`是一种*死板*的感觉。为什么有这种感觉呢，`react`有一种很强烈的欲望，**all in js**只要能够用够`js`写的，就全用`js`写，所以一切都很灵活，`jsx`很酷，**高阶组件**牛逼，`es7`的装饰器也是可以玩的飞起。反观`vue`，搞的`.vue单文件`还是尽量保留原来前端开发的模式，留下了`template`、`script`、`style`三个最基本的东西，其实内部运作应该还是和`react`类似。\n\n## react\n\n`react`看的各种道听途说的文章，这玩意大概是怎么玩的呢？简单的说`jsx`被解析成`createElement`的方法，里面传到参数啊什么的就是告诉`react`怎么渲染之类，然后方法返回一个`虚拟dom`,大概是这么搞的，具体细节我也不是太懂。\n\n## vue\n\n`vue`一开始让我挺晕的，官网的学习教程和一般写的项目不太一样，官网教程的例子没有单文件，全是在选项对象中加入一个`template`属性，一般的项目开发的都是用的`.vue`的单文件。一开始我是没太理解`.vue`这文件到底是怎么玩，只是按着这样写，不理解原理好像也能够基本完成自己想要的效果。\n\n最近看了一些文章以及看了好几遍官网的`api`，[官网的api](https://cn.vuejs.org/v2/api/)还是很有必要每一个都看一遍的，之前大致看一遍感觉好多东西都没有见到过，别人代码看多了，发现很多没用的`api`还是很强的。下面讲讲我对`vue`的一些理解。\n\n`vue`是怎么玩的呢？每一个`vue`组件都是一个`Vue`实例，这样说也不是很准确，应该每一个自己写的组件都是通过调用`Vue.extend`继承`Vue`后扩展出来的新的类的实例，想一想怎么定义一个`vue`组件，就是调用了`Vue.component`[方法](https://cn.vuejs.org/v2/api/?#Vue-component)，\n\n```js\n// 注册组件，传入一个扩展过的构造器\nVue.component('my-component', Vue.extend({ /* ... */ }))\n\n// 注册组件，传入一个选项对象 (自动调用 Vue.extend)\nVue.component('my-component', { /* ... */ })\n\n// 获取注册的组件 (始终返回构造器)\nvar MyComponent = Vue.component('my-component')\n```\n\n一般情况下我们写的`.vue单文件`暴露出来的就是一个选项对象，这个方法的内部自动调用了`Vue.extend`。所以`.vue单文件`本质上是`vue-loader`去把`<template></template>`里的内容转成字符串形式，塞到`<scirpt></script>`里面的`export default {}`的对象里面的`template`去，当然了，这还没有完，`template`属性里面的字符串也可以说是一种糖，`vue`内部是要调用`Vue.compile`去做一次转换，最终把`template`的值转换成`render`，这个属性的值是一个方法，这里就和`react`统一了，用是有个同名的函数`createElement`去生成`Vnode`。所以在选项对象中，可以不给出`template`属性而是给出`render`属性，同时存在`template`和`render`的时候会忽视`template`。\n\n看看[官网](https://cn.vuejs.org/v2/guide/render-function.html)`render`用法：\n\n```js\nvar getChildrenTextContent = function (children) {\n  return children.map(function (node) {\n    return node.children\n      ? getChildrenTextContent(node.children)\n      : node.text\n  }).join('')\n}\n\nVue.component('anchored-heading', {\n  render: function (createElement) {\n    // create kebabCase id\n    var headingId = getChildrenTextContent(this.$slots.default)\n      .toLowerCase()\n      .replace(/\\W+/g, '-')\n      .replace(/(^\\-|\\-$)/g, '')\n\n    return createElement(\n      'h' + this.level,\n      [\n        createElement('a', {\n          attrs: {\n            name: headingId,\n            href: '#' + headingId\n          }\n        }, this.$slots.default)\n      ]\n    )\n  },\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})\n```\n\n看的出来这种直接写`render`比起`template`要麻烦的多，所以为了简化这种写法就搞出来了一个`jsx`写法，这里又和`react`又统一了。\n\n`jsx`用法:\n\n```js\nimport AnchoredHeading from './AnchoredHeading.vue'\n\nnew Vue({\n  el: '#demo',\n  render: function (h) {\n    return (\n      <AnchoredHeading level={1}>\n        <span>Hello</span> world!\n      </AnchoredHeading>\n    )\n  }\n})\n```\n\n## 一个需求引发的思考\n\n通常我们写`react`和`vue`都是一个写一个组件`customComp`，然后在别的组件要用的时候都是直接`<customComp/>`写进去的，但是有的组件就不能这么做了，比如一个提醒的`message`组件，我希望在`react`中是这样调用，像是一个工具类函数一般使用：\n\n```jsx\nimport message from 'message.js'\nimport React from 'react'\n\nclass XXXcomponent extends React.Component{\n    ...\n    componentDidMount(){\n        message.info({\n            type:'success',\n            text:'hello react!'\n        })\n    }\n}\n\n\n```\n\n在`vue`中我希望是这样的调用的：\n\n```js\n{\n    mounted(){\n        this.$message({\n            type:'success',\n            text:\"hello vue!\"\n        })\n    }\n}\n```\n\n在看了一些三方库的这种组件的实现方式，来回折腾了一段时间，对`react`和`vue`理解的更深了一些。\n\n### vue的实现\n\n先拿`vue`说，先写一个`message.vue`的组件文件，然后在`index.js`文件中把这个`message.vue`文件`import`进来，你可以试着打印下这个`vue`文件长得什么样，其实前面也分析过了，其实引进来的就是一个选项对象，而且`<template></template>`标签的内容也被弄成了render属性了，前面也铺垫过了`vue.extend`，这里把引入的选项对象传入`vue.extend`中就返回了一个扩展过的`Vue`类了,然后我们手动去`new`一个`message`的组件实例出来，可以传入一个`propsData`就能把数据传给到组件内部的`prop`中去，打印下实例就会发现定义在`.vue`文件中的`data`、`prop`之类的都有，这个时候我们只是实例化了一个实例，其实在`document`上是找不到这个节点的，只需要最后在实例上调用`$mount(el)`，就能把实例挂载到`document`上去了。直接修改实例上`data`里面定义的值，会发现也是响应的，至此这个`message`组件我们能够手动去控制这个组件了，具体细节该怎么暴露出`api`来个外部调用就不说了。\n\n```js\n//伪代码\nimport message from 'message.vue'\nimport Vue from 'vue'\n\nconst Constructor = Vue.extend(message) //扩展出一个新的类\n\nconst options = {\n    innerProps:\"inner props\"\n}\n\nconst instance = new Constructor({propsData:options})  //创建一个实例，也可以传给一个props\n\ninstance.$mount(document.body) //组件挂在body下\n\n//如果组件内部methods有方法，实例就能直接调用\n\n// instance.innerFunction()\n\n```\n\n### react实现\n\n大体上是和`vue`类似，有几个地方有变化，引进来的组件，因为是用`class extends React.Component`的形式写的，看的出来已经是扩展过`react`后组件类了，直接去`new`就能拿到实例了,或者是用`React.createElement`传入组件拿到`虚拟dom`。和`vue`不同的事，`vue`有个`$mount`方法帮助挂载组件到指定的位置，在`react`中要用到`react-dom`里面的`render`方法，传入前面拿到的`虚拟dom`以及要挂载的位置，这个方法会返回这个组件实例，这个时候就可以调用组件实例的`setState`方法去做一些事情了。\n\n## 总结\n\n`react`、`vue`随便用用带还是挺简单的，我的观点是`api文档`只能教会你**70%**的东西，但是你有了这**70%**的功力，大部分的东西基本都没什么问题，但是文档之外的**30%**，往往是最难学的，可能需要剥开`vue`、`react`简单易用的外表，来回看官方文档，每次都能有新的体会，翻看第三方优秀的组件库是最佳学习的方案，深入地去理解内部原理才能真正的掌握。\n\n这种组件函数式用法在我的[fantastic-carnival(一个博客系统)](https://github.com/limengke123/fantastic-carnival)中有体现：\n其中有一个`loadingBar`组件是一个加载条的组件，参考的是`iview`组件库中的`vue`实现，同时我用`react`也实现了一遍。\n\n* [vue的loadingBar实现](https://github.com/limengke123/fantastic-carnival/tree/master/admin/src/components/general/loading-bar)\n* [vue的message实现](https://github.com/limengke123/fantastic-carnival/tree/master/admin/src/components/general/message)\n* [react的lonadingBar实现](https://github.com/limengke123/fantastic-carnival/tree/master/client/src/components/common/loading-bar)\n\n## 参考资料\n\n1. [vue组件思考](https://nlush.com/blog/2017/10/14/VUE-%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/)\n2. [vue官网渲染函数](https://cn.vuejs.org/v2/guide/render-function.html)\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked](vue与react组件对比学习/877090454.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked 1847\n","slug":"vue与react组件对比学习","published":1,"updated":"2018-08-03T01:30:54.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcwb60021ygz74gkpuhe7"},{"title":"神奇的reduce","date":"2018-08-01T04:06:23.000Z","_content":"\n# 神奇的reduce\n\n这是一个用得好就很装逼的方法，简约而强大。\n\n## 干什么用的\n\n> reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。\n说的挺复杂，看个mdn例子先：\n\n```js\nconst arrary1 = [1, 2, 3, 4]\nconst reducer = (accumulator, currentValue) => accumulator + currentValue\n//1+2+3+4\nconsole.log(array1.reduce(reducer))\n\n//5+1+2+3+4\nconsole.log(array1.reduce(reducer, 5))\n```\n\n## 语法\n\n```js\narr.reduce(callback[,initalValue])\n```\n\n### 参数\n\n* callback 回调函数\n  * accumulator **累加器累加回调的返回值**\n  * currentValue **数组中正在处理的元素**\n  * currentIndex(optional) 数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。\n  * array(optional) 调用reduce的数组\n\n* initalValue(optional) 用作第一个调用 callback的第一个参数的值\n\n### 返回值\n\n函数累计处理的结果\n\n## 描述\n\n`reduce`为数组中的每一个元素依次执行`callback`函数，不包括数组中被删除或从未被赋值的元素，接受四个参数。\n\n回调函数第一次执行时，`accumulator`和`currentValue`的取值有两种情况：调用`reduce`时提供`initialValue`，`accumulator`取值为`initialValue`，`currentValue`取数组中的第一个值；没有提供 `initialValue`，`accumulator`取数组中的第一个值，`currentValue`取数组中的第二个值。\n\n> 如果没有提供`initialValue`，`reduce` 会从索引1的地方开始执行 `callback` 方法，跳过第一个索引。如果提供`initialValue`，从索引0开始。\n\n如果数组为空且没有提供`initialValue`，会抛出`TypeError` 。如果数组仅有一个元素（无论位置如何）并且没有提供`initialValue`， 或者有提供`initialValue`但是数组为空，那么此唯一值将被返回并且`callback`不会被执行。\n\n提供初始值通常更安全，正如下面的例子，如果没有提供initialValue，则可能有三种输出：\n\n```js\nvar maxCallback = ( pre, cur ) => Math.max( pre.x, cur.x );\nvar maxCallback2 = ( max, cur ) => Math.max( max, cur );\n\n// reduce() without initialValue\n[ { x: 22 }, { x: 42 } ].reduce( maxCallback ); // 42\n[ { x: 22 }            ].reduce( maxCallback ); // { x: 22 }\n[                      ].reduce( maxCallback ); // TypeError\n\n// map/reduce; better solution, also works for empty arrays\n[ { x: 22 }, { x: 42 } ].map( el => el.x )\n                        .reduce( maxCallback2, -Infinity );\n```\n\n### reduce如何运行\n\n假如运行下段代码：\n\n```js\n[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array){\n  return accumulator + currentValue;\n});\n```\n\n| callback    | accumulator | currentValue | currentIndex | array           | return value |\n| ----------- | ----------- | ------------ | ------------ | --------------- | ------------ |\n| first call  | 0           | 1            | 1            | [0, 1, 2, 3, 4] | 1            |\n| second call | 1           | 2            | 2            | [0, 1, 2, 3, 4] | 3            |\n| third call  | 3           | 3            | 3            | [0, 1, 2, 3, 4] | 6            |\n| fourth call | 6           | 4            | 4            | [0, 1, 2, 3, 4] | 10           |\n由`reduce`返回的值将是上次回调调用的值`（10）`。\n\n你同样可以使用箭头函数的形式，下面的代码会输出跟前面一样的结果\n\n您还可以提供[Arrow Function](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions) 代替完整功能。 下面的代码将产生与上面的代码中相同的输出：\n\n```js\n[0, 1, 2, 3, 4].reduce((prev, curr) => prev + curr );\n```\n\n如果你打算提供一个初始值作为`reduce`方法的第二个参数，以下是运行过程及结果：\n\n```js\n[0, 1, 2, 3, 4].reduce((accumulator, currentValue, currentIndex, array) => { return accumulator + currentValue; }, 10 )\n```\n\n| callback    | accumulator | currentValue | currentIndex | array           | return value |\n| ----------- | ----------- | ------------ | ------------ | --------------- | ------------ |\n| first call  | 10          | 0            | 0            | [0, 1, 2, 3, 4] | 10           |\n| second call | 10          | 1            | 1            | [0, 1, 2, 3, 4] | 11           |\n| third call  | 11          | 2            | 2            | [0, 1, 2, 3, 4] | 13           |\n| fourth call | 13          | 3            | 3            | [0, 1, 2, 3, 4] | 16           |\n| fourth call | 16          | 4            | 4            | [0, 1, 2, 3, 4] | 20           |\n这种情况下reduce返回的值是`20`。\n\n## 例子\n\n数组里所有值的和\n\n```js\nvar sum = [0, 1, 2, 3].reduce(function (a, b) {\n  return a + b;\n}, 0);\n// sum is 6\n```\n\n你也可以写成箭头函数的形式：\n\n```js\nvar total = [ 0, 1, 2, 3 ].reduce(\n  ( acc, cur ) => acc + cur,\n  0\n);\n```\n\n### 将二维数组转化为一维\n\n```js\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  function(a, b) {\n    return a.concat(b);\n  },\n  []\n);\n// flattened is [0, 1, 2, 3, 4, 5]\n```\n\n你也可以写成箭头函数的形式：\n\n```js\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n ( acc, cur ) => acc.concat(cur),\n []\n);\n```\n\n### 计算数组中每个元素出现的次数\n\n```js\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nvar countedNames = names.reduce(function (allNames, name) { \n  if (name in allNames) {\n    allNames[name]++;\n  }\n  else {\n    allNames[name] = 1;\n  }\n  return allNames;\n}, {});\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n\n### 使用扩展运算符和initialValue绑定包含在对象数组中的数组\n\n```js\n// friends - an array of objects \n// where object field \"books\" - list of favorite books \nvar friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}];\n\n// allbooks - list which will contain all friends' books +  \n// additional list contained in initialValue\nvar allbooks = friends.reduce(function(prev, curr) {\n  return [...prev, ...curr.books];\n}, ['Alphabet']);\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', \n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n```\n\n### 数组去重\n\n```js\nlet arr = [1,2,1,2,3,5,4,5,3,4,4,4,4];\nlet result = arr.sort().reduce((init, current)=>{\n    if(init.length===0 || init[init.length-1]!==current){\n        init.push(current);\n    }\n    return init;\n}, []);\nconsole.log(result); //[1,2,3,4,5]\n```\n\n### 同时实现map和filter\n\n```js\nconst numbers = [10, 20, 30, 40];\nconst doubledOver50 = numbers.reduce((finalList, num) => {\n  \n  num = num * 2; \n  \n  if (num > 50) {\n    finalList.push(num);\n  }\n  return finalList;\n}, []);\ndoubledOver50; // [60, 80]\n```\n\n### 匹配圆括号\n\nreduce的另外一个用途是能够匹配给定字符串中的圆括号。对于一个含有圆括号的字符串，我们需要知道(和)的数量是否一致，并且(是否出现在)之前。\n\n下面的代码中我们使用reduce可以轻松地解决这个问题。我们只需要先声明一个counter变量，初值为0。在遇到(时counter加一，遇到)时counter减一。如果左右括号数目匹配，那最终结果为0。\n\n```js\n//Returns 0 if balanced.\nconst isParensBalanced = (str) => {\n  return str.split('').reduce((counter, char) => {\n    if(counter < 0) { //matched \")\" before \"(\"\n      return counter;\n    } else if(char === '(') {\n      return ++counter;\n    } else if(char === ')') {\n      return --counter;\n    }  else { //matched some other char\n      return counter;\n    }\n    \n  }, 0); //<-- starting value of the counter\n}\nisParensBalanced('(())') // 0 <-- balanced\nisParensBalanced('(asdfds)') //0 <-- balanced\nisParensBalanced('(()') // 1 <-- not balanced\nisParensBalanced(')(') // -1 <-- not balanced\n```\n\n## Polyfill\n\n```js\n// Production steps of ECMA-262, Edition 5, 15.4.4.21\n// Reference: http://es5.github.io/#x15.4.4.21\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\nif (!Array.prototype.reduce) {\n  Object.defineProperty(Array.prototype, 'reduce', {\n    value: function(callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError( 'Array.prototype.reduce ' + \n          'called on null or undefined' );\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError( callback +\n          ' is not a function');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0; \n\n      // Steps 3, 4, 5, 6, 7      \n      var k = 0; \n      var value;\n\n      if (arguments.length >= 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in o)) {\n          k++; \n        }\n\n        // 3. If len is 0 and initialValue is not present,\n        //    throw a TypeError exception.\n        if (k >= len) {\n          throw new TypeError( 'Reduce of empty array ' +\n            'with no initial value' );\n        }\n        value = o[k++];\n      }\n\n      // 8. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        // c. If kPresent is true, then\n        //    i.  Let kValue be ? Get(O, Pk).\n        //    ii. Let accumulator be ? Call(\n        //          callbackfn, undefined,\n        //          « accumulator, kValue, k, O »).\n        if (k in o) {\n          value = callback(value, o[k], k, o);\n        }\n\n        // d. Increase k by 1.      \n        k++;\n      }\n\n      // 9. Return accumulator.\n      return value;\n    }\n  });\n}\n```\n\n[参考链接](https://segmentfault.com/a/1190000013972464?utm_source=feed-content)\n\n---\n\n![Vincent van Gogh – The Parsonage at Nuenen](神奇的reduce/1917180847.jpg)\n\n> Vincent van Gogh – The Parsonage at Nuenen 1885\n","source":"_posts/神奇的reduce.md","raw":"---\ntitle: 神奇的reduce\ndate: 2018-08-01 12:06:23\ntags:\n  - reduce\n  - 数组\ncategories: 前端\n---\n\n# 神奇的reduce\n\n这是一个用得好就很装逼的方法，简约而强大。\n\n## 干什么用的\n\n> reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。\n说的挺复杂，看个mdn例子先：\n\n```js\nconst arrary1 = [1, 2, 3, 4]\nconst reducer = (accumulator, currentValue) => accumulator + currentValue\n//1+2+3+4\nconsole.log(array1.reduce(reducer))\n\n//5+1+2+3+4\nconsole.log(array1.reduce(reducer, 5))\n```\n\n## 语法\n\n```js\narr.reduce(callback[,initalValue])\n```\n\n### 参数\n\n* callback 回调函数\n  * accumulator **累加器累加回调的返回值**\n  * currentValue **数组中正在处理的元素**\n  * currentIndex(optional) 数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。\n  * array(optional) 调用reduce的数组\n\n* initalValue(optional) 用作第一个调用 callback的第一个参数的值\n\n### 返回值\n\n函数累计处理的结果\n\n## 描述\n\n`reduce`为数组中的每一个元素依次执行`callback`函数，不包括数组中被删除或从未被赋值的元素，接受四个参数。\n\n回调函数第一次执行时，`accumulator`和`currentValue`的取值有两种情况：调用`reduce`时提供`initialValue`，`accumulator`取值为`initialValue`，`currentValue`取数组中的第一个值；没有提供 `initialValue`，`accumulator`取数组中的第一个值，`currentValue`取数组中的第二个值。\n\n> 如果没有提供`initialValue`，`reduce` 会从索引1的地方开始执行 `callback` 方法，跳过第一个索引。如果提供`initialValue`，从索引0开始。\n\n如果数组为空且没有提供`initialValue`，会抛出`TypeError` 。如果数组仅有一个元素（无论位置如何）并且没有提供`initialValue`， 或者有提供`initialValue`但是数组为空，那么此唯一值将被返回并且`callback`不会被执行。\n\n提供初始值通常更安全，正如下面的例子，如果没有提供initialValue，则可能有三种输出：\n\n```js\nvar maxCallback = ( pre, cur ) => Math.max( pre.x, cur.x );\nvar maxCallback2 = ( max, cur ) => Math.max( max, cur );\n\n// reduce() without initialValue\n[ { x: 22 }, { x: 42 } ].reduce( maxCallback ); // 42\n[ { x: 22 }            ].reduce( maxCallback ); // { x: 22 }\n[                      ].reduce( maxCallback ); // TypeError\n\n// map/reduce; better solution, also works for empty arrays\n[ { x: 22 }, { x: 42 } ].map( el => el.x )\n                        .reduce( maxCallback2, -Infinity );\n```\n\n### reduce如何运行\n\n假如运行下段代码：\n\n```js\n[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array){\n  return accumulator + currentValue;\n});\n```\n\n| callback    | accumulator | currentValue | currentIndex | array           | return value |\n| ----------- | ----------- | ------------ | ------------ | --------------- | ------------ |\n| first call  | 0           | 1            | 1            | [0, 1, 2, 3, 4] | 1            |\n| second call | 1           | 2            | 2            | [0, 1, 2, 3, 4] | 3            |\n| third call  | 3           | 3            | 3            | [0, 1, 2, 3, 4] | 6            |\n| fourth call | 6           | 4            | 4            | [0, 1, 2, 3, 4] | 10           |\n由`reduce`返回的值将是上次回调调用的值`（10）`。\n\n你同样可以使用箭头函数的形式，下面的代码会输出跟前面一样的结果\n\n您还可以提供[Arrow Function](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions) 代替完整功能。 下面的代码将产生与上面的代码中相同的输出：\n\n```js\n[0, 1, 2, 3, 4].reduce((prev, curr) => prev + curr );\n```\n\n如果你打算提供一个初始值作为`reduce`方法的第二个参数，以下是运行过程及结果：\n\n```js\n[0, 1, 2, 3, 4].reduce((accumulator, currentValue, currentIndex, array) => { return accumulator + currentValue; }, 10 )\n```\n\n| callback    | accumulator | currentValue | currentIndex | array           | return value |\n| ----------- | ----------- | ------------ | ------------ | --------------- | ------------ |\n| first call  | 10          | 0            | 0            | [0, 1, 2, 3, 4] | 10           |\n| second call | 10          | 1            | 1            | [0, 1, 2, 3, 4] | 11           |\n| third call  | 11          | 2            | 2            | [0, 1, 2, 3, 4] | 13           |\n| fourth call | 13          | 3            | 3            | [0, 1, 2, 3, 4] | 16           |\n| fourth call | 16          | 4            | 4            | [0, 1, 2, 3, 4] | 20           |\n这种情况下reduce返回的值是`20`。\n\n## 例子\n\n数组里所有值的和\n\n```js\nvar sum = [0, 1, 2, 3].reduce(function (a, b) {\n  return a + b;\n}, 0);\n// sum is 6\n```\n\n你也可以写成箭头函数的形式：\n\n```js\nvar total = [ 0, 1, 2, 3 ].reduce(\n  ( acc, cur ) => acc + cur,\n  0\n);\n```\n\n### 将二维数组转化为一维\n\n```js\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  function(a, b) {\n    return a.concat(b);\n  },\n  []\n);\n// flattened is [0, 1, 2, 3, 4, 5]\n```\n\n你也可以写成箭头函数的形式：\n\n```js\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n ( acc, cur ) => acc.concat(cur),\n []\n);\n```\n\n### 计算数组中每个元素出现的次数\n\n```js\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nvar countedNames = names.reduce(function (allNames, name) { \n  if (name in allNames) {\n    allNames[name]++;\n  }\n  else {\n    allNames[name] = 1;\n  }\n  return allNames;\n}, {});\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n\n### 使用扩展运算符和initialValue绑定包含在对象数组中的数组\n\n```js\n// friends - an array of objects \n// where object field \"books\" - list of favorite books \nvar friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}];\n\n// allbooks - list which will contain all friends' books +  \n// additional list contained in initialValue\nvar allbooks = friends.reduce(function(prev, curr) {\n  return [...prev, ...curr.books];\n}, ['Alphabet']);\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', \n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n```\n\n### 数组去重\n\n```js\nlet arr = [1,2,1,2,3,5,4,5,3,4,4,4,4];\nlet result = arr.sort().reduce((init, current)=>{\n    if(init.length===0 || init[init.length-1]!==current){\n        init.push(current);\n    }\n    return init;\n}, []);\nconsole.log(result); //[1,2,3,4,5]\n```\n\n### 同时实现map和filter\n\n```js\nconst numbers = [10, 20, 30, 40];\nconst doubledOver50 = numbers.reduce((finalList, num) => {\n  \n  num = num * 2; \n  \n  if (num > 50) {\n    finalList.push(num);\n  }\n  return finalList;\n}, []);\ndoubledOver50; // [60, 80]\n```\n\n### 匹配圆括号\n\nreduce的另外一个用途是能够匹配给定字符串中的圆括号。对于一个含有圆括号的字符串，我们需要知道(和)的数量是否一致，并且(是否出现在)之前。\n\n下面的代码中我们使用reduce可以轻松地解决这个问题。我们只需要先声明一个counter变量，初值为0。在遇到(时counter加一，遇到)时counter减一。如果左右括号数目匹配，那最终结果为0。\n\n```js\n//Returns 0 if balanced.\nconst isParensBalanced = (str) => {\n  return str.split('').reduce((counter, char) => {\n    if(counter < 0) { //matched \")\" before \"(\"\n      return counter;\n    } else if(char === '(') {\n      return ++counter;\n    } else if(char === ')') {\n      return --counter;\n    }  else { //matched some other char\n      return counter;\n    }\n    \n  }, 0); //<-- starting value of the counter\n}\nisParensBalanced('(())') // 0 <-- balanced\nisParensBalanced('(asdfds)') //0 <-- balanced\nisParensBalanced('(()') // 1 <-- not balanced\nisParensBalanced(')(') // -1 <-- not balanced\n```\n\n## Polyfill\n\n```js\n// Production steps of ECMA-262, Edition 5, 15.4.4.21\n// Reference: http://es5.github.io/#x15.4.4.21\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\nif (!Array.prototype.reduce) {\n  Object.defineProperty(Array.prototype, 'reduce', {\n    value: function(callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError( 'Array.prototype.reduce ' + \n          'called on null or undefined' );\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError( callback +\n          ' is not a function');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0; \n\n      // Steps 3, 4, 5, 6, 7      \n      var k = 0; \n      var value;\n\n      if (arguments.length >= 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in o)) {\n          k++; \n        }\n\n        // 3. If len is 0 and initialValue is not present,\n        //    throw a TypeError exception.\n        if (k >= len) {\n          throw new TypeError( 'Reduce of empty array ' +\n            'with no initial value' );\n        }\n        value = o[k++];\n      }\n\n      // 8. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        // c. If kPresent is true, then\n        //    i.  Let kValue be ? Get(O, Pk).\n        //    ii. Let accumulator be ? Call(\n        //          callbackfn, undefined,\n        //          « accumulator, kValue, k, O »).\n        if (k in o) {\n          value = callback(value, o[k], k, o);\n        }\n\n        // d. Increase k by 1.      \n        k++;\n      }\n\n      // 9. Return accumulator.\n      return value;\n    }\n  });\n}\n```\n\n[参考链接](https://segmentfault.com/a/1190000013972464?utm_source=feed-content)\n\n---\n\n![Vincent van Gogh – The Parsonage at Nuenen](神奇的reduce/1917180847.jpg)\n\n> Vincent van Gogh – The Parsonage at Nuenen 1885\n","slug":"神奇的reduce","published":1,"updated":"2018-08-01T04:18:14.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkdjcwba0023ygz7rpmolxn2"}],"PostAsset":[{"_id":"source/_posts/pic/1132638050.jpg","slug":"1132638050.jpg","post":"cjkdjcw8a0000ygz7pnahndad","modified":1,"renderable":0},{"_id":"source/_posts/pic/1917180847.jpg","slug":"1917180847.jpg","post":"cjkdjcw8a0000ygz7pnahndad","modified":1,"renderable":0},{"_id":"source/_posts/pic/4282315052.jpg","slug":"4282315052.jpg","post":"cjkdjcw8a0000ygz7pnahndad","modified":1,"renderable":0},{"_id":"source/_posts/pic/431359834.jpg","slug":"431359834.jpg","post":"cjkdjcw8a0000ygz7pnahndad","modified":1,"renderable":0},{"_id":"source/_posts/pic/456066894.jpg","slug":"456066894.jpg","post":"cjkdjcw8a0000ygz7pnahndad","modified":1,"renderable":0},{"_id":"source/_posts/一次面试记录/456066894.jpg","slug":"456066894.jpg","post":"cjkdjcw8z0008ygz7cuknwumm","modified":1,"renderable":0},{"_id":"source/_posts/前端部署nginx配置/4282315052.jpg","slug":"4282315052.jpg","post":"cjkdjcw9e000hygz7bnntxnhl","modified":1,"renderable":0},{"_id":"source/_posts/四月的清风/1132638050.jpg","slug":"1132638050.jpg","post":"cjkdjcw9h000iygz72uf3k9an","modified":1,"renderable":0},{"_id":"source/_posts/pic/1959017488.jpg","slug":"1959017488.jpg","post":"cjkdjcw8a0000ygz7pnahndad","modified":1,"renderable":0},{"_id":"source/_posts/pic/2048547518.jpg","slug":"2048547518.jpg","post":"cjkdjcw8a0000ygz7pnahndad","modified":1,"renderable":0},{"_id":"source/_posts/pic/1997264555.jpg","slug":"1997264555.jpg","post":"cjkdjcw8a0000ygz7pnahndad","modified":1,"renderable":0},{"_id":"source/_posts/pic/565924812.jpg","slug":"565924812.jpg","post":"cjkdjcw8a0000ygz7pnahndad","modified":1,"renderable":0},{"_id":"source/_posts/pic/944233120.jpg","slug":"944233120.jpg","post":"cjkdjcw8a0000ygz7pnahndad","modified":1,"renderable":0},{"_id":"source/_posts/react-motion文档及学习/944233120.jpg","slug":"944233120.jpg","post":"cjkdjcw8h0002ygz7tap2m19b","modified":1,"renderable":0},{"_id":"source/_posts/redux之createStore/565924812.jpg","slug":"565924812.jpg","post":"cjkdjcwb4001yygz7w7r6b7i4","modified":1,"renderable":0},{"_id":"source/_posts/你好，世界/1959017488.jpg","slug":"1959017488.jpg","post":"cjkdjcw99000dygz755sbwrv9","modified":1,"renderable":0},{"_id":"source/_posts/小时候吃的/1997264555.jpg","slug":"1997264555.jpg","post":"cjkdjcw9l000mygz710oy6zk6","modified":1,"renderable":0},{"_id":"source/_posts/pic/196334101.jpg","slug":"196334101.jpg","post":"cjkdjcw8a0000ygz7pnahndad","modified":1,"renderable":0},{"_id":"source/_posts/pic/898024871.jpg","slug":"898024871.jpg","post":"cjkdjcw8a0000ygz7pnahndad","modified":1,"renderable":0},{"_id":"source/_posts/redux之compose/196334101.jpg","slug":"196334101.jpg","post":"cjkdjcw8p0006ygz7ps6viog8","modified":1,"renderable":0},{"_id":"source/_posts/三月的烟雨/898024871.jpg","slug":"898024871.jpg","post":"cjkdjcw95000cygz76zjzjdao","modified":1,"renderable":0},{"_id":"source/_posts/vue、react隐式实例化/596444702.jpg","post":"cjkdjcw8u0007ygz76y6t354g","slug":"596444702.jpg","modified":1,"renderable":1},{"_id":"source/_posts/家乡/1762221382.jpg","post":"cjkdjcw9p000oygz70xgot88g","slug":"1762221382.jpg","modified":1,"renderable":1},{"_id":"source/_posts/牢骚/431359834.jpg","post":"cjkdjcw9t000sygz7y4amuvzn","slug":"431359834.jpg","modified":1,"renderable":1},{"_id":"source/_posts/看到的面试题/713080393.jpg","post":"cjkdjcw9w000vygz7q5lfxrak","slug":"713080393.jpg","modified":1,"renderable":1},{"_id":"source/_posts/绕不开的promise/1012308194.jpg","post":"cjkdjcw9y000zygz7n0651fp5","slug":"1012308194.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/1012308194.jpg","post":"cjkdjcw8a0000ygz7pnahndad","slug":"1012308194.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/1762221382.jpg","post":"cjkdjcw8a0000ygz7pnahndad","slug":"1762221382.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/2900977792.jpg","post":"cjkdjcw8a0000ygz7pnahndad","slug":"2900977792.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/3526.jpg","post":"cjkdjcw8a0000ygz7pnahndad","slug":"3526.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/596444702.jpg","post":"cjkdjcw8a0000ygz7pnahndad","slug":"596444702.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/713080393.jpg","post":"cjkdjcw8a0000ygz7pnahndad","slug":"713080393.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/877090454.jpg","post":"cjkdjcw8a0000ygz7pnahndad","slug":"877090454.jpg","modified":1,"renderable":1},{"_id":"source/_posts/vue较少关注的地方/3526.jpg","post":"cjkdjcwb5001zygz74nhrdekf","slug":"3526.jpg","modified":1,"renderable":1},{"_id":"source/_posts/vue与react组件对比学习/877090454.jpg","post":"cjkdjcwb60021ygz74gkpuhe7","slug":"877090454.jpg","modified":1,"renderable":1},{"_id":"source/_posts/神奇的reduce/1917180847.jpg","post":"cjkdjcwba0023ygz7rpmolxn2","slug":"1917180847.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjkdjcw8a0000ygz7pnahndad","category_id":"cjkdjcw8m0004ygz74341ownw","_id":"cjkdjcw9a000eygz76g8zppyz"},{"post_id":"cjkdjcw8h0002ygz7tap2m19b","category_id":"cjkdjcw900009ygz7kaw9udun","_id":"cjkdjcw9i000kygz7ebgenfko"},{"post_id":"cjkdjcw99000dygz755sbwrv9","category_id":"cjkdjcw8m0004ygz74341ownw","_id":"cjkdjcw9m000nygz774ykvp2y"},{"post_id":"cjkdjcw9e000hygz7bnntxnhl","category_id":"cjkdjcw900009ygz7kaw9udun","_id":"cjkdjcw9q000qygz73nth2okx"},{"post_id":"cjkdjcw8p0006ygz7ps6viog8","category_id":"cjkdjcw900009ygz7kaw9udun","_id":"cjkdjcw9u000tygz7kqddjnyr"},{"post_id":"cjkdjcw8u0007ygz76y6t354g","category_id":"cjkdjcw900009ygz7kaw9udun","_id":"cjkdjcw9x000xygz7dx3ruy1t"},{"post_id":"cjkdjcw8z0008ygz7cuknwumm","category_id":"cjkdjcw900009ygz7kaw9udun","_id":"cjkdjcwa00012ygz7dkyn1bwk"},{"post_id":"cjkdjcw9w000vygz7q5lfxrak","category_id":"cjkdjcw900009ygz7kaw9udun","_id":"cjkdjcwa10015ygz7xrvaab8b"},{"post_id":"cjkdjcw9y000zygz7n0651fp5","category_id":"cjkdjcw900009ygz7kaw9udun","_id":"cjkdjcwa10016ygz7ytlqlg8d"},{"post_id":"cjkdjcw95000cygz76zjzjdao","category_id":"cjkdjcw9x000wygz7qpwdw9jw","_id":"cjkdjcwa20018ygz7u7haf7q3"},{"post_id":"cjkdjcw9h000iygz72uf3k9an","category_id":"cjkdjcw9x000wygz7qpwdw9jw","_id":"cjkdjcwa4001cygz7oof31ku8"},{"post_id":"cjkdjcw9l000mygz710oy6zk6","category_id":"cjkdjcw9x000wygz7qpwdw9jw","_id":"cjkdjcwa6001hygz7dmfbjpe1"},{"post_id":"cjkdjcw9p000oygz70xgot88g","category_id":"cjkdjcw9x000wygz7qpwdw9jw","_id":"cjkdjcwa7001kygz7x8nncbct"},{"post_id":"cjkdjcw9t000sygz7y4amuvzn","category_id":"cjkdjcw9x000wygz7qpwdw9jw","_id":"cjkdjcwa8001nygz7ybug50x3"},{"post_id":"cjkdjcwb4001yygz7w7r6b7i4","category_id":"cjkdjcw900009ygz7kaw9udun","_id":"cjkdjcwbc0024ygz79swuot4b"},{"post_id":"cjkdjcwb5001zygz74nhrdekf","category_id":"cjkdjcw900009ygz7kaw9udun","_id":"cjkdjcwbh0026ygz7nstvx57y"},{"post_id":"cjkdjcwb60021ygz74gkpuhe7","category_id":"cjkdjcw900009ygz7kaw9udun","_id":"cjkdjcwbm0029ygz7rfihjwij"},{"post_id":"cjkdjcwba0023ygz7rpmolxn2","category_id":"cjkdjcw900009ygz7kaw9udun","_id":"cjkdjcwbq002bygz709r9dt9t"}],"PostTag":[{"post_id":"cjkdjcw8a0000ygz7pnahndad","tag_id":"cjkdjcw8o0005ygz7bwks5e8e","_id":"cjkdjcw94000bygz7aemo16iy"},{"post_id":"cjkdjcw8h0002ygz7tap2m19b","tag_id":"cjkdjcw90000aygz7tpxqdrgs","_id":"cjkdjcw9w000uygz7v3zd0o8t"},{"post_id":"cjkdjcw8h0002ygz7tap2m19b","tag_id":"cjkdjcw9b000gygz7jrnjldxr","_id":"cjkdjcw9y000yygz75b3bswyd"},{"post_id":"cjkdjcw8h0002ygz7tap2m19b","tag_id":"cjkdjcw9l000lygz7aoesia0l","_id":"cjkdjcw9z0011ygz7bbcatmeo"},{"post_id":"cjkdjcw8p0006ygz7ps6viog8","tag_id":"cjkdjcw9s000rygz7ec27z4ht","_id":"cjkdjcwa3001aygz79g37zoyv"},{"post_id":"cjkdjcw8p0006ygz7ps6viog8","tag_id":"cjkdjcw9l000lygz7aoesia0l","_id":"cjkdjcwa4001dygz75eoghu1g"},{"post_id":"cjkdjcw8p0006ygz7ps6viog8","tag_id":"cjkdjcwa10014ygz7oiu8tt46","_id":"cjkdjcwa5001fygz7sqekk9gg"},{"post_id":"cjkdjcw8u0007ygz76y6t354g","tag_id":"cjkdjcwa30019ygz71ii0wh1g","_id":"cjkdjcwa7001jygz74vsgd7ql"},{"post_id":"cjkdjcw8u0007ygz76y6t354g","tag_id":"cjkdjcw9l000lygz7aoesia0l","_id":"cjkdjcwa7001lygz7f5yip3vk"},{"post_id":"cjkdjcw8z0008ygz7cuknwumm","tag_id":"cjkdjcwa6001iygz7ojatdcz9","_id":"cjkdjcwa8001oygz7xrs0xw76"},{"post_id":"cjkdjcw9e000hygz7bnntxnhl","tag_id":"cjkdjcwa8001mygz7hugn1iqv","_id":"cjkdjcwab001rygz7knft8pp4"},{"post_id":"cjkdjcw9e000hygz7bnntxnhl","tag_id":"cjkdjcwa9001pygz7dphc7awa","_id":"cjkdjcwab001sygz73uqzsq87"},{"post_id":"cjkdjcw9w000vygz7q5lfxrak","tag_id":"cjkdjcwa6001iygz7ojatdcz9","_id":"cjkdjcwad001vygz7op6q7oqx"},{"post_id":"cjkdjcw9w000vygz7q5lfxrak","tag_id":"cjkdjcwab001tygz7yxtgw42n","_id":"cjkdjcwad001wygz7lxf8skoh"},{"post_id":"cjkdjcw9y000zygz7n0651fp5","tag_id":"cjkdjcwac001uygz74g5r4gko","_id":"cjkdjcwad001xygz7gdw9he78"},{"post_id":"cjkdjcwb4001yygz7w7r6b7i4","tag_id":"cjkdjcw9s000rygz7ec27z4ht","_id":"cjkdjcwb60020ygz7i8pj3ieu"},{"post_id":"cjkdjcwb4001yygz7w7r6b7i4","tag_id":"cjkdjcw9l000lygz7aoesia0l","_id":"cjkdjcwba0022ygz7l4fwhkhf"},{"post_id":"cjkdjcwb4001yygz7w7r6b7i4","tag_id":"cjkdjcwa10014ygz7oiu8tt46","_id":"cjkdjcwbg0025ygz7ad4dupok"},{"post_id":"cjkdjcwb5001zygz74nhrdekf","tag_id":"cjkdjcwa30019ygz71ii0wh1g","_id":"cjkdjcwbl0028ygz7r48e0udd"},{"post_id":"cjkdjcwb60021ygz74gkpuhe7","tag_id":"cjkdjcwa30019ygz71ii0wh1g","_id":"cjkdjcwbp002aygz7jk4yu9s9"},{"post_id":"cjkdjcwb60021ygz74gkpuhe7","tag_id":"cjkdjcw9l000lygz7aoesia0l","_id":"cjkdjcwbt002cygz70ju7oas0"},{"post_id":"cjkdjcwba0023ygz7rpmolxn2","tag_id":"cjkdjcwbl0027ygz7fza2swhx","_id":"cjkdjcwc4002eygz72tfro8wf"},{"post_id":"cjkdjcwba0023ygz7rpmolxn2","tag_id":"cjkdjcwbt002dygz7oxw5k9x6","_id":"cjkdjcwc9002fygz7x6gvv17t"}],"Tag":[{"name":"图库","_id":"cjkdjcw8o0005ygz7bwks5e8e"},{"name":"翻译","_id":"cjkdjcw90000aygz7tpxqdrgs"},{"name":"react-motion","_id":"cjkdjcw9b000gygz7jrnjldxr"},{"name":"react","_id":"cjkdjcw9l000lygz7aoesia0l"},{"name":"redux","_id":"cjkdjcw9s000rygz7ec27z4ht"},{"name":"源码","_id":"cjkdjcwa10014ygz7oiu8tt46"},{"name":"vue","_id":"cjkdjcwa30019ygz71ii0wh1g"},{"name":"面试","_id":"cjkdjcwa6001iygz7ojatdcz9"},{"name":"nginx","_id":"cjkdjcwa8001mygz7hugn1iqv"},{"name":"部署","_id":"cjkdjcwa9001pygz7dphc7awa"},{"name":"题目","_id":"cjkdjcwab001tygz7yxtgw42n"},{"name":"promise","_id":"cjkdjcwac001uygz74g5r4gko"},{"name":"reduce","_id":"cjkdjcwbl0027ygz7fza2swhx"},{"name":"数组","_id":"cjkdjcwbt002dygz7oxw5k9x6"}]}}