{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1533085264607},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1533085264608},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1533085264609},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1533085264611},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1533085264612},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1533085264613},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1533085264614},{"_id":"themes/next/LICENSE.md","hash":"f0190c7d83a98464549a6b3a51bb206148d88e1b","modified":1533085264615},{"_id":"themes/next/README.md","hash":"2d142fa1bdfab00abf8e99f972346e15572c9b12","modified":1533085264616},{"_id":"themes/next/_config.yml","hash":"451f940964d364125fc8072daba9c154ed266347","modified":1533114234894},{"_id":"themes/next/bower.json","hash":"72d7f5ef565cca1da30ba64fc04075b9ac99e319","modified":1533085264618},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1533085264619},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1533085264680},{"_id":"themes/next/package.json","hash":"735ace0b7fe3b1171c220c5424fcd4fe3aadd7f8","modified":1533085264820},{"_id":"source/_posts/pic.md","hash":"2ff246daf17e43a4218534d49a974efd4dbdd8c5","modified":1533097999174},{"_id":"source/_posts/你好，世界.md","hash":"5067634223e2d19d21e9b371f0662c77baed2e25","modified":1533096163197},{"_id":"source/_posts/神奇的reduce.md","hash":"aef3cb8b3782f9d5ef3beebf9a522676357356b5","modified":1533097094938},{"_id":"source/categories/index.md","hash":"e59c31249747c16ab710f2f8a0d7263d20d5092d","modified":1533092037843},{"_id":"source/tags/index.md","hash":"a7525bc7a300c2274c2e49464ad04d98b93ebe40","modified":1533092202840},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1533085264621},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1533085264624},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1533085264623},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1533085264625},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1533085264657},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"f2fd611a84dd6f9ed5395b63e187e29e9effbcd3","modified":1533085264659},{"_id":"themes/next/docs/LICENSE","hash":"5b702310012d480b40529fd10cf1872f687277a0","modified":1533085264660},{"_id":"themes/next/docs/MATH.md","hash":"34a46ca9a05b4570903beaadd4807e6759afb52e","modified":1533085264662},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1533085264663},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1533085264681},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1533085264683},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1533085264684},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1533085264685},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1533085264686},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1533085264687},{"_id":"themes/next/languages/ja.yml","hash":"7836f1de1f383d3a53770a03498cc39a37674f0c","modified":1533085264689},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1533085264690},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1533085264691},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1533085264692},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1533085264693},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1533085264694},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1533085264695},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1533085264696},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1533085264697},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1533085264698},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1533085264699},{"_id":"themes/next/layout/_layout.swig","hash":"2db9b03efc68be842b8f79fe2f0fd7fb09e8885a","modified":1533085264705},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1533085264813},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1533085264813},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1533085264814},{"_id":"themes/next/layout/page.swig","hash":"9ddf40303f82e3db76d59dc82b6d4eadfed203c6","modified":1533085264816},{"_id":"themes/next/layout/post.swig","hash":"0554f42f90f4a524666c2b520be30b689c1d6a87","modified":1533085264817},{"_id":"themes/next/layout/schedule.swig","hash":"d99b9eff0cff38caf095445f27c08aaf11a5b862","modified":1533085264818},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1533085264819},{"_id":"themes/next/scripts/helpers.js","hash":"7849f9b9a86fc82d6e186e32a5e26e1f27c49b47","modified":1533085264821},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1533085264823},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1533085264824},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1533085265123},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1533085265124},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1533085265125},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085265012},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1533085264664},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1533085264665},{"_id":"themes/next/docs/ru/README.md","hash":"bbe7ac3ef6352b7fedbba2ab800915e33251adf8","modified":1533085264667},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1533085264668},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1533085264670},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1533085264671},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"f2a2d6e68c5f65e27303b40f5285a8a4a5adae4c","modified":1533085264672},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1533085264674},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1533085264675},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"7214fcd1b5830e62b3ac0836ad2d1b0fa391ae12","modified":1533085264676},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"4d68054b062b3c8404b146a155d9624d2d25dd9b","modified":1533085264677},{"_id":"themes/next/docs/zh-CN/README.md","hash":"74547943ee6cba2e2bbbd67d306ee4de9db1a2bd","modified":1533085264678},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1533085264679},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1533085264702},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1533085264703},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1533085264704},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"9b0eb348c131813160a8647f612ceb1278f60619","modified":1533105618545},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1533085264710},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"8ff97c3f4eb888207bdc50066053c97d890e0202","modified":1533085264711},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"e8dfb86eb62b9c2bc1435d6d1afa95d3b4c7b931","modified":1533085264712},{"_id":"themes/next/layout/_macro/post.swig","hash":"3d9b8b40012f1fa144449a0184266669b1ca6bed","modified":1533105692796},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56733f92352b891b0bb1baca293f68f6c8928b0b","modified":1533085264715},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a9519b4f82aa516e516317d0447bf5c5c7ffb544","modified":1533085264716},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"7a9b687087793bf5e218cbc345214f927fa5601a","modified":1533085264718},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"4b48fdbfe3bf41ddeda4ff74c1ff17ab9f15c14e","modified":1533085264719},{"_id":"themes/next/layout/_partials/comments.swig","hash":"412d2a0e18a237e490e1b8bce5547558768b9da3","modified":1533085264721},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7cba33ea7dd3c8948f29794d64c495823c88ad54","modified":1533107025723},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"206cbd6ac9ca6a219a8516f59beae25b3c770199","modified":1533085264733},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1533085264735},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"27fb1d81151b9b79683e488579df19eee7e654d6","modified":1533085264747},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"f544e21883d249d5a341c684c97bd25831008f07","modified":1533085264748},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"f8c7e729ad6e72b4c705a2c5d5041589c2b4cc52","modified":1533085264749},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f134aeb8d5bee351e5277edb92ac694af314b75f","modified":1533085264757},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"ed62ea83d3f2c9db2ea57bf23a7d765ed82504c2","modified":1533085264774},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c62c37474c8de78cf34e54c6219b503ec28d9815","modified":1533085264783},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"53861f78a1fb52e96a43cf6909e1530dcf6cbff8","modified":1533085264784},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"736cb278fa09d3b4ed6f305b56353941ea918793","modified":1533085264786},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1533085264791},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"ccf0035086e14dcefa24c2907301edf4c37d5448","modified":1533085264792},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1533085264793},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1533085264794},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"a174d4a0c9188f9c4a2652f49bfa7a60ad0a83e3","modified":1533085264795},{"_id":"themes/next/scripts/tags/button.js","hash":"510f3711a9c9d3e2a844250647d90e8359e7d130","modified":1533085264826},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1533085264827},{"_id":"themes/next/scripts/tags/exturl.js","hash":"83e48148d2f4f8543f6833effa8a26eb0b60f2f0","modified":1533085264828},{"_id":"themes/next/scripts/tags/full-image.js","hash":"ef2c2985a3edb9f69740740c5bc42d4b692c86fd","modified":1533085264829},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"2b969ca830862b2bc119b69ede4bd971e27a6ff8","modified":1533085264831},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"c68b1e6d4a8236d6731e4175ef3ddc284255d63b","modified":1533085264832},{"_id":"themes/next/scripts/tags/label.js","hash":"bb502616bfabe85de5de903074ec6afe627f8413","modified":1533085264833},{"_id":"themes/next/scripts/tags/note.js","hash":"bd3310a5890bded1bda9ba3ad6f98ee44ecb101a","modified":1533085264834},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2d257e26718d4011509fd6f530d2ea37e50e3e66","modified":1533085264835},{"_id":"themes/next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1533085265010},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1533085265014},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1533085265016},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1533085265018},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1533085265020},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1533085265022},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1533085265023},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1533085265025},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1533085265027},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1533085265028},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1533085265029},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1533085265030},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1533085265031},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533085265032},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1533085265033},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533085265035},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1533085265036},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1533085265037},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1533085265038},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085264754},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085264755},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085264960},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085264961},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085264967},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085265006},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533085265009},{"_id":"source/_posts/pic/1132638050.jpg","hash":"45820436c83d7b9ddb9b548a789c1831eb0a4c39","modified":1533097849847},{"_id":"source/_posts/pic/1917180847.jpg","hash":"1350a163c67409b6ab87784de31d73a16c4fe613","modified":1533096738930},{"_id":"source/_posts/神奇的reduce/1917180847.jpg","hash":"1350a163c67409b6ab87784de31d73a16c4fe613","modified":1533097059746},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1533085264708},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"aab518204d3125e948796a9ba6b56b09cade2d92","modified":1533085264709},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1533085264724},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"0b8349710caf9691741a457aa746add35245048e","modified":1533085264726},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"09109a5c5a301e7cc5e3c7aec32b0164739fc7d4","modified":1533085264727},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"19050627bc23b0b2c2e65e7248c0f88468eb8ea5","modified":1533085264728},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1533085264729},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"f3ae3168801304af3d80ec3b84264e1d4201cb89","modified":1533085264731},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"3f11ae8e9084f39628cd2006931d39a2069b9dd6","modified":1533085264732},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1533085264737},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1533085264738},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1533085264739},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1533085264740},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1533085264742},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1533085264743},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1533085264744},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"580e9d9c4d8783ee6200d845ae16c98979bf1ea3","modified":1533085264752},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1533085264753},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1533085264756},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1533085264759},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1533085264761},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1533085264762},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1533085264764},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"c43f41b7f3c0743d1e673af2e787ea34a67fc9cb","modified":1533085264763},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1533085264765},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"d67d9a176a276cdab6f2bcb7eb3650fbca5459c4","modified":1533085264767},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1533085264768},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1533085264769},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"809f6d31c24ee0012e12631f5893a79f69e7bc84","modified":1533085264770},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1533085264771},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1533085264772},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1533085264773},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1533085264776},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"4a2d2269f23e90c1311bd867d22def0b4a092bf1","modified":1533085264777},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"292cdd1059b76d3d10486b71c99d9afb3e59ea44","modified":1533085264779},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"34cc66d4dbada2d561ba6f70fd9a75207c5adbd4","modified":1533085264780},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"694483f2d853c65b87a6a70e38dbc40e40eb1332","modified":1533085264781},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"d05e70a416963023ee1978e4168d58bcfd956ed3","modified":1533085264782},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"30e9e55d9af2ced6e6b156a042026a8b480f0ab0","modified":1533085264787},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1533085264789},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"c0c2fd87e71f0beb542aa50c0bc875da5aa5c44b","modified":1533085264790},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1533085264800},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"71c897f9b107dd0de1b7f649633cf583c206a9db","modified":1533085264801},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1533085264810},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1533085264812},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"9769e33d5119aac82b944c6709e4c190fcc1c818","modified":1533105862740},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1533085264959},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1533085264962},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0882d76333ab409e8d3362c284b91a0f0ae761ae","modified":1533085264965},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"8d6cf29f63c90364f4d3c336f7c9bb794b4c46cc","modified":1533085265004},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1533085265005},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"72927abd51d3a607a6ba32cf882390792b34e834","modified":1533085265007},{"_id":"themes/next/source/css/_variables/base.styl","hash":"1625e3e1da6c453108526e027dae25e311b18adf","modified":1533085265008},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1533085265041},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1533085265042},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1533085265045},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1533085265046},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1533085265085},{"_id":"themes/next/source/js/src/motion.js","hash":"6b5a2646b775609630b9ff6221fa58b6823a25fa","modified":1533085265087},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1533085265088},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1533085265091},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1533085265092},{"_id":"themes/next/source/js/src/utils.js","hash":"9cddff04f9ff64b1e3202e1726eff512a2ef8497","modified":1533085265093},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1533085265101},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1533085265103},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1533085265120},{"_id":"source/_posts/pic/1959017488.jpg","hash":"1b7b23482597376f03768d36698cacb7a22ac414","modified":1533096726160},{"_id":"source/_posts/pic/1997264555.jpg","hash":"84c3d5ba4ca31370133474375b8346782c532863","modified":1533097849797},{"_id":"source/_posts/pic/2048547518.jpg","hash":"fb36ccd58e555f294a7dc296b06f312b77af7eda","modified":1533096736560},{"_id":"source/_posts/你好，世界/1959017488.jpg","hash":"1b7b23482597376f03768d36698cacb7a22ac414","modified":1533095916996},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1533085265096},{"_id":"source/_posts/pic/898024871.jpg","hash":"6d5c2f0c51d14361f2a7e776c7bd466c7373ad33","modified":1533097849823},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6e076b5e183eedf425a445e99851f938789c3194","modified":1533085264797},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1533085264799},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1533085264838},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1533085264840},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1533085264861},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1533085264863},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1533085264865},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1533085264890},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1533085264922},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"fbb6be577529c750ef7c872fe7abdc7ab0faf0f8","modified":1533085264946},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"97bb39756e85f5b27bba7f43270105ad01d736c9","modified":1533085264947},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1533085264951},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1533085264953},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1533085264954},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1533085264955},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"52bc8ba71b91d954530b35dfc63b402a02b1321d","modified":1533085264956},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7e4e499964c2112d47e6f9d2b6e87c31ec8269e2","modified":1533085264970},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1533085264972},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1533085264974},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1533085264975},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f3aa863adf972569b72f2df6bc6a914e7daace99","modified":1533085264977},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa6c00fdaf8f0ca3b690a5a556671745fb67e2c9","modified":1533085264978},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1533085264979},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2ccb9bdc309b7c1ef183a3dbb0a4621bec54a328","modified":1533085264980},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1533085264986},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1533085264988},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"3cc7646583218d16925ced7b70865e63a901d4a7","modified":1533085264989},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1533085264991},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1533085264992},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1533085264995},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ccf5a4761cb0ce451b5e994cfabf8769248a45c1","modified":1533085264996},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"cc961108b12ab97d9216606ceb1cd1cd31ab20f0","modified":1533085264997},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1533085264999},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"df16dc995eb9ad498df2edcfc3e20528fc9aa133","modified":1533085265000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"be72740313a9a0477b8a22f62e4c8ffa6d23a2e5","modified":1533085265001},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1533085265002},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"6ed3f2389457daa382de96a08633d9faaaaf53fb","modified":1533085265090},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1533085265099},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7dd247c8869fdefb5a007045d00f3ef8ceecf300","modified":1533085264867},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"3f3d2a43d1a326bad25b633c8ec9ddd87867224c","modified":1533085264870},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1533085264872},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1533085264873},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1533085264875},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1533085264877},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1533085264876},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1533085264879},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"835c1340571bd6c4ec263c482cf13283fb047e49","modified":1533085264880},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1533085264882},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1533085264883},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"630be616447a982413030e561bbd3a80ac14b120","modified":1533085264885},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1533085264886},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1533085264887},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1533085264888},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1533085264889},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1533085264893},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1533085264894},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1533085264892},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1533085264895},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"317c9ceda655e9dc373ce8e7b71d20b794fce9a4","modified":1533085264897},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1533085264898},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1533085264899},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1533085264900},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1533085264901},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1533085264902},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1533085264903},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1533085264904},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"adfd6d2d3b34adc4b476a0ea91e19020456a3b1a","modified":1533085264906},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5c3141d58970a0614896b6a62fd7a8a8caf4e401","modified":1533085264907},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1533085264906},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bb8162bb7c7b0b255a0e8e234eb382a0879a4962","modified":1533085264908},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1533085264910},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"debe322cc9e2688ecf38d0b6afcd6b71ad02fbd0","modified":1533085264912},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1533085264913},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1533085264915},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1533085264914},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1533085264916},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9e05a2232faabb41bcebb51d545d897a76f077da","modified":1533085264917},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1533085264918},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"94d76e6da600a36d80e2470326ebb6b3be447ccb","modified":1533085264919},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1533085264920},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1533085264923},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"02ee0eb49c256ecb4e71bbc65072f9147418d7d7","modified":1533085264924},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1533085264925},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1533085264927},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1533085264928},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1533085264929},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1533085264930},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1533085264932},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1533085264933},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f4d8144c22544bdb89787c14ab9d39578dae4b7c","modified":1533085264935},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1533085264936},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1533085264938},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1533085264939},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1533085264940},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1533085264941},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"acfdd76b1c90d2e384affb3d0006a39b524609d2","modified":1533085264943},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"c31fbaec7e6373ecfb8588500b972d451695a6ad","modified":1533085264944},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1533085264982},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1533085264984},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1533085264993},{"_id":"public/tags/index.html","hash":"dce48ba19445441715d969db2d1916e36f5fec5b","modified":1533114350359},{"_id":"public/categories/index.html","hash":"615e3cda40f62ba2e7be2c809a97a333efbb0ff8","modified":1533114350359},{"_id":"public/2018/08/01/pic/index.html","hash":"4208092f061c26513435060130d15fc62935f0c7","modified":1533114350359},{"_id":"public/archives/index.html","hash":"2af6db2954839dd949cc84e9ee28419ca5c54702","modified":1533114350359},{"_id":"public/archives/2018/index.html","hash":"82e477e4f93fc60f04cf293d32a93c3d59ccf680","modified":1533114350359},{"_id":"public/archives/2018/08/index.html","hash":"0e56b23f7fb40a5e80b40590b77c72ed81687750","modified":1533114350359},{"_id":"public/categories/杂记/index.html","hash":"d1bc3dc5957bc75157f7b3d64cfda2d8f1084eb3","modified":1533114350359},{"_id":"public/categories/前端/index.html","hash":"62d993cee8a66a77902589af1491d7354988bbf4","modified":1533114350359},{"_id":"public/tags/图库/index.html","hash":"b525a1b9b924f9f25ad279ac8e813ae3a3fae2cf","modified":1533114350359},{"_id":"public/tags/reduce/index.html","hash":"4552af5c2582e6adb3bc0f8698535a33ccdb41e5","modified":1533114350359},{"_id":"public/tags/数组/index.html","hash":"25d4c1d8f6ce025a3dcc674cd55c675b6db74bee","modified":1533114350359},{"_id":"public/2018/08/01/神奇的reduce/index.html","hash":"565024de4777c4b9a87f164b664351a963324946","modified":1533114350360},{"_id":"public/2018/08/01/你好，世界/index.html","hash":"176c7659bfd3d65a6294efaa36b321d779f7eb9e","modified":1533114350360},{"_id":"public/index.html","hash":"7bc039c60551456cc60a0db67eb4cc8da40e4005","modified":1533114350360},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1533114350370},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1533114350370},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1533114350371},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1533114350371},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1533114350371},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1533114350371},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1533114350371},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1533114350371},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1533114350371},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1533114350371},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1533114350372},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533114350372},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1533114350372},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1533114350372},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533114350372},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1533114350372},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1533114350372},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1533114350372},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1533114350883},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1533114350883},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1533114350883},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1533114350883},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1533114350883},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1533114350883},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1533114350883},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1533114350883},{"_id":"public/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1533114350883},{"_id":"public/css/main.css","hash":"a57a9d2ccb4c7028b1a77a99a2699162885ac585","modified":1533114350883},{"_id":"public/2018/08/01/pic/1132638050.jpg","hash":"45820436c83d7b9ddb9b548a789c1831eb0a4c39","modified":1533114350883},{"_id":"public/2018/08/01/pic/1917180847.jpg","hash":"1350a163c67409b6ab87784de31d73a16c4fe613","modified":1533114350884},{"_id":"public/2018/08/01/神奇的reduce/1917180847.jpg","hash":"1350a163c67409b6ab87784de31d73a16c4fe613","modified":1533114350884},{"_id":"public/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1533114350897},{"_id":"public/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1533114350897},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1533114350897},{"_id":"public/2018/08/01/pic/1959017488.jpg","hash":"1b7b23482597376f03768d36698cacb7a22ac414","modified":1533114350897},{"_id":"public/2018/08/01/pic/1997264555.jpg","hash":"84c3d5ba4ca31370133474375b8346782c532863","modified":1533114350897},{"_id":"public/2018/08/01/pic/2048547518.jpg","hash":"fb36ccd58e555f294a7dc296b06f312b77af7eda","modified":1533114350897},{"_id":"public/2018/08/01/你好，世界/1959017488.jpg","hash":"1b7b23482597376f03768d36698cacb7a22ac414","modified":1533114350899},{"_id":"public/2018/08/01/pic/898024871.jpg","hash":"6d5c2f0c51d14361f2a7e776c7bd466c7373ad33","modified":1533114350907},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1533114350908},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1533114350909},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1533114351106},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1533114351132}],"Category":[{"name":"杂记","_id":"cjkawp6nj0005bwz77mr0gpuh"},{"name":"前端","_id":"cjkawp6oo0009bwz7iyll6pn0"}],"Data":[],"Page":[{"title":"标签","date":"2018-08-01T02:56:42.840Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 日期\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-08-01T02:56:42.840Z","path":"tags/index.html","layout":"page","_id":"cjkawp6na0001bwz7clugnbxr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-08-01T02:53:57.843Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 日期\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-08-01T02:53:57.843Z","path":"categories/index.html","layout":"page","_id":"cjkawp6ne0003bwz7wrntc5zj","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"pic","date":"2018-08-01T04:10:42.000Z","_content":"\n收集一些图片作为文章的插图。\n<!-- more -->\n\n## 2018/8/1\n\n![Vincent van Gogh – Cafe Terrace in Arles at Night](pic/1959017488.jpg)\n\n> Vincent van Gogh – Cafe Terrace in Arles at Night 1888\n\n---\n\n![Vincent van Gogh – The Parsonage at Nuenen](pic/1917180847.jpg)\n\n> Vincent van Gogh – The Parsonage at Nuenen 1885\n\n---\n\n![Vincent van Gogh – Canal with Women Washing](pic/2048547518.jpg)\n\n> Vincent van Gogh – Canal with Women Washing 1888\n\n---\n\n![Vincent van Gogh – Sunny Lawn in a Public Park](pic/898024871.jpg)\n\n> Vincent van Gogh – Sunny Lawn in a Public Park 1888\n\n---\n\n![Vincent van Gogh – Old Man in Sorrow](pic/1132638050.jpg)\n\n> Vincent van Gogh – Old Man in Sorrow 1890\n\n---\n\n![Vincent van Gogh – Noon Rest from (after Millet)](pic/1997264555.jpg)\n\n> Vincent van Gogh – Noon Rest from (after Millet) 1890\n\n---\n","source":"_posts/pic.md","raw":"---\ntitle: pic\ndate: 2018-08-01 12:10:42\ntags: 图库\n---\n\n收集一些图片作为文章的插图。\n<!-- more -->\n\n## 2018/8/1\n\n![Vincent van Gogh – Cafe Terrace in Arles at Night](pic/1959017488.jpg)\n\n> Vincent van Gogh – Cafe Terrace in Arles at Night 1888\n\n---\n\n![Vincent van Gogh – The Parsonage at Nuenen](pic/1917180847.jpg)\n\n> Vincent van Gogh – The Parsonage at Nuenen 1885\n\n---\n\n![Vincent van Gogh – Canal with Women Washing](pic/2048547518.jpg)\n\n> Vincent van Gogh – Canal with Women Washing 1888\n\n---\n\n![Vincent van Gogh – Sunny Lawn in a Public Park](pic/898024871.jpg)\n\n> Vincent van Gogh – Sunny Lawn in a Public Park 1888\n\n---\n\n![Vincent van Gogh – Old Man in Sorrow](pic/1132638050.jpg)\n\n> Vincent van Gogh – Old Man in Sorrow 1890\n\n---\n\n![Vincent van Gogh – Noon Rest from (after Millet)](pic/1997264555.jpg)\n\n> Vincent van Gogh – Noon Rest from (after Millet) 1890\n\n---\n","slug":"pic","published":1,"updated":"2018-08-01T04:33:19.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkawp6n40000bwz75yzav9o5","content":"<p>收集一些图片作为文章的插图。<br><a id=\"more\"></a></p>\n<h2 id=\"2018-8-1\"><a href=\"#2018-8-1\" class=\"headerlink\" title=\"2018/8/1\"></a>2018/8/1</h2><p><img src=\"/newBlog/2018/08/01/pic/1959017488.jpg\" alt=\"Vincent van Gogh – Cafe Terrace in Arles at Night\"></p>\n<blockquote>\n<p>Vincent van Gogh – Cafe Terrace in Arles at Night 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/1917180847.jpg\" alt=\"Vincent van Gogh – The Parsonage at Nuenen\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Parsonage at Nuenen 1885</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/2048547518.jpg\" alt=\"Vincent van Gogh – Canal with Women Washing\"></p>\n<blockquote>\n<p>Vincent van Gogh – Canal with Women Washing 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/898024871.jpg\" alt=\"Vincent van Gogh – Sunny Lawn in a Public Park\"></p>\n<blockquote>\n<p>Vincent van Gogh – Sunny Lawn in a Public Park 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/1132638050.jpg\" alt=\"Vincent van Gogh – Old Man in Sorrow\"></p>\n<blockquote>\n<p>Vincent van Gogh – Old Man in Sorrow 1890</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/1997264555.jpg\" alt=\"Vincent van Gogh – Noon Rest from (after Millet)\"></p>\n<blockquote>\n<p>Vincent van Gogh – Noon Rest from (after Millet) 1890</p>\n</blockquote>\n<hr>\n","site":{"data":{}},"excerpt":"<p>收集一些图片作为文章的插图。<br></p>","more":"<p></p>\n<h2 id=\"2018-8-1\"><a href=\"#2018-8-1\" class=\"headerlink\" title=\"2018/8/1\"></a>2018/8/1</h2><p><img src=\"/newBlog/2018/08/01/pic/1959017488.jpg\" alt=\"Vincent van Gogh – Cafe Terrace in Arles at Night\"></p>\n<blockquote>\n<p>Vincent van Gogh – Cafe Terrace in Arles at Night 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/1917180847.jpg\" alt=\"Vincent van Gogh – The Parsonage at Nuenen\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Parsonage at Nuenen 1885</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/2048547518.jpg\" alt=\"Vincent van Gogh – Canal with Women Washing\"></p>\n<blockquote>\n<p>Vincent van Gogh – Canal with Women Washing 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/898024871.jpg\" alt=\"Vincent van Gogh – Sunny Lawn in a Public Park\"></p>\n<blockquote>\n<p>Vincent van Gogh – Sunny Lawn in a Public Park 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/1132638050.jpg\" alt=\"Vincent van Gogh – Old Man in Sorrow\"></p>\n<blockquote>\n<p>Vincent van Gogh – Old Man in Sorrow 1890</p>\n</blockquote>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/pic/1997264555.jpg\" alt=\"Vincent van Gogh – Noon Rest from (after Millet)\"></p>\n<blockquote>\n<p>Vincent van Gogh – Noon Rest from (after Millet) 1890</p>\n</blockquote>\n<hr>"},{"title":"你好，世界","date":"2018-08-01T03:14:20.000Z","_content":"\n折腾了一天,终于用 `hexo` 搭出来博客了,一开始上手的时候感觉很简单,应该小半天就能把原来的文章迁移过来，结果还是遇到了不少的坑。中途在 `gitee` 和 `github` 上来回折腾，`github` 实在是太卡了，无形中增加了不少搭建的时间。所幸，最终还是弄好了，下一步就是把之前写在另一个仓库下的文章迁移过来了。\n\n`hexo` 最大的方便就是完成了基本的配置和主题的选择之后，只要专心写好 `markdown` 就好了，文章页面就交由 `hexo` 处理即可，大大提升对文章本身的专注力。\n\n最后还是要说一句：“你好，世界！”\n\n---\n\n![Cafe Terrace in Arles at Night](你好，世界/1959017488.jpg)\n> Vincent van Gogh – Cafe Terrace in Arles at Night 1888\n","source":"_posts/你好，世界.md","raw":"---\ntitle: 你好，世界\ndate: 2018-08-01 11:14:20\ntags:\ncategories: 杂记\n---\n\n折腾了一天,终于用 `hexo` 搭出来博客了,一开始上手的时候感觉很简单,应该小半天就能把原来的文章迁移过来，结果还是遇到了不少的坑。中途在 `gitee` 和 `github` 上来回折腾，`github` 实在是太卡了，无形中增加了不少搭建的时间。所幸，最终还是弄好了，下一步就是把之前写在另一个仓库下的文章迁移过来了。\n\n`hexo` 最大的方便就是完成了基本的配置和主题的选择之后，只要专心写好 `markdown` 就好了，文章页面就交由 `hexo` 处理即可，大大提升对文章本身的专注力。\n\n最后还是要说一句：“你好，世界！”\n\n---\n\n![Cafe Terrace in Arles at Night](你好，世界/1959017488.jpg)\n> Vincent van Gogh – Cafe Terrace in Arles at Night 1888\n","slug":"你好，世界","published":1,"updated":"2018-08-01T04:02:43.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkawp6nc0002bwz7x6tvwkfk","content":"<p>折腾了一天,终于用 <code>hexo</code> 搭出来博客了,一开始上手的时候感觉很简单,应该小半天就能把原来的文章迁移过来，结果还是遇到了不少的坑。中途在 <code>gitee</code> 和 <code>github</code> 上来回折腾，<code>github</code> 实在是太卡了，无形中增加了不少搭建的时间。所幸，最终还是弄好了，下一步就是把之前写在另一个仓库下的文章迁移过来了。</p>\n<p><code>hexo</code> 最大的方便就是完成了基本的配置和主题的选择之后，只要专心写好 <code>markdown</code> 就好了，文章页面就交由 <code>hexo</code> 处理即可，大大提升对文章本身的专注力。</p>\n<p>最后还是要说一句：“你好，世界！”</p>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/你好，世界/1959017488.jpg\" alt=\"Cafe Terrace in Arles at Night\"></p>\n<blockquote>\n<p>Vincent van Gogh – Cafe Terrace in Arles at Night 1888</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>折腾了一天,终于用 <code>hexo</code> 搭出来博客了,一开始上手的时候感觉很简单,应该小半天就能把原来的文章迁移过来，结果还是遇到了不少的坑。中途在 <code>gitee</code> 和 <code>github</code> 上来回折腾，<code>github</code> 实在是太卡了，无形中增加了不少搭建的时间。所幸，最终还是弄好了，下一步就是把之前写在另一个仓库下的文章迁移过来了。</p>\n<p><code>hexo</code> 最大的方便就是完成了基本的配置和主题的选择之后，只要专心写好 <code>markdown</code> 就好了，文章页面就交由 <code>hexo</code> 处理即可，大大提升对文章本身的专注力。</p>\n<p>最后还是要说一句：“你好，世界！”</p>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/你好，世界/1959017488.jpg\" alt=\"Cafe Terrace in Arles at Night\"></p>\n<blockquote>\n<p>Vincent van Gogh – Cafe Terrace in Arles at Night 1888</p>\n</blockquote>\n"},{"title":"神奇的reduce","date":"2018-08-01T04:06:23.000Z","_content":"\n# 神奇的reduce\n\n这是一个用得好就很装逼的方法，简约而强大。\n\n## 干什么用的\n\n> reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。\n说的挺复杂，看个mdn例子先：\n\n```js\nconst arrary1 = [1, 2, 3, 4]\nconst reducer = (accumulator, currentValue) => accumulator + currentValue\n//1+2+3+4\nconsole.log(array1.reduce(reducer))\n\n//5+1+2+3+4\nconsole.log(array1.reduce(reducer, 5))\n```\n\n## 语法\n\n```js\narr.reduce(callback[,initalValue])\n```\n\n### 参数\n\n* callback 回调函数\n  * accumulator **累加器累加回调的返回值**\n  * currentValue **数组中正在处理的元素**\n  * currentIndex(optional) 数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。\n  * array(optional) 调用reduce的数组\n\n* initalValue(optional) 用作第一个调用 callback的第一个参数的值\n\n### 返回值\n\n函数累计处理的结果\n\n## 描述\n\n`reduce`为数组中的每一个元素依次执行`callback`函数，不包括数组中被删除或从未被赋值的元素，接受四个参数。\n\n回调函数第一次执行时，`accumulator`和`currentValue`的取值有两种情况：调用`reduce`时提供`initialValue`，`accumulator`取值为`initialValue`，`currentValue`取数组中的第一个值；没有提供 `initialValue`，`accumulator`取数组中的第一个值，`currentValue`取数组中的第二个值。\n\n> 如果没有提供`initialValue`，`reduce` 会从索引1的地方开始执行 `callback` 方法，跳过第一个索引。如果提供`initialValue`，从索引0开始。\n\n如果数组为空且没有提供`initialValue`，会抛出`TypeError` 。如果数组仅有一个元素（无论位置如何）并且没有提供`initialValue`， 或者有提供`initialValue`但是数组为空，那么此唯一值将被返回并且`callback`不会被执行。\n\n提供初始值通常更安全，正如下面的例子，如果没有提供initialValue，则可能有三种输出：\n\n```js\nvar maxCallback = ( pre, cur ) => Math.max( pre.x, cur.x );\nvar maxCallback2 = ( max, cur ) => Math.max( max, cur );\n\n// reduce() without initialValue\n[ { x: 22 }, { x: 42 } ].reduce( maxCallback ); // 42\n[ { x: 22 }            ].reduce( maxCallback ); // { x: 22 }\n[                      ].reduce( maxCallback ); // TypeError\n\n// map/reduce; better solution, also works for empty arrays\n[ { x: 22 }, { x: 42 } ].map( el => el.x )\n                        .reduce( maxCallback2, -Infinity );\n```\n\n### reduce如何运行\n\n假如运行下段代码：\n\n```js\n[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array){\n  return accumulator + currentValue;\n});\n```\n\n| callback    | accumulator | currentValue | currentIndex | array           | return value |\n| ----------- | ----------- | ------------ | ------------ | --------------- | ------------ |\n| first call  | 0           | 1            | 1            | [0, 1, 2, 3, 4] | 1            |\n| second call | 1           | 2            | 2            | [0, 1, 2, 3, 4] | 3            |\n| third call  | 3           | 3            | 3            | [0, 1, 2, 3, 4] | 6            |\n| fourth call | 6           | 4            | 4            | [0, 1, 2, 3, 4] | 10           |\n由`reduce`返回的值将是上次回调调用的值`（10）`。\n\n你同样可以使用箭头函数的形式，下面的代码会输出跟前面一样的结果\n\n您还可以提供[Arrow Function](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions) 代替完整功能。 下面的代码将产生与上面的代码中相同的输出：\n\n```js\n[0, 1, 2, 3, 4].reduce((prev, curr) => prev + curr );\n```\n\n如果你打算提供一个初始值作为`reduce`方法的第二个参数，以下是运行过程及结果：\n\n```js\n[0, 1, 2, 3, 4].reduce((accumulator, currentValue, currentIndex, array) => { return accumulator + currentValue; }, 10 )\n```\n\n| callback    | accumulator | currentValue | currentIndex | array           | return value |\n| ----------- | ----------- | ------------ | ------------ | --------------- | ------------ |\n| first call  | 10          | 0            | 0            | [0, 1, 2, 3, 4] | 10           |\n| second call | 10          | 1            | 1            | [0, 1, 2, 3, 4] | 11           |\n| third call  | 11          | 2            | 2            | [0, 1, 2, 3, 4] | 13           |\n| fourth call | 13          | 3            | 3            | [0, 1, 2, 3, 4] | 16           |\n| fourth call | 16          | 4            | 4            | [0, 1, 2, 3, 4] | 20           |\n这种情况下reduce返回的值是`20`。\n\n## 例子\n\n数组里所有值的和\n\n```js\nvar sum = [0, 1, 2, 3].reduce(function (a, b) {\n  return a + b;\n}, 0);\n// sum is 6\n```\n\n你也可以写成箭头函数的形式：\n\n```js\nvar total = [ 0, 1, 2, 3 ].reduce(\n  ( acc, cur ) => acc + cur,\n  0\n);\n```\n\n### 将二维数组转化为一维\n\n```js\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  function(a, b) {\n    return a.concat(b);\n  },\n  []\n);\n// flattened is [0, 1, 2, 3, 4, 5]\n```\n\n你也可以写成箭头函数的形式：\n\n```js\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n ( acc, cur ) => acc.concat(cur),\n []\n);\n```\n\n### 计算数组中每个元素出现的次数\n\n```js\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nvar countedNames = names.reduce(function (allNames, name) { \n  if (name in allNames) {\n    allNames[name]++;\n  }\n  else {\n    allNames[name] = 1;\n  }\n  return allNames;\n}, {});\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n\n### 使用扩展运算符和initialValue绑定包含在对象数组中的数组\n\n```js\n// friends - an array of objects \n// where object field \"books\" - list of favorite books \nvar friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}];\n\n// allbooks - list which will contain all friends' books +  \n// additional list contained in initialValue\nvar allbooks = friends.reduce(function(prev, curr) {\n  return [...prev, ...curr.books];\n}, ['Alphabet']);\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', \n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n```\n\n### 数组去重\n\n```js\nlet arr = [1,2,1,2,3,5,4,5,3,4,4,4,4];\nlet result = arr.sort().reduce((init, current)=>{\n    if(init.length===0 || init[init.length-1]!==current){\n        init.push(current);\n    }\n    return init;\n}, []);\nconsole.log(result); //[1,2,3,4,5]\n```\n\n### 同时实现map和filter\n\n```js\nconst numbers = [10, 20, 30, 40];\nconst doubledOver50 = numbers.reduce((finalList, num) => {\n  \n  num = num * 2; \n  \n  if (num > 50) {\n    finalList.push(num);\n  }\n  return finalList;\n}, []);\ndoubledOver50; // [60, 80]\n```\n\n### 匹配圆括号\n\nreduce的另外一个用途是能够匹配给定字符串中的圆括号。对于一个含有圆括号的字符串，我们需要知道(和)的数量是否一致，并且(是否出现在)之前。\n\n下面的代码中我们使用reduce可以轻松地解决这个问题。我们只需要先声明一个counter变量，初值为0。在遇到(时counter加一，遇到)时counter减一。如果左右括号数目匹配，那最终结果为0。\n\n```js\n//Returns 0 if balanced.\nconst isParensBalanced = (str) => {\n  return str.split('').reduce((counter, char) => {\n    if(counter < 0) { //matched \")\" before \"(\"\n      return counter;\n    } else if(char === '(') {\n      return ++counter;\n    } else if(char === ')') {\n      return --counter;\n    }  else { //matched some other char\n      return counter;\n    }\n    \n  }, 0); //<-- starting value of the counter\n}\nisParensBalanced('(())') // 0 <-- balanced\nisParensBalanced('(asdfds)') //0 <-- balanced\nisParensBalanced('(()') // 1 <-- not balanced\nisParensBalanced(')(') // -1 <-- not balanced\n```\n\n## Polyfill\n\n```js\n// Production steps of ECMA-262, Edition 5, 15.4.4.21\n// Reference: http://es5.github.io/#x15.4.4.21\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\nif (!Array.prototype.reduce) {\n  Object.defineProperty(Array.prototype, 'reduce', {\n    value: function(callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError( 'Array.prototype.reduce ' + \n          'called on null or undefined' );\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError( callback +\n          ' is not a function');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0; \n\n      // Steps 3, 4, 5, 6, 7      \n      var k = 0; \n      var value;\n\n      if (arguments.length >= 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in o)) {\n          k++; \n        }\n\n        // 3. If len is 0 and initialValue is not present,\n        //    throw a TypeError exception.\n        if (k >= len) {\n          throw new TypeError( 'Reduce of empty array ' +\n            'with no initial value' );\n        }\n        value = o[k++];\n      }\n\n      // 8. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        // c. If kPresent is true, then\n        //    i.  Let kValue be ? Get(O, Pk).\n        //    ii. Let accumulator be ? Call(\n        //          callbackfn, undefined,\n        //          « accumulator, kValue, k, O »).\n        if (k in o) {\n          value = callback(value, o[k], k, o);\n        }\n\n        // d. Increase k by 1.      \n        k++;\n      }\n\n      // 9. Return accumulator.\n      return value;\n    }\n  });\n}\n```\n\n[参考链接](https://segmentfault.com/a/1190000013972464?utm_source=feed-content)\n\n---\n\n![Vincent van Gogh – The Parsonage at Nuenen](神奇的reduce/1917180847.jpg)\n\n> Vincent van Gogh – The Parsonage at Nuenen 1885\n","source":"_posts/神奇的reduce.md","raw":"---\ntitle: 神奇的reduce\ndate: 2018-08-01 12:06:23\ntags:\n  - reduce\n  - 数组\ncategories: 前端\n---\n\n# 神奇的reduce\n\n这是一个用得好就很装逼的方法，简约而强大。\n\n## 干什么用的\n\n> reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。\n说的挺复杂，看个mdn例子先：\n\n```js\nconst arrary1 = [1, 2, 3, 4]\nconst reducer = (accumulator, currentValue) => accumulator + currentValue\n//1+2+3+4\nconsole.log(array1.reduce(reducer))\n\n//5+1+2+3+4\nconsole.log(array1.reduce(reducer, 5))\n```\n\n## 语法\n\n```js\narr.reduce(callback[,initalValue])\n```\n\n### 参数\n\n* callback 回调函数\n  * accumulator **累加器累加回调的返回值**\n  * currentValue **数组中正在处理的元素**\n  * currentIndex(optional) 数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。\n  * array(optional) 调用reduce的数组\n\n* initalValue(optional) 用作第一个调用 callback的第一个参数的值\n\n### 返回值\n\n函数累计处理的结果\n\n## 描述\n\n`reduce`为数组中的每一个元素依次执行`callback`函数，不包括数组中被删除或从未被赋值的元素，接受四个参数。\n\n回调函数第一次执行时，`accumulator`和`currentValue`的取值有两种情况：调用`reduce`时提供`initialValue`，`accumulator`取值为`initialValue`，`currentValue`取数组中的第一个值；没有提供 `initialValue`，`accumulator`取数组中的第一个值，`currentValue`取数组中的第二个值。\n\n> 如果没有提供`initialValue`，`reduce` 会从索引1的地方开始执行 `callback` 方法，跳过第一个索引。如果提供`initialValue`，从索引0开始。\n\n如果数组为空且没有提供`initialValue`，会抛出`TypeError` 。如果数组仅有一个元素（无论位置如何）并且没有提供`initialValue`， 或者有提供`initialValue`但是数组为空，那么此唯一值将被返回并且`callback`不会被执行。\n\n提供初始值通常更安全，正如下面的例子，如果没有提供initialValue，则可能有三种输出：\n\n```js\nvar maxCallback = ( pre, cur ) => Math.max( pre.x, cur.x );\nvar maxCallback2 = ( max, cur ) => Math.max( max, cur );\n\n// reduce() without initialValue\n[ { x: 22 }, { x: 42 } ].reduce( maxCallback ); // 42\n[ { x: 22 }            ].reduce( maxCallback ); // { x: 22 }\n[                      ].reduce( maxCallback ); // TypeError\n\n// map/reduce; better solution, also works for empty arrays\n[ { x: 22 }, { x: 42 } ].map( el => el.x )\n                        .reduce( maxCallback2, -Infinity );\n```\n\n### reduce如何运行\n\n假如运行下段代码：\n\n```js\n[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array){\n  return accumulator + currentValue;\n});\n```\n\n| callback    | accumulator | currentValue | currentIndex | array           | return value |\n| ----------- | ----------- | ------------ | ------------ | --------------- | ------------ |\n| first call  | 0           | 1            | 1            | [0, 1, 2, 3, 4] | 1            |\n| second call | 1           | 2            | 2            | [0, 1, 2, 3, 4] | 3            |\n| third call  | 3           | 3            | 3            | [0, 1, 2, 3, 4] | 6            |\n| fourth call | 6           | 4            | 4            | [0, 1, 2, 3, 4] | 10           |\n由`reduce`返回的值将是上次回调调用的值`（10）`。\n\n你同样可以使用箭头函数的形式，下面的代码会输出跟前面一样的结果\n\n您还可以提供[Arrow Function](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions) 代替完整功能。 下面的代码将产生与上面的代码中相同的输出：\n\n```js\n[0, 1, 2, 3, 4].reduce((prev, curr) => prev + curr );\n```\n\n如果你打算提供一个初始值作为`reduce`方法的第二个参数，以下是运行过程及结果：\n\n```js\n[0, 1, 2, 3, 4].reduce((accumulator, currentValue, currentIndex, array) => { return accumulator + currentValue; }, 10 )\n```\n\n| callback    | accumulator | currentValue | currentIndex | array           | return value |\n| ----------- | ----------- | ------------ | ------------ | --------------- | ------------ |\n| first call  | 10          | 0            | 0            | [0, 1, 2, 3, 4] | 10           |\n| second call | 10          | 1            | 1            | [0, 1, 2, 3, 4] | 11           |\n| third call  | 11          | 2            | 2            | [0, 1, 2, 3, 4] | 13           |\n| fourth call | 13          | 3            | 3            | [0, 1, 2, 3, 4] | 16           |\n| fourth call | 16          | 4            | 4            | [0, 1, 2, 3, 4] | 20           |\n这种情况下reduce返回的值是`20`。\n\n## 例子\n\n数组里所有值的和\n\n```js\nvar sum = [0, 1, 2, 3].reduce(function (a, b) {\n  return a + b;\n}, 0);\n// sum is 6\n```\n\n你也可以写成箭头函数的形式：\n\n```js\nvar total = [ 0, 1, 2, 3 ].reduce(\n  ( acc, cur ) => acc + cur,\n  0\n);\n```\n\n### 将二维数组转化为一维\n\n```js\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  function(a, b) {\n    return a.concat(b);\n  },\n  []\n);\n// flattened is [0, 1, 2, 3, 4, 5]\n```\n\n你也可以写成箭头函数的形式：\n\n```js\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n ( acc, cur ) => acc.concat(cur),\n []\n);\n```\n\n### 计算数组中每个元素出现的次数\n\n```js\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nvar countedNames = names.reduce(function (allNames, name) { \n  if (name in allNames) {\n    allNames[name]++;\n  }\n  else {\n    allNames[name] = 1;\n  }\n  return allNames;\n}, {});\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n\n### 使用扩展运算符和initialValue绑定包含在对象数组中的数组\n\n```js\n// friends - an array of objects \n// where object field \"books\" - list of favorite books \nvar friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}];\n\n// allbooks - list which will contain all friends' books +  \n// additional list contained in initialValue\nvar allbooks = friends.reduce(function(prev, curr) {\n  return [...prev, ...curr.books];\n}, ['Alphabet']);\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', \n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n```\n\n### 数组去重\n\n```js\nlet arr = [1,2,1,2,3,5,4,5,3,4,4,4,4];\nlet result = arr.sort().reduce((init, current)=>{\n    if(init.length===0 || init[init.length-1]!==current){\n        init.push(current);\n    }\n    return init;\n}, []);\nconsole.log(result); //[1,2,3,4,5]\n```\n\n### 同时实现map和filter\n\n```js\nconst numbers = [10, 20, 30, 40];\nconst doubledOver50 = numbers.reduce((finalList, num) => {\n  \n  num = num * 2; \n  \n  if (num > 50) {\n    finalList.push(num);\n  }\n  return finalList;\n}, []);\ndoubledOver50; // [60, 80]\n```\n\n### 匹配圆括号\n\nreduce的另外一个用途是能够匹配给定字符串中的圆括号。对于一个含有圆括号的字符串，我们需要知道(和)的数量是否一致，并且(是否出现在)之前。\n\n下面的代码中我们使用reduce可以轻松地解决这个问题。我们只需要先声明一个counter变量，初值为0。在遇到(时counter加一，遇到)时counter减一。如果左右括号数目匹配，那最终结果为0。\n\n```js\n//Returns 0 if balanced.\nconst isParensBalanced = (str) => {\n  return str.split('').reduce((counter, char) => {\n    if(counter < 0) { //matched \")\" before \"(\"\n      return counter;\n    } else if(char === '(') {\n      return ++counter;\n    } else if(char === ')') {\n      return --counter;\n    }  else { //matched some other char\n      return counter;\n    }\n    \n  }, 0); //<-- starting value of the counter\n}\nisParensBalanced('(())') // 0 <-- balanced\nisParensBalanced('(asdfds)') //0 <-- balanced\nisParensBalanced('(()') // 1 <-- not balanced\nisParensBalanced(')(') // -1 <-- not balanced\n```\n\n## Polyfill\n\n```js\n// Production steps of ECMA-262, Edition 5, 15.4.4.21\n// Reference: http://es5.github.io/#x15.4.4.21\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\nif (!Array.prototype.reduce) {\n  Object.defineProperty(Array.prototype, 'reduce', {\n    value: function(callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError( 'Array.prototype.reduce ' + \n          'called on null or undefined' );\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError( callback +\n          ' is not a function');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0; \n\n      // Steps 3, 4, 5, 6, 7      \n      var k = 0; \n      var value;\n\n      if (arguments.length >= 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in o)) {\n          k++; \n        }\n\n        // 3. If len is 0 and initialValue is not present,\n        //    throw a TypeError exception.\n        if (k >= len) {\n          throw new TypeError( 'Reduce of empty array ' +\n            'with no initial value' );\n        }\n        value = o[k++];\n      }\n\n      // 8. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        // c. If kPresent is true, then\n        //    i.  Let kValue be ? Get(O, Pk).\n        //    ii. Let accumulator be ? Call(\n        //          callbackfn, undefined,\n        //          « accumulator, kValue, k, O »).\n        if (k in o) {\n          value = callback(value, o[k], k, o);\n        }\n\n        // d. Increase k by 1.      \n        k++;\n      }\n\n      // 9. Return accumulator.\n      return value;\n    }\n  });\n}\n```\n\n[参考链接](https://segmentfault.com/a/1190000013972464?utm_source=feed-content)\n\n---\n\n![Vincent van Gogh – The Parsonage at Nuenen](神奇的reduce/1917180847.jpg)\n\n> Vincent van Gogh – The Parsonage at Nuenen 1885\n","slug":"神奇的reduce","published":1,"updated":"2018-08-01T04:18:14.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkawp6on0008bwz7xudyqs2c","content":"<h1 id=\"神奇的reduce\"><a href=\"#神奇的reduce\" class=\"headerlink\" title=\"神奇的reduce\"></a>神奇的reduce</h1><p>这是一个用得好就很装逼的方法，简约而强大。</p>\n<h2 id=\"干什么用的\"><a href=\"#干什么用的\" class=\"headerlink\" title=\"干什么用的\"></a>干什么用的</h2><blockquote>\n<p>reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。<br>说的挺复杂，看个mdn例子先：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue</span><br><span class=\"line\"><span class=\"comment\">//1+2+3+4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//5+1+2+3+4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer, <span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback[,initalValue])</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li><p>callback 回调函数</p>\n<ul>\n<li>accumulator <strong>累加器累加回调的返回值</strong></li>\n<li>currentValue <strong>数组中正在处理的元素</strong></li>\n<li>currentIndex(optional) 数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。</li>\n<li>array(optional) 调用reduce的数组</li>\n</ul>\n</li>\n<li><p>initalValue(optional) 用作第一个调用 callback的第一个参数的值</p>\n</li>\n</ul>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>函数累计处理的结果</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p><code>reduce</code>为数组中的每一个元素依次执行<code>callback</code>函数，不包括数组中被删除或从未被赋值的元素，接受四个参数。</p>\n<p>回调函数第一次执行时，<code>accumulator</code>和<code>currentValue</code>的取值有两种情况：调用<code>reduce</code>时提供<code>initialValue</code>，<code>accumulator</code>取值为<code>initialValue</code>，<code>currentValue</code>取数组中的第一个值；没有提供 <code>initialValue</code>，<code>accumulator</code>取数组中的第一个值，<code>currentValue</code>取数组中的第二个值。</p>\n<blockquote>\n<p>如果没有提供<code>initialValue</code>，<code>reduce</code> 会从索引1的地方开始执行 <code>callback</code> 方法，跳过第一个索引。如果提供<code>initialValue</code>，从索引0开始。</p>\n</blockquote>\n<p>如果数组为空且没有提供<code>initialValue</code>，会抛出<code>TypeError</code> 。如果数组仅有一个元素（无论位置如何）并且没有提供<code>initialValue</code>， 或者有提供<code>initialValue</code>但是数组为空，那么此唯一值将被返回并且<code>callback</code>不会被执行。</p>\n<p>提供初始值通常更安全，正如下面的例子，如果没有提供initialValue，则可能有三种输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxCallback = <span class=\"function\">(<span class=\"params\"> pre, cur </span>) =&gt;</span> <span class=\"built_in\">Math</span>.max( pre.x, cur.x );</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxCallback2 = <span class=\"function\">(<span class=\"params\"> max, cur </span>) =&gt;</span> <span class=\"built_in\">Math</span>.max( max, cur );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reduce() without initialValue</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">42</span> &#125; ].reduce( maxCallback ); <span class=\"comment\">// 42</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;            ].reduce( maxCallback ); <span class=\"comment\">// &#123; x: 22 &#125;</span></span><br><span class=\"line\">[                      ].reduce( maxCallback ); <span class=\"comment\">// TypeError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map/reduce; better solution, also works for empty arrays</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">42</span> &#125; ].map( <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el.x )</span><br><span class=\"line\">                        .reduce( maxCallback2, -<span class=\"literal\">Infinity</span> );</span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce如何运行\"><a href=\"#reduce如何运行\" class=\"headerlink\" title=\"reduce如何运行\"></a>reduce如何运行</h3><p>假如运行下段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">accumulator, currentValue, currentIndex, array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> accumulator + currentValue;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>accumulator</th>\n<th>currentValue</th>\n<th>currentIndex</th>\n<th>array</th>\n<th>return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>first call</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>1</td>\n</tr>\n<tr>\n<td>second call</td>\n<td>1</td>\n<td>2</td>\n<td>2</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>3</td>\n</tr>\n<tr>\n<td>third call</td>\n<td>3</td>\n<td>3</td>\n<td>3</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>6</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>6</td>\n<td>4</td>\n<td>4</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<p>由<code>reduce</code>返回的值将是上次回调调用的值<code>（10）</code>。</p>\n<p>你同样可以使用箭头函数的形式，下面的代码会输出跟前面一样的结果</p>\n<p>您还可以提供<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">Arrow Function</a> 代替完整功能。 下面的代码将产生与上面的代码中相同的输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\">(<span class=\"params\">prev, curr</span>) =&gt;</span> prev + curr );</span><br></pre></td></tr></table></figure>\n<p>如果你打算提供一个初始值作为<code>reduce</code>方法的第二个参数，以下是运行过程及结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\">(<span class=\"params\">accumulator, currentValue, currentIndex, array</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> accumulator + currentValue; &#125;, <span class=\"number\">10</span> )</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>accumulator</th>\n<th>currentValue</th>\n<th>currentIndex</th>\n<th>array</th>\n<th>return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>first call</td>\n<td>10</td>\n<td>0</td>\n<td>0</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>10</td>\n</tr>\n<tr>\n<td>second call</td>\n<td>10</td>\n<td>1</td>\n<td>1</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>11</td>\n</tr>\n<tr>\n<td>third call</td>\n<td>11</td>\n<td>2</td>\n<td>2</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>13</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>13</td>\n<td>3</td>\n<td>3</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>16</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>16</td>\n<td>4</td>\n<td>4</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<p>这种情况下reduce返回的值是<code>20</code>。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>数组里所有值的和</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// sum is 6</span></span><br></pre></td></tr></table></figure>\n<p>你也可以写成箭头函数的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> total = [ <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ].reduce(</span><br><span class=\"line\">  ( acc, cur ) =&gt; acc + cur,</span><br><span class=\"line\">  <span class=\"number\">0</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"将二维数组转化为一维\"><a href=\"#将二维数组转化为一维\" class=\"headerlink\" title=\"将二维数组转化为一维\"></a>将二维数组转化为一维</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flattened = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].reduce(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.concat(b);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  []</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<p>你也可以写成箭头函数的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flattened = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].reduce(</span><br><span class=\"line\"> ( acc, cur ) =&gt; acc.concat(cur),</span><br><span class=\"line\"> []</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"计算数组中每个元素出现的次数\"><a href=\"#计算数组中每个元素出现的次数\" class=\"headerlink\" title=\"计算数组中每个元素出现的次数\"></a>计算数组中每个元素出现的次数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = [<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tiff'</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'Alice'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> countedNames = names.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">allNames, name</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> allNames) &#123;</span><br><span class=\"line\">    allNames[name]++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    allNames[name] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> allNames;</span><br><span class=\"line\">&#125;, &#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// countedNames is:</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用扩展运算符和initialValue绑定包含在对象数组中的数组\"><a href=\"#使用扩展运算符和initialValue绑定包含在对象数组中的数组\" class=\"headerlink\" title=\"使用扩展运算符和initialValue绑定包含在对象数组中的数组\"></a>使用扩展运算符和initialValue绑定包含在对象数组中的数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// friends - an array of objects </span></span><br><span class=\"line\"><span class=\"comment\">// where object field \"books\" - list of favorite books </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> friends = [&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Anna'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'Bible'</span>, <span class=\"string\">'Harry Potter'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">21</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bob'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'War and peace'</span>, <span class=\"string\">'Romeo and Juliet'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">26</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Alice'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'The Lord of the Rings'</span>, <span class=\"string\">'The Shining'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allbooks - list which will contain all friends' books +  </span></span><br><span class=\"line\"><span class=\"comment\">// additional list contained in initialValue</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> allbooks = friends.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, curr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...prev, ...curr.books];</span><br><span class=\"line\">&#125;, [<span class=\"string\">'Alphabet'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allbooks = [</span></span><br><span class=\"line\"><span class=\"comment\">//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', </span></span><br><span class=\"line\"><span class=\"comment\">//   'Romeo and Juliet', 'The Lord of the Rings',</span></span><br><span class=\"line\"><span class=\"comment\">//   'The Shining'</span></span><br><span class=\"line\"><span class=\"comment\">// ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.sort().reduce(<span class=\"function\">(<span class=\"params\">init, current</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(init.length===<span class=\"number\">0</span> || init[init.length<span class=\"number\">-1</span>]!==current)&#123;</span><br><span class=\"line\">        init.push(current);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> init;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"同时实现map和filter\"><a href=\"#同时实现map和filter\" class=\"headerlink\" title=\"同时实现map和filter\"></a>同时实现map和filter</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> doubledOver50 = numbers.reduce(<span class=\"function\">(<span class=\"params\">finalList, num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  num = num * <span class=\"number\">2</span>; </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &gt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">    finalList.push(num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> finalList;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\">doubledOver50; <span class=\"comment\">// [60, 80]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"匹配圆括号\"><a href=\"#匹配圆括号\" class=\"headerlink\" title=\"匹配圆括号\"></a>匹配圆括号</h3><p>reduce的另外一个用途是能够匹配给定字符串中的圆括号。对于一个含有圆括号的字符串，我们需要知道(和)的数量是否一致，并且(是否出现在)之前。</p>\n<p>下面的代码中我们使用reduce可以轻松地解决这个问题。我们只需要先声明一个counter变量，初值为0。在遇到(时counter加一，遇到)时counter减一。如果左右括号数目匹配，那最终结果为0。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Returns 0 if balanced.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isParensBalanced = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.split(<span class=\"string\">''</span>).reduce(<span class=\"function\">(<span class=\"params\">counter, char</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(counter &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">//matched \")\" before \"(\"</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char === <span class=\"string\">'('</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ++counter;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char === <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> --counter;</span><br><span class=\"line\">    &#125;  <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//matched some other char</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>); <span class=\"comment\">//&lt;-- starting value of the counter</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(())'</span>) <span class=\"comment\">// 0 &lt;-- balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(asdfds)'</span>) <span class=\"comment\">//0 &lt;-- balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(()'</span>) <span class=\"comment\">// 1 &lt;-- not balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">')('</span>) <span class=\"comment\">// -1 &lt;-- not balanced</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Polyfill\"><a href=\"#Polyfill\" class=\"headerlink\" title=\"Polyfill\"></a>Polyfill</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Production steps of ECMA-262, Edition 5, 15.4.4.21</span></span><br><span class=\"line\"><span class=\"comment\">// Reference: http://es5.github.io/#x15.4.4.21</span></span><br><span class=\"line\"><span class=\"comment\">// https://tc39.github.io/ecma262/#sec-array.prototype.reduce</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.reduce) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'reduce'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback <span class=\"regexp\">/*, initialValue*/</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">'Array.prototype.reduce '</span> + </span><br><span class=\"line\">          <span class=\"string\">'called on null or undefined'</span> );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( callback +</span><br><span class=\"line\">          <span class=\"string\">' is not a function'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 1. Let O be ? ToObject(this value).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 2. Let len be ? ToLength(? Get(O, \"length\")).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = o.length &gt;&gt;&gt; <span class=\"number\">0</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Steps 3, 4, 5, 6, 7      </span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; </span><br><span class=\"line\">      <span class=\"keyword\">var</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        value = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt; len &amp;&amp; !(k <span class=\"keyword\">in</span> o)) &#123;</span><br><span class=\"line\">          k++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. If len is 0 and initialValue is not present,</span></span><br><span class=\"line\">        <span class=\"comment\">//    throw a TypeError exception.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &gt;= len) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">'Reduce of empty array '</span> +</span><br><span class=\"line\">            <span class=\"string\">'with no initial value'</span> );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        value = o[k++];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 8. Repeat, while k &lt; len</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a. Let Pk be ! ToString(k).</span></span><br><span class=\"line\">        <span class=\"comment\">// b. Let kPresent be ? HasProperty(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">// c. If kPresent is true, then</span></span><br><span class=\"line\">        <span class=\"comment\">//    i.  Let kValue be ? Get(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">//    ii. Let accumulator be ? Call(</span></span><br><span class=\"line\">        <span class=\"comment\">//          callbackfn, undefined,</span></span><br><span class=\"line\">        <span class=\"comment\">//          « accumulator, kValue, k, O »).</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">          value = callback(value, o[k], k, o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// d. Increase k by 1.      </span></span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 9. Return accumulator.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://segmentfault.com/a/1190000013972464?utm_source=feed-content\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/神奇的reduce/1917180847.jpg\" alt=\"Vincent van Gogh – The Parsonage at Nuenen\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Parsonage at Nuenen 1885</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"神奇的reduce\"><a href=\"#神奇的reduce\" class=\"headerlink\" title=\"神奇的reduce\"></a>神奇的reduce</h1><p>这是一个用得好就很装逼的方法，简约而强大。</p>\n<h2 id=\"干什么用的\"><a href=\"#干什么用的\" class=\"headerlink\" title=\"干什么用的\"></a>干什么用的</h2><blockquote>\n<p>reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。<br>说的挺复杂，看个mdn例子先：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue</span><br><span class=\"line\"><span class=\"comment\">//1+2+3+4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//5+1+2+3+4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer, <span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback[,initalValue])</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li><p>callback 回调函数</p>\n<ul>\n<li>accumulator <strong>累加器累加回调的返回值</strong></li>\n<li>currentValue <strong>数组中正在处理的元素</strong></li>\n<li>currentIndex(optional) 数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。</li>\n<li>array(optional) 调用reduce的数组</li>\n</ul>\n</li>\n<li><p>initalValue(optional) 用作第一个调用 callback的第一个参数的值</p>\n</li>\n</ul>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>函数累计处理的结果</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p><code>reduce</code>为数组中的每一个元素依次执行<code>callback</code>函数，不包括数组中被删除或从未被赋值的元素，接受四个参数。</p>\n<p>回调函数第一次执行时，<code>accumulator</code>和<code>currentValue</code>的取值有两种情况：调用<code>reduce</code>时提供<code>initialValue</code>，<code>accumulator</code>取值为<code>initialValue</code>，<code>currentValue</code>取数组中的第一个值；没有提供 <code>initialValue</code>，<code>accumulator</code>取数组中的第一个值，<code>currentValue</code>取数组中的第二个值。</p>\n<blockquote>\n<p>如果没有提供<code>initialValue</code>，<code>reduce</code> 会从索引1的地方开始执行 <code>callback</code> 方法，跳过第一个索引。如果提供<code>initialValue</code>，从索引0开始。</p>\n</blockquote>\n<p>如果数组为空且没有提供<code>initialValue</code>，会抛出<code>TypeError</code> 。如果数组仅有一个元素（无论位置如何）并且没有提供<code>initialValue</code>， 或者有提供<code>initialValue</code>但是数组为空，那么此唯一值将被返回并且<code>callback</code>不会被执行。</p>\n<p>提供初始值通常更安全，正如下面的例子，如果没有提供initialValue，则可能有三种输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxCallback = <span class=\"function\">(<span class=\"params\"> pre, cur </span>) =&gt;</span> <span class=\"built_in\">Math</span>.max( pre.x, cur.x );</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxCallback2 = <span class=\"function\">(<span class=\"params\"> max, cur </span>) =&gt;</span> <span class=\"built_in\">Math</span>.max( max, cur );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reduce() without initialValue</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">42</span> &#125; ].reduce( maxCallback ); <span class=\"comment\">// 42</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;            ].reduce( maxCallback ); <span class=\"comment\">// &#123; x: 22 &#125;</span></span><br><span class=\"line\">[                      ].reduce( maxCallback ); <span class=\"comment\">// TypeError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map/reduce; better solution, also works for empty arrays</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">42</span> &#125; ].map( <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el.x )</span><br><span class=\"line\">                        .reduce( maxCallback2, -<span class=\"literal\">Infinity</span> );</span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce如何运行\"><a href=\"#reduce如何运行\" class=\"headerlink\" title=\"reduce如何运行\"></a>reduce如何运行</h3><p>假如运行下段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">accumulator, currentValue, currentIndex, array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> accumulator + currentValue;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>accumulator</th>\n<th>currentValue</th>\n<th>currentIndex</th>\n<th>array</th>\n<th>return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>first call</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>1</td>\n</tr>\n<tr>\n<td>second call</td>\n<td>1</td>\n<td>2</td>\n<td>2</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>3</td>\n</tr>\n<tr>\n<td>third call</td>\n<td>3</td>\n<td>3</td>\n<td>3</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>6</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>6</td>\n<td>4</td>\n<td>4</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<p>由<code>reduce</code>返回的值将是上次回调调用的值<code>（10）</code>。</p>\n<p>你同样可以使用箭头函数的形式，下面的代码会输出跟前面一样的结果</p>\n<p>您还可以提供<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">Arrow Function</a> 代替完整功能。 下面的代码将产生与上面的代码中相同的输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\">(<span class=\"params\">prev, curr</span>) =&gt;</span> prev + curr );</span><br></pre></td></tr></table></figure>\n<p>如果你打算提供一个初始值作为<code>reduce</code>方法的第二个参数，以下是运行过程及结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\">(<span class=\"params\">accumulator, currentValue, currentIndex, array</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> accumulator + currentValue; &#125;, <span class=\"number\">10</span> )</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>accumulator</th>\n<th>currentValue</th>\n<th>currentIndex</th>\n<th>array</th>\n<th>return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>first call</td>\n<td>10</td>\n<td>0</td>\n<td>0</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>10</td>\n</tr>\n<tr>\n<td>second call</td>\n<td>10</td>\n<td>1</td>\n<td>1</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>11</td>\n</tr>\n<tr>\n<td>third call</td>\n<td>11</td>\n<td>2</td>\n<td>2</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>13</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>13</td>\n<td>3</td>\n<td>3</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>16</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>16</td>\n<td>4</td>\n<td>4</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<p>这种情况下reduce返回的值是<code>20</code>。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>数组里所有值的和</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// sum is 6</span></span><br></pre></td></tr></table></figure>\n<p>你也可以写成箭头函数的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> total = [ <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ].reduce(</span><br><span class=\"line\">  ( acc, cur ) =&gt; acc + cur,</span><br><span class=\"line\">  <span class=\"number\">0</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"将二维数组转化为一维\"><a href=\"#将二维数组转化为一维\" class=\"headerlink\" title=\"将二维数组转化为一维\"></a>将二维数组转化为一维</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flattened = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].reduce(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.concat(b);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  []</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<p>你也可以写成箭头函数的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flattened = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].reduce(</span><br><span class=\"line\"> ( acc, cur ) =&gt; acc.concat(cur),</span><br><span class=\"line\"> []</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"计算数组中每个元素出现的次数\"><a href=\"#计算数组中每个元素出现的次数\" class=\"headerlink\" title=\"计算数组中每个元素出现的次数\"></a>计算数组中每个元素出现的次数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = [<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tiff'</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'Alice'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> countedNames = names.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">allNames, name</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> allNames) &#123;</span><br><span class=\"line\">    allNames[name]++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    allNames[name] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> allNames;</span><br><span class=\"line\">&#125;, &#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// countedNames is:</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用扩展运算符和initialValue绑定包含在对象数组中的数组\"><a href=\"#使用扩展运算符和initialValue绑定包含在对象数组中的数组\" class=\"headerlink\" title=\"使用扩展运算符和initialValue绑定包含在对象数组中的数组\"></a>使用扩展运算符和initialValue绑定包含在对象数组中的数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// friends - an array of objects </span></span><br><span class=\"line\"><span class=\"comment\">// where object field \"books\" - list of favorite books </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> friends = [&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Anna'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'Bible'</span>, <span class=\"string\">'Harry Potter'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">21</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bob'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'War and peace'</span>, <span class=\"string\">'Romeo and Juliet'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">26</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Alice'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'The Lord of the Rings'</span>, <span class=\"string\">'The Shining'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allbooks - list which will contain all friends' books +  </span></span><br><span class=\"line\"><span class=\"comment\">// additional list contained in initialValue</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> allbooks = friends.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, curr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...prev, ...curr.books];</span><br><span class=\"line\">&#125;, [<span class=\"string\">'Alphabet'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allbooks = [</span></span><br><span class=\"line\"><span class=\"comment\">//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', </span></span><br><span class=\"line\"><span class=\"comment\">//   'Romeo and Juliet', 'The Lord of the Rings',</span></span><br><span class=\"line\"><span class=\"comment\">//   'The Shining'</span></span><br><span class=\"line\"><span class=\"comment\">// ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.sort().reduce(<span class=\"function\">(<span class=\"params\">init, current</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(init.length===<span class=\"number\">0</span> || init[init.length<span class=\"number\">-1</span>]!==current)&#123;</span><br><span class=\"line\">        init.push(current);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> init;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"同时实现map和filter\"><a href=\"#同时实现map和filter\" class=\"headerlink\" title=\"同时实现map和filter\"></a>同时实现map和filter</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> doubledOver50 = numbers.reduce(<span class=\"function\">(<span class=\"params\">finalList, num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  num = num * <span class=\"number\">2</span>; </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &gt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">    finalList.push(num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> finalList;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\">doubledOver50; <span class=\"comment\">// [60, 80]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"匹配圆括号\"><a href=\"#匹配圆括号\" class=\"headerlink\" title=\"匹配圆括号\"></a>匹配圆括号</h3><p>reduce的另外一个用途是能够匹配给定字符串中的圆括号。对于一个含有圆括号的字符串，我们需要知道(和)的数量是否一致，并且(是否出现在)之前。</p>\n<p>下面的代码中我们使用reduce可以轻松地解决这个问题。我们只需要先声明一个counter变量，初值为0。在遇到(时counter加一，遇到)时counter减一。如果左右括号数目匹配，那最终结果为0。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Returns 0 if balanced.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isParensBalanced = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.split(<span class=\"string\">''</span>).reduce(<span class=\"function\">(<span class=\"params\">counter, char</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(counter &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">//matched \")\" before \"(\"</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char === <span class=\"string\">'('</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ++counter;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char === <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> --counter;</span><br><span class=\"line\">    &#125;  <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//matched some other char</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>); <span class=\"comment\">//&lt;-- starting value of the counter</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(())'</span>) <span class=\"comment\">// 0 &lt;-- balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(asdfds)'</span>) <span class=\"comment\">//0 &lt;-- balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(()'</span>) <span class=\"comment\">// 1 &lt;-- not balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">')('</span>) <span class=\"comment\">// -1 &lt;-- not balanced</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Polyfill\"><a href=\"#Polyfill\" class=\"headerlink\" title=\"Polyfill\"></a>Polyfill</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Production steps of ECMA-262, Edition 5, 15.4.4.21</span></span><br><span class=\"line\"><span class=\"comment\">// Reference: http://es5.github.io/#x15.4.4.21</span></span><br><span class=\"line\"><span class=\"comment\">// https://tc39.github.io/ecma262/#sec-array.prototype.reduce</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.reduce) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'reduce'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback <span class=\"regexp\">/*, initialValue*/</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">'Array.prototype.reduce '</span> + </span><br><span class=\"line\">          <span class=\"string\">'called on null or undefined'</span> );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( callback +</span><br><span class=\"line\">          <span class=\"string\">' is not a function'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 1. Let O be ? ToObject(this value).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 2. Let len be ? ToLength(? Get(O, \"length\")).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = o.length &gt;&gt;&gt; <span class=\"number\">0</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Steps 3, 4, 5, 6, 7      </span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; </span><br><span class=\"line\">      <span class=\"keyword\">var</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        value = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt; len &amp;&amp; !(k <span class=\"keyword\">in</span> o)) &#123;</span><br><span class=\"line\">          k++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. If len is 0 and initialValue is not present,</span></span><br><span class=\"line\">        <span class=\"comment\">//    throw a TypeError exception.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &gt;= len) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">'Reduce of empty array '</span> +</span><br><span class=\"line\">            <span class=\"string\">'with no initial value'</span> );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        value = o[k++];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 8. Repeat, while k &lt; len</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a. Let Pk be ! ToString(k).</span></span><br><span class=\"line\">        <span class=\"comment\">// b. Let kPresent be ? HasProperty(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">// c. If kPresent is true, then</span></span><br><span class=\"line\">        <span class=\"comment\">//    i.  Let kValue be ? Get(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">//    ii. Let accumulator be ? Call(</span></span><br><span class=\"line\">        <span class=\"comment\">//          callbackfn, undefined,</span></span><br><span class=\"line\">        <span class=\"comment\">//          « accumulator, kValue, k, O »).</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">          value = callback(value, o[k], k, o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// d. Increase k by 1.      </span></span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 9. Return accumulator.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://segmentfault.com/a/1190000013972464?utm_source=feed-content\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<hr>\n<p><img src=\"/newBlog/2018/08/01/神奇的reduce/1917180847.jpg\" alt=\"Vincent van Gogh – The Parsonage at Nuenen\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Parsonage at Nuenen 1885</p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/pic/1132638050.jpg","slug":"1132638050.jpg","post":"cjkawp6n40000bwz75yzav9o5","modified":0,"renderable":0},{"_id":"source/_posts/pic/1917180847.jpg","slug":"1917180847.jpg","post":"cjkawp6n40000bwz75yzav9o5","modified":0,"renderable":0},{"_id":"source/_posts/pic/1959017488.jpg","slug":"1959017488.jpg","post":"cjkawp6n40000bwz75yzav9o5","modified":0,"renderable":0},{"_id":"source/_posts/pic/1997264555.jpg","slug":"1997264555.jpg","post":"cjkawp6n40000bwz75yzav9o5","modified":0,"renderable":0},{"_id":"source/_posts/pic/2048547518.jpg","slug":"2048547518.jpg","post":"cjkawp6n40000bwz75yzav9o5","modified":0,"renderable":0},{"_id":"source/_posts/你好，世界/1959017488.jpg","slug":"1959017488.jpg","post":"cjkawp6nc0002bwz7x6tvwkfk","modified":0,"renderable":0},{"_id":"source/_posts/pic/898024871.jpg","slug":"898024871.jpg","post":"cjkawp6n40000bwz75yzav9o5","modified":0,"renderable":0},{"_id":"source/_posts/神奇的reduce/1917180847.jpg","slug":"1917180847.jpg","post":"cjkawp6on0008bwz7xudyqs2c","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjkawp6nc0002bwz7x6tvwkfk","category_id":"cjkawp6nj0005bwz77mr0gpuh","_id":"cjkawp6nq0007bwz7af2z8it4"},{"post_id":"cjkawp6on0008bwz7xudyqs2c","category_id":"cjkawp6oo0009bwz7iyll6pn0","_id":"cjkawp6ov000cbwz7gft34593"}],"PostTag":[{"post_id":"cjkawp6n40000bwz75yzav9o5","tag_id":"cjkawp6nf0004bwz76dnk8ioz","_id":"cjkawp6no0006bwz7sbrozqkd"},{"post_id":"cjkawp6on0008bwz7xudyqs2c","tag_id":"cjkawp6op000abwz7x7ixstof","_id":"cjkawp6ov000dbwz7cw5p8y1l"},{"post_id":"cjkawp6on0008bwz7xudyqs2c","tag_id":"cjkawp6os000bbwz7m8du1a82","_id":"cjkawp6ov000ebwz7u9czyoqh"}],"Tag":[{"name":"图库","_id":"cjkawp6nf0004bwz76dnk8ioz"},{"name":"reduce","_id":"cjkawp6op000abwz7x7ixstof"},{"name":"数组","_id":"cjkawp6os000bbwz7m8du1a82"}]}}