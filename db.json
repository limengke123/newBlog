{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1533122904288},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1533122904288},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1533122904288},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1533122904288},{"_id":"source/CNAME","hash":"bf8ea4cd139b49f5a93dcd5ea3d12968dd6a4ad6","modified":1533215872621},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1533122904288},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1533122904288},{"_id":"themes/next/LICENSE.md","hash":"f0190c7d83a98464549a6b3a51bb206148d88e1b","modified":1533122904288},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1533122904288},{"_id":"themes/next/README.md","hash":"2d142fa1bdfab00abf8e99f972346e15572c9b12","modified":1533122904288},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1533122904303},{"_id":"themes/next/bower.json","hash":"72d7f5ef565cca1da30ba64fc04075b9ac99e319","modified":1533122904288},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1533122904319},{"_id":"themes/next/_config.yml","hash":"8cc3f14babbeb5f17b2ff194430c02bca29bbab9","modified":1533122904288},{"_id":"themes/next/package.json","hash":"735ace0b7fe3b1171c220c5424fcd4fe3aadd7f8","modified":1533122904538},{"_id":"source/_posts/redux之applyMiddleware.md","hash":"64cc042b27f9445dfa0e31ed418f0bea603f0c16","modified":1535987523804},{"_id":"source/_posts/react-motion翻译及学习.md","hash":"1af0c36bf25169206a3d32ea0eb07eefa9512b52","modified":1535255561010},{"_id":"source/_posts/redux之compose.md","hash":"4f77ad7f9e4f340d8922eec3407aaadb61fbeecf","modified":1535255561015},{"_id":"source/_posts/vue、react隐式实例化.md","hash":"2ee3c477be1a851aaa5c16a91091d1ef5da38675","modified":1533296938910},{"_id":"source/_posts/redux之createStore.md","hash":"68185fedf69c8812fd8f8e61d57c8743ed0e1c45","modified":1535255561020},{"_id":"source/_posts/pic.md","hash":"b4a2bb82b0e329965280f6728516fe41e6f3ab92","modified":1535255560972},{"_id":"source/_posts/一次面试记录.md","hash":"37a7340d362b725c0e54c46c89a8f5af629135ea","modified":1533296938957},{"_id":"source/_posts/vue与react组件对比学习.md","hash":"e62de102e4b7b0d377d3634e357cdb1f39bb3a9c","modified":1533296938926},{"_id":"source/_posts/vue较少关注的地方.md","hash":"1f885df358b3e573ea87353ffb2ca8b17fa800fc","modified":1533215872647},{"_id":"source/_posts/三月的烟雨.md","hash":"2a75ec665deb053f4f3291cbafa4e85f56332a45","modified":1533124069786},{"_id":"source/_posts/你好，世界.md","hash":"a188bba54e2f4f34470b8ad4404b708579228ad9","modified":1533122904163},{"_id":"source/_posts/四月的清风.md","hash":"f1d7ea80145a75c3e1533bec32ead7c84df9eb4f","modified":1533125169433},{"_id":"source/_posts/前端部署nginx配置.md","hash":"5160ba652ad59990b7c39fdb01aec742158d4739","modified":1535255561027},{"_id":"source/_posts/小时候吃的.md","hash":"0009118d53d9a1699bc78648686fcbc2a9b7e574","modified":1533125336404},{"_id":"source/_posts/家乡.md","hash":"c46ae17c36830c9a7a1982e7df56581b5537e727","modified":1533215872652},{"_id":"source/_posts/牢骚.md","hash":"b3d46758cc544298376ce146bc00953f9a0a6691","modified":1533215872658},{"_id":"source/_posts/几个题目.md","hash":"1cfa9774a5afa2c0729e2eeb9ecb07cc9c5445d3","modified":1535255561024},{"_id":"source/_posts/看到的面试题.md","hash":"49a0c1cdfc26ee14c3ad3b20d7bc82972ce2fe7b","modified":1533296938988},{"_id":"source/_posts/神奇的reduce.md","hash":"61056e56c26d57f87ffad52764c34f86465bb3f4","modified":1533122904178},{"_id":"source/_posts/维生素指北.md","hash":"6a69786e33fd7c2e0c70a62dd3deaecc4b4072bd","modified":1535262866444},{"_id":"source/categories/index.md","hash":"c34fd10c7f6b3fdc8b4a5625ba751e5bf6e8e888","modified":1533122904178},{"_id":"source/_posts/绕不开的promise.md","hash":"0ff596abd92691d8ab8eb25fb2f89cb8ec6a2703","modified":1533215872664},{"_id":"source/tags/index.md","hash":"635c2fda4e7dd413138fb59fffb4c50310eecd73","modified":1533122904178},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1533122904303},{"_id":"source/_posts/懒加载.md","hash":"7466b835accc64854c29aa23ba15257827eb6c47","modified":1535255561030},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1533122904303},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1533122904303},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1533122904303},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1533122904303},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"f2fd611a84dd6f9ed5395b63e187e29e9effbcd3","modified":1533122904303},{"_id":"themes/next/docs/LICENSE","hash":"5b702310012d480b40529fd10cf1872f687277a0","modified":1533122904303},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1533122904303},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1533122904335},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1533122904335},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1533122904335},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1533122904335},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1533122904335},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1533122904335},{"_id":"themes/next/languages/ja.yml","hash":"7836f1de1f383d3a53770a03498cc39a37674f0c","modified":1533122904335},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1533122904335},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1533122904335},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1533122904335},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1533122904335},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1533122904335},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1533122904335},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1533122904335},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1533122904350},{"_id":"themes/next/docs/MATH.md","hash":"34a46ca9a05b4570903beaadd4807e6759afb52e","modified":1533122904303},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1533122904350},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1533122904350},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1533122904538},{"_id":"themes/next/layout/_layout.swig","hash":"2db9b03efc68be842b8f79fe2f0fd7fb09e8885a","modified":1533122904350},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1533122904538},{"_id":"themes/next/scripts/helpers.js","hash":"7849f9b9a86fc82d6e186e32a5e26e1f27c49b47","modified":1533122904538},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1533122904538},{"_id":"themes/next/layout/schedule.swig","hash":"d99b9eff0cff38caf095445f27c08aaf11a5b862","modified":1533122904538},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1533122904538},{"_id":"themes/next/layout/post.swig","hash":"0554f42f90f4a524666c2b520be30b689c1d6a87","modified":1533122904538},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1533122904538},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1533122904538},{"_id":"themes/next/layout/page.swig","hash":"9ddf40303f82e3db76d59dc82b6d4eadfed203c6","modified":1533122904538},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1533122904731},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533122904685},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1533122904731},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1533122904731},{"_id":"source/_posts/维生素指北/a.jpg","hash":"b47790c20a90d7b3dfac8e219ce221457d724164","modified":1535260751342},{"_id":"source/_posts/维生素指北/c.jpg","hash":"fa5437e5e5820f2b3d5b5b834db9ccbfe20784e7","modified":1535260847843},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1533122904303},{"_id":"themes/next/docs/ru/README.md","hash":"bbe7ac3ef6352b7fedbba2ab800915e33251adf8","modified":1533122904303},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1533122904303},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1533122904319},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1533122904319},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1533122904319},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1533122904319},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"f2a2d6e68c5f65e27303b40f5285a8a4a5adae4c","modified":1533122904319},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1533122904319},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"4d68054b062b3c8404b146a155d9624d2d25dd9b","modified":1533122904319},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"7214fcd1b5830e62b3ac0836ad2d1b0fa391ae12","modified":1533122904319},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1533122904350},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1533122904350},{"_id":"themes/next/docs/zh-CN/README.md","hash":"74547943ee6cba2e2bbbd67d306ee4de9db1a2bd","modified":1533122904319},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1533122904319},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1533122904350},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"e8dfb86eb62b9c2bc1435d6d1afa95d3b4c7b931","modified":1533122904350},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1533122904350},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"9b0eb348c131813160a8647f612ceb1278f60619","modified":1533122904350},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"8ff97c3f4eb888207bdc50066053c97d890e0202","modified":1533122904350},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56733f92352b891b0bb1baca293f68f6c8928b0b","modified":1533122904366},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"7a9b687087793bf5e218cbc345214f927fa5601a","modified":1533122904366},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a9519b4f82aa516e516317d0447bf5c5c7ffb544","modified":1533122904366},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"f544e21883d249d5a341c684c97bd25831008f07","modified":1533122904460},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"27fb1d81151b9b79683e488579df19eee7e654d6","modified":1533122904460},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"f8c7e729ad6e72b4c705a2c5d5041589c2b4cc52","modified":1533122904460},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f134aeb8d5bee351e5277edb92ac694af314b75f","modified":1533122904475},{"_id":"themes/next/layout/_macro/post.swig","hash":"3d9b8b40012f1fa144449a0184266669b1ca6bed","modified":1533122904350},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"ed62ea83d3f2c9db2ea57bf23a7d765ed82504c2","modified":1533122904491},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"53861f78a1fb52e96a43cf6909e1530dcf6cbff8","modified":1533122904507},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c62c37474c8de78cf34e54c6219b503ec28d9815","modified":1533122904507},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"ccf0035086e14dcefa24c2907301edf4c37d5448","modified":1533122904522},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"736cb278fa09d3b4ed6f305b56353941ea918793","modified":1533122904507},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1533122904522},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"a174d4a0c9188f9c4a2652f49bfa7a60ad0a83e3","modified":1533122904522},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"4b48fdbfe3bf41ddeda4ff74c1ff17ab9f15c14e","modified":1533122904366},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1533122904522},{"_id":"themes/next/layout/_partials/comments.swig","hash":"412d2a0e18a237e490e1b8bce5547558768b9da3","modified":1533122904366},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7cba33ea7dd3c8948f29794d64c495823c88ad54","modified":1533122904413},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1533122904553},{"_id":"themes/next/scripts/tags/button.js","hash":"510f3711a9c9d3e2a844250647d90e8359e7d130","modified":1533122904553},{"_id":"themes/next/scripts/tags/exturl.js","hash":"83e48148d2f4f8543f6833effa8a26eb0b60f2f0","modified":1533122904553},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"2b969ca830862b2bc119b69ede4bd971e27a6ff8","modified":1533122904553},{"_id":"themes/next/scripts/tags/full-image.js","hash":"ef2c2985a3edb9f69740740c5bc42d4b692c86fd","modified":1533122904553},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"c68b1e6d4a8236d6731e4175ef3ddc284255d63b","modified":1533122904553},{"_id":"themes/next/scripts/tags/label.js","hash":"bb502616bfabe85de5de903074ec6afe627f8413","modified":1533122904553},{"_id":"themes/next/scripts/tags/note.js","hash":"bd3310a5890bded1bda9ba3ad6f98ee44ecb101a","modified":1533122904553},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2d257e26718d4011509fd6f530d2ea37e50e3e66","modified":1533122904553},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1533122904444},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"206cbd6ac9ca6a219a8516f59beae25b3c770199","modified":1533122904444},{"_id":"themes/next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1533122904685},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1533122904685},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1533122904685},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1533122904522},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1533122904685},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1533122904685},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1533122904700},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1533122904700},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1533122904700},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1533122904700},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1533122904700},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1533122904700},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1533122904685},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533122904700},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1533122904700},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533122904700},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1533122904700},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1533122904700},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1533122904700},{"_id":"source/_posts/pic/1012308194.jpg","hash":"ee7ad825d1a115e34bea83bd3caa4fa1a0bd8f60","modified":1533215872627},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1533122904700},{"_id":"source/_posts/pic/1762221382.jpg","hash":"3136e6f69e1f78324ceb62e4fc04bf48151dc5b9","modified":1533215872630},{"_id":"source/_posts/pic/2900977792.jpg","hash":"ba9bc751c0366718b535c3a3f8b20c9bca7ddf99","modified":1533296938401},{"_id":"source/_posts/pic/3526.jpg","hash":"9750068ad04694a895842d9e0b0544ea161c567e","modified":1533215872634},{"_id":"source/_posts/pic/596444702.jpg","hash":"bd3b7a90be48231625fc1ff5ba657eb167fd9e36","modified":1533296938424},{"_id":"source/_posts/vue、react隐式实例化/596444702.jpg","hash":"bd3b7a90be48231625fc1ff5ba657eb167fd9e36","modified":1533296938926},{"_id":"source/_posts/pic/877090454.jpg","hash":"9a5fd3e7d2c569734f8ab343330cab5c0b68c684","modified":1533296938745},{"_id":"source/_posts/pic/713080393.jpg","hash":"9f9e9deddf4fa2600d75d9e7fec3a36136a64d79","modified":1533296938729},{"_id":"source/_posts/vue与react组件对比学习/877090454.jpg","hash":"9a5fd3e7d2c569734f8ab343330cab5c0b68c684","modified":1533296938941},{"_id":"source/_posts/vue较少关注的地方/3526.jpg","hash":"9750068ad04694a895842d9e0b0544ea161c567e","modified":1533215872650},{"_id":"source/_posts/家乡/1762221382.jpg","hash":"3136e6f69e1f78324ceb62e4fc04bf48151dc5b9","modified":1533215872656},{"_id":"source/_posts/看到的面试题/713080393.jpg","hash":"9f9e9deddf4fa2600d75d9e7fec3a36136a64d79","modified":1533296939004},{"_id":"source/_posts/绕不开的promise/1012308194.jpg","hash":"ee7ad825d1a115e34bea83bd3caa4fa1a0bd8f60","modified":1533215872667},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533122904475},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533122904475},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533122904653},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533122904653},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533122904656},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533122904685},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533122904685},{"_id":"source/_posts/pic/1132638050.jpg","hash":"45820436c83d7b9ddb9b548a789c1831eb0a4c39","modified":1533122904147},{"_id":"source/_posts/pic/1917180847.jpg","hash":"1350a163c67409b6ab87784de31d73a16c4fe613","modified":1533122904163},{"_id":"source/_posts/pic/431359834.jpg","hash":"1b8d94929830b34144aa0628dc9ec41e7bcdc40f","modified":1533215872645},{"_id":"source/_posts/pic/456066894.jpg","hash":"0112f06e8784cc8a2a2d1f1a2e3259451a4c057d","modified":1533296938411},{"_id":"source/_posts/pic/4282315052.jpg","hash":"428c859d3c9112d596f1677b4acce7d6031f4105","modified":1535255561000},{"_id":"source/_posts/一次面试记录/456066894.jpg","hash":"0112f06e8784cc8a2a2d1f1a2e3259451a4c057d","modified":1533296938988},{"_id":"source/_posts/神奇的reduce/1917180847.jpg","hash":"1350a163c67409b6ab87784de31d73a16c4fe613","modified":1533122904178},{"_id":"source/_posts/四月的清风/1132638050.jpg","hash":"45820436c83d7b9ddb9b548a789c1831eb0a4c39","modified":1533125180067},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1533122904350},{"_id":"source/_posts/前端部署nginx配置/4282315052.jpg","hash":"428c859d3c9112d596f1677b4acce7d6031f4105","modified":1535255561030},{"_id":"source/_posts/牢骚/431359834.jpg","hash":"1b8d94929830b34144aa0628dc9ec41e7bcdc40f","modified":1533215872662},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1533122904475},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1533122904475},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"580e9d9c4d8783ee6200d845ae16c98979bf1ea3","modified":1533122904475},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1533122904475},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"c43f41b7f3c0743d1e673af2e787ea34a67fc9cb","modified":1533122904475},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"aab518204d3125e948796a9ba6b56b09cade2d92","modified":1533122904350},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1533122904475},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1533122904475},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1533122904491},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1533122904491},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"d67d9a176a276cdab6f2bcb7eb3650fbca5459c4","modified":1533122904491},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1533122904491},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"809f6d31c24ee0012e12631f5893a79f69e7bc84","modified":1533122904491},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1533122904491},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1533122904475},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1533122904491},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"4a2d2269f23e90c1311bd867d22def0b4a092bf1","modified":1533122904491},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"34cc66d4dbada2d561ba6f70fd9a75207c5adbd4","modified":1533122904507},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"292cdd1059b76d3d10486b71c99d9afb3e59ea44","modified":1533122904507},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1533122904491},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"694483f2d853c65b87a6a70e38dbc40e40eb1332","modified":1533122904507},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"d05e70a416963023ee1978e4168d58bcfd956ed3","modified":1533122904507},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1533122904507},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1533122904522},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1533122904491},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"c0c2fd87e71f0beb542aa50c0bc875da5aa5c44b","modified":1533122904507},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"30e9e55d9af2ced6e6b156a042026a8b480f0ab0","modified":1533122904507},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1533122904522},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1533122904428},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1533122904538},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"0b8349710caf9691741a457aa746add35245048e","modified":1533122904428},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"19050627bc23b0b2c2e65e7248c0f88468eb8ea5","modified":1533122904428},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1533122904428},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"f3ae3168801304af3d80ec3b84264e1d4201cb89","modified":1533122904428},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"3f11ae8e9084f39628cd2006931d39a2069b9dd6","modified":1533122904428},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1533122904444},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1533122904444},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"09109a5c5a301e7cc5e3c7aec32b0164739fc7d4","modified":1533122904428},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1533122904444},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1533122904460},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"71c897f9b107dd0de1b7f649633cf583c206a9db","modified":1533122904522},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1533122904460},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1533122904444},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"9769e33d5119aac82b944c6709e4c190fcc1c818","modified":1533122904651},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1533122904652},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1533122904654},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1533122904685},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"8d6cf29f63c90364f4d3c336f7c9bb794b4c46cc","modified":1533122904685},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0882d76333ab409e8d3362c284b91a0f0ae761ae","modified":1533122904656},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"72927abd51d3a607a6ba32cf882390792b34e834","modified":1533122904685},{"_id":"themes/next/source/css/_variables/base.styl","hash":"1625e3e1da6c453108526e027dae25e311b18adf","modified":1533122904685},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1533122904700},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1533122904716},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1533122904716},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1533122904716},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1533122904716},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1533122904716},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1533122904716},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1533122904716},{"_id":"themes/next/source/js/src/utils.js","hash":"9cddff04f9ff64b1e3202e1726eff512a2ef8497","modified":1533122904716},{"_id":"themes/next/source/js/src/motion.js","hash":"6b5a2646b775609630b9ff6221fa58b6823a25fa","modified":1533122904716},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1533122904731},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1533122904731},{"_id":"source/_posts/pic/1301854874.jpg","hash":"0667303878c9d0931b6fcd21e2ab5784e45236b6","modified":1535255560975},{"_id":"source/_posts/pic/1959017488.jpg","hash":"1b7b23482597376f03768d36698cacb7a22ac414","modified":1533122904163},{"_id":"source/_posts/pic/1997264555.jpg","hash":"84c3d5ba4ca31370133474375b8346782c532863","modified":1533122904163},{"_id":"source/_posts/pic/2048547518.jpg","hash":"fb36ccd58e555f294a7dc296b06f312b77af7eda","modified":1533122904163},{"_id":"source/_posts/pic/565924812.jpg","hash":"69f486382d9620ca60e429008d911420cdea0b43","modified":1535255561005},{"_id":"source/_posts/pic/433381594.jpg","hash":"925c43afa8f407b38d9ee42de33fc12538a33af2","modified":1535255561003},{"_id":"source/_posts/pic/944233120.jpg","hash":"3b3655c7c48b2278a3200ed5423ed2520d182131","modified":1535255561009},{"_id":"source/_posts/redux之createStore/565924812.jpg","hash":"69f486382d9620ca60e429008d911420cdea0b43","modified":1535255561022},{"_id":"source/_posts/你好，世界/1959017488.jpg","hash":"1b7b23482597376f03768d36698cacb7a22ac414","modified":1533122904178},{"_id":"source/_posts/react-motion翻译及学习/944233120.jpg","hash":"3b3655c7c48b2278a3200ed5423ed2520d182131","modified":1535255561013},{"_id":"source/_posts/几个题目/1301854874.jpg","hash":"0667303878c9d0931b6fcd21e2ab5784e45236b6","modified":1535255561026},{"_id":"source/_posts/小时候吃的/1997264555.jpg","hash":"84c3d5ba4ca31370133474375b8346782c532863","modified":1533125347900},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1533122904731},{"_id":"source/_posts/redux之compose/196334101.jpg","hash":"596677bbdd8c72e5c6c148f04cd9866e9023730d","modified":1535255561018},{"_id":"source/_posts/pic/898024871.jpg","hash":"6d5c2f0c51d14361f2a7e776c7bd466c7373ad33","modified":1533122904163},{"_id":"source/_posts/三月的烟雨/898024871.jpg","hash":"6d5c2f0c51d14361f2a7e776c7bd466c7373ad33","modified":1533124057106},{"_id":"source/_posts/pic/196334101.jpg","hash":"596677bbdd8c72e5c6c148f04cd9866e9023730d","modified":1535255560995},{"_id":"source/_posts/懒加载/433381594.jpg","hash":"925c43afa8f407b38d9ee42de33fc12538a33af2","modified":1535255561030},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6e076b5e183eedf425a445e99851f938789c3194","modified":1533122904522},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1533122904522},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1533122904460},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1533122904553},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1533122904553},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1533122904553},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1533122904553},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1533122904553},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1533122904585},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1533122904616},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"97bb39756e85f5b27bba7f43270105ad01d736c9","modified":1533122904632},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1533122904632},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1533122904632},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1533122904648},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"52bc8ba71b91d954530b35dfc63b402a02b1321d","modified":1533122904649},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"fbb6be577529c750ef7c872fe7abdc7ab0faf0f8","modified":1533122904632},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1533122904632},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1533122904661},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1533122904662},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa6c00fdaf8f0ca3b690a5a556671745fb67e2c9","modified":1533122904664},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7e4e499964c2112d47e6f9d2b6e87c31ec8269e2","modified":1533122904657},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f3aa863adf972569b72f2df6bc6a914e7daace99","modified":1533122904663},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1533122904659},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2ccb9bdc309b7c1ef183a3dbb0a4621bec54a328","modified":1533122904666},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1533122904665},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1533122904671},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1533122904670},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1533122904673},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"3cc7646583218d16925ced7b70865e63a901d4a7","modified":1533122904672},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1533122904675},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1533122904677},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"cc961108b12ab97d9216606ceb1cd1cd31ab20f0","modified":1533122904679},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ccf5a4761cb0ce451b5e994cfabf8769248a45c1","modified":1533122904678},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1533122904681},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1533122904685},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"df16dc995eb9ad498df2edcfc3e20528fc9aa133","modified":1533122904682},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"6ed3f2389457daa382de96a08633d9faaaaf53fb","modified":1533122904716},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1533122904716},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"be72740313a9a0477b8a22f62e4c8ffa6d23a2e5","modified":1533122904683},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1533122904731},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1533122904569},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1533122904569},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1533122904569},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"3f3d2a43d1a326bad25b633c8ec9ddd87867224c","modified":1533122904569},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1533122904569},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1533122904569},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"835c1340571bd6c4ec263c482cf13283fb047e49","modified":1533122904569},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1533122904569},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7dd247c8869fdefb5a007045d00f3ef8ceecf300","modified":1533122904569},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1533122904569},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1533122904569},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"630be616447a982413030e561bbd3a80ac14b120","modified":1533122904569},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1533122904585},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1533122904585},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1533122904585},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1533122904585},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1533122904585},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1533122904585},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"317c9ceda655e9dc373ce8e7b71d20b794fce9a4","modified":1533122904585},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1533122904585},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1533122904585},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1533122904585},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1533122904585},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1533122904600},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1533122904585},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1533122904600},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1533122904569},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"adfd6d2d3b34adc4b476a0ea91e19020456a3b1a","modified":1533122904600},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1533122904600},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1533122904600},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bb8162bb7c7b0b255a0e8e234eb382a0879a4962","modified":1533122904600},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5c3141d58970a0614896b6a62fd7a8a8caf4e401","modified":1533122904600},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1533122904600},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1533122904600},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"debe322cc9e2688ecf38d0b6afcd6b71ad02fbd0","modified":1533122904600},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9e05a2232faabb41bcebb51d545d897a76f077da","modified":1533122904616},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1533122904600},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1533122904600},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1533122904600},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1533122904616},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1533122904616},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"94d76e6da600a36d80e2470326ebb6b3be447ccb","modified":1533122904616},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1533122904616},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1533122904616},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1533122904616},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"02ee0eb49c256ecb4e71bbc65072f9147418d7d7","modified":1533122904616},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1533122904616},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1533122904616},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1533122904616},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1533122904632},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1533122904616},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f4d8144c22544bdb89787c14ab9d39578dae4b7c","modified":1533122904632},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1533122904632},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1533122904632},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1533122904632},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1533122904632},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1533122904667},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1533122904632},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"c31fbaec7e6373ecfb8588500b972d451695a6ad","modified":1533122904632},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"acfdd76b1c90d2e384affb3d0006a39b524609d2","modified":1533122904632},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1533122904676},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1533122904669},{"_id":"public/2018/08/26/维生素指北/index.html","hash":"723f5bb364145fd720f1fed07f8c8c326361ff77","modified":1535987582901},{"_id":"public/categories/index.html","hash":"401b5a95a307581fbb2a36616c9a66ba2e51fa1d","modified":1535987583005},{"_id":"public/categories/前端/page/2/index.html","hash":"f0a88d64b5773e43fd51a7557573c3c040c5b33c","modified":1535987583005},{"_id":"public/tags/index.html","hash":"9c6607d4a1f564b18392228c18503b9ff2628d7f","modified":1535987583005},{"_id":"public/tags/redux/index.html","hash":"af48541101333e092474fc9b0671566032661bac","modified":1535987583005},{"_id":"public/tags/react/index.html","hash":"91d8f8fa800437a8a3758cb109445ff3fefe2b24","modified":1535987583005},{"_id":"public/tags/源码/index.html","hash":"4680e3822a747814e5e03defc8c4a5dfba03b5d3","modified":1535987583005},{"_id":"public/tags/react-motion/index.html","hash":"8bf76b6f2dd05874009f53d68f80aeee8e62a5f3","modified":1535987583005},{"_id":"public/tags/翻译/index.html","hash":"ebec40dd307f8d022ddf554f567e25b77bcb9998","modified":1535987583005},{"_id":"public/tags/图库/index.html","hash":"9b3a96d13bb0487b2ea80bc9abce5fc1099a5e4d","modified":1535987583005},{"_id":"public/tags/vue/index.html","hash":"551ddc566a70ddc5ed0c60e2d33ab4b5a1d853b4","modified":1535987583005},{"_id":"public/tags/面试/index.html","hash":"49303a2340f3635bdc662e6e8d88ae408be599f6","modified":1535987583005},{"_id":"public/tags/nginx/index.html","hash":"d7006d60c36dfc79c5c6805ffe4f9c6d3d6fb53c","modified":1535987583005},{"_id":"public/tags/部署/index.html","hash":"ba2cf86084dd7ede9e68f25c1c99327f4525ab55","modified":1535987583005},{"_id":"public/tags/reduce/index.html","hash":"544446eff5090cb1847eeb7c72948bf1671e00f5","modified":1535987583005},{"_id":"public/tags/题目/index.html","hash":"0568e28891aa27de3f2f2cdb1f629704780baed4","modified":1535987583005},{"_id":"public/categories/杂记/index.html","hash":"272646b114f2e7bbff58e835d63c16312791222e","modified":1535987583005},{"_id":"public/categories/生活/index.html","hash":"759eee98b86278d1a77adbb0795bea6a20c0ada4","modified":1535987583005},{"_id":"public/tags/数组/index.html","hash":"7cc7b11989fd18f3e76a5024ae71e3a85e69a5ae","modified":1535987583005},{"_id":"public/tags/健康/index.html","hash":"de4557ab09dab41bac74bfad5da890d28db1aea2","modified":1535987583005},{"_id":"public/tags/promise/index.html","hash":"cb3db7173e4e74fb3c36eb8ec8d31e587e433477","modified":1535987583005},{"_id":"public/tags/维生素/index.html","hash":"58729b7dbdcbdad8d1c1064767eb5cd8744ffd33","modified":1535987583005},{"_id":"public/tags/懒加载/index.html","hash":"a442903cdc361d008ba596ae659b52ecda9e3e4a","modified":1535987583005},{"_id":"public/archives/page/3/index.html","hash":"ce50f807574af3542a09f8fd4693ae8f88ae8be7","modified":1535987583005},{"_id":"public/archives/2018/page/3/index.html","hash":"e0b0b46a6a0e198a93cf561f5e89a58770acd968","modified":1535987583005},{"_id":"public/archives/2018/08/page/3/index.html","hash":"fbeebdd650ef60bf851c925ac5b0ce0c02d2150f","modified":1535987583005},{"_id":"public/2018/09/03/redux之applyMiddleware/index.html","hash":"e1f18fd1e8df48dc2f136b764fbc4a38fdfaa68a","modified":1535987583005},{"_id":"public/2018/08/16/几个题目/index.html","hash":"d3b6a4a30edec6f92f0d7d0558966253e210c9cb","modified":1535987583005},{"_id":"public/2018/08/14/懒加载/index.html","hash":"41e2eff29f90223d0bfb6ac61d16d0f4cfb70f7a","modified":1535987583005},{"_id":"public/2018/08/14/react-motion翻译及学习/index.html","hash":"927528edce0962b4e201f66a40c4bb1666c3467b","modified":1535987583005},{"_id":"public/2018/08/03/redux之createStore/index.html","hash":"a34d96199a95598049e2d46d8699079d6f785621","modified":1535987583005},{"_id":"public/2018/08/03/redux之compose/index.html","hash":"0094143b40dcfa8a78aeb1f7b5eae64d32ebf755","modified":1535987583005},{"_id":"public/2018/08/03/一次面试记录/index.html","hash":"adb5087a5bcbb132e3cd753baa025f853bcdd4d0","modified":1535987583005},{"_id":"public/2018/08/03/前端部署nginx配置/index.html","hash":"d5e14fe50af7bd7b9d7ba121fdc44f20c4f2ac03","modified":1535987583009},{"_id":"public/2018/08/03/看到的面试题/index.html","hash":"1ef36e982fd744d66c0827cb9ad4f67ec8918f26","modified":1535987583009},{"_id":"public/2018/08/03/vue、react隐式实例化/index.html","hash":"d673f8f5446b052897c20716004881b4134cb483","modified":1535987583009},{"_id":"public/2018/08/03/vue与react组件对比学习/index.html","hash":"da3d80df54b6b90fc9a311cdf63caad0341efed6","modified":1535987583009},{"_id":"public/2018/08/02/vue较少关注的地方/index.html","hash":"5fec4a5561b038270c5c2b7e795aa3a4147fb1e0","modified":1535987583009},{"_id":"public/2018/08/02/绕不开的promise/index.html","hash":"c95aa3e4a54181c0511a8bbbef06e0d8357d6c87","modified":1535987583009},{"_id":"public/2018/08/02/家乡/index.html","hash":"f183918f92d940612f722ed8c9e83796932570df","modified":1535987583009},{"_id":"public/2018/08/01/小时候吃的/index.html","hash":"2bc284d6531ad5e5071da74681e516eddeea5081","modified":1535987583009},{"_id":"public/2018/08/02/牢骚/index.html","hash":"21a14a489c09095c42bc656cd56c101ce944b2f2","modified":1535987583009},{"_id":"public/2018/08/01/四月的清风/index.html","hash":"ab4409585666c18bb8e549bf00dbd57f28d00cb0","modified":1535987583009},{"_id":"public/2018/08/01/三月的烟雨/index.html","hash":"e1c3d680bf5fd0d6517f0553c24768dceb1080af","modified":1535987583009},{"_id":"public/2018/08/01/pic/index.html","hash":"91a56b17919efe9a2a65bb9606bfaf41ea5e89bb","modified":1535987583009},{"_id":"public/2018/08/01/神奇的reduce/index.html","hash":"26f2fa61774393dddf52b1385f655e81808f4695","modified":1535987583009},{"_id":"public/2018/08/01/你好，世界/index.html","hash":"54ed38b93b5bf8ed5df391a5c63210aea3f8c10e","modified":1535987583009},{"_id":"public/categories/前端/index.html","hash":"c5db9e553bb2129d7c2db275704cb5c7587d7781","modified":1535987583009},{"_id":"public/index.html","hash":"b640ad9b8ed6190981073e15395329e57921f4ae","modified":1535987583009},{"_id":"public/archives/index.html","hash":"99fc365ff353a8979c63164a8a5a8ecf5aaf476b","modified":1535987583009},{"_id":"public/page/2/index.html","hash":"402e7279853d40cd5c18af3752c4b78626efecbb","modified":1535987583009},{"_id":"public/page/3/index.html","hash":"b72788fd33ae8a84be05dd746c0726b5df1d6d17","modified":1535987583009},{"_id":"public/archives/2018/index.html","hash":"51f9256c9f40bc05af30e45afbe296bfc777f3e4","modified":1535987583009},{"_id":"public/archives/page/2/index.html","hash":"9be617f14550d671558056a7c6258e60b0c5d2df","modified":1535987583009},{"_id":"public/archives/2018/page/2/index.html","hash":"a02478b0ea8fb0cbe0c0c69c61c42075d9dc8ac2","modified":1535987583009},{"_id":"public/archives/2018/08/index.html","hash":"b222ca0062f335fd05bd0c1e05563a9b25b7a2c3","modified":1535987583009},{"_id":"public/archives/2018/08/page/2/index.html","hash":"bc5ff98f38f910ff0b96c96ab5ffd9a5c1746038","modified":1535987583009},{"_id":"public/archives/2018/09/index.html","hash":"30b63843d836bbd579e94a33fdfaa9b9436daf6e","modified":1535987583037},{"_id":"public/CNAME","hash":"bf8ea4cd139b49f5a93dcd5ea3d12968dd6a4ad6","modified":1535987583037},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1535987583037},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1535987583037},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1535987583037},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1535987583037},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1535987583037},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1535987583037},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1535987583041},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1535987583041},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1535987583041},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1535987583041},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535987583041},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1535987583041},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1535987583041},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535987583041},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1535987583041},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1535987583041},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1535987583041},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1535987583041},{"_id":"public/2018/08/26/维生素指北/c.jpg","hash":"fa5437e5e5820f2b3d5b5b834db9ccbfe20784e7","modified":1535987583041},{"_id":"public/2018/08/26/维生素指北/a.jpg","hash":"b47790c20a90d7b3dfac8e219ce221457d724164","modified":1535987583041},{"_id":"public/2018/08/03/vue、react隐式实例化/596444702.jpg","hash":"bd3b7a90be48231625fc1ff5ba657eb167fd9e36","modified":1535987588302},{"_id":"public/2018/08/03/vue与react组件对比学习/877090454.jpg","hash":"9a5fd3e7d2c569734f8ab343330cab5c0b68c684","modified":1535987588306},{"_id":"public/2018/08/02/vue较少关注的地方/3526.jpg","hash":"9750068ad04694a895842d9e0b0544ea161c567e","modified":1535987588306},{"_id":"public/2018/08/03/看到的面试题/713080393.jpg","hash":"9f9e9deddf4fa2600d75d9e7fec3a36136a64d79","modified":1535987588306},{"_id":"public/2018/08/02/家乡/1762221382.jpg","hash":"3136e6f69e1f78324ceb62e4fc04bf48151dc5b9","modified":1535987588306},{"_id":"public/2018/08/01/pic/1012308194.jpg","hash":"ee7ad825d1a115e34bea83bd3caa4fa1a0bd8f60","modified":1535987588306},{"_id":"public/2018/08/02/绕不开的promise/1012308194.jpg","hash":"ee7ad825d1a115e34bea83bd3caa4fa1a0bd8f60","modified":1535987588306},{"_id":"public/2018/08/01/pic/1762221382.jpg","hash":"3136e6f69e1f78324ceb62e4fc04bf48151dc5b9","modified":1535987588306},{"_id":"public/2018/08/01/pic/3526.jpg","hash":"9750068ad04694a895842d9e0b0544ea161c567e","modified":1535987588306},{"_id":"public/2018/08/01/pic/2900977792.jpg","hash":"ba9bc751c0366718b535c3a3f8b20c9bca7ddf99","modified":1535987588306},{"_id":"public/2018/08/01/pic/713080393.jpg","hash":"9f9e9deddf4fa2600d75d9e7fec3a36136a64d79","modified":1535987588306},{"_id":"public/2018/08/01/pic/877090454.jpg","hash":"9a5fd3e7d2c569734f8ab343330cab5c0b68c684","modified":1535987588306},{"_id":"public/2018/08/01/pic/596444702.jpg","hash":"bd3b7a90be48231625fc1ff5ba657eb167fd9e36","modified":1535987588306},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1535987588354},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1535987588354},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1535987588354},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1535987588354},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1535987588354},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1535987588354},{"_id":"public/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1535987588354},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1535987588354},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1535987588354},{"_id":"public/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1535987588354},{"_id":"public/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1535987588354},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1535987588354},{"_id":"public/css/main.css","hash":"077183acc4f28d7584d2d6b6f71c1adb0a3549df","modified":1535987588354},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1535987588354},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1535987588354},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1535987588354},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1535987588354},{"_id":"public/2018/08/03/一次面试记录/456066894.jpg","hash":"0112f06e8784cc8a2a2d1f1a2e3259451a4c057d","modified":1535987588354},{"_id":"public/2018/08/03/前端部署nginx配置/4282315052.jpg","hash":"428c859d3c9112d596f1677b4acce7d6031f4105","modified":1535987588358},{"_id":"public/2018/08/02/牢骚/431359834.jpg","hash":"1b8d94929830b34144aa0628dc9ec41e7bcdc40f","modified":1535987588358},{"_id":"public/2018/08/01/四月的清风/1132638050.jpg","hash":"45820436c83d7b9ddb9b548a789c1831eb0a4c39","modified":1535987588358},{"_id":"public/2018/08/01/神奇的reduce/1917180847.jpg","hash":"1350a163c67409b6ab87784de31d73a16c4fe613","modified":1535987588358},{"_id":"public/2018/08/01/pic/1917180847.jpg","hash":"1350a163c67409b6ab87784de31d73a16c4fe613","modified":1535987588358},{"_id":"public/2018/08/01/pic/1132638050.jpg","hash":"45820436c83d7b9ddb9b548a789c1831eb0a4c39","modified":1535987588358},{"_id":"public/2018/08/01/pic/431359834.jpg","hash":"1b8d94929830b34144aa0628dc9ec41e7bcdc40f","modified":1535987588358},{"_id":"public/2018/08/01/pic/4282315052.jpg","hash":"428c859d3c9112d596f1677b4acce7d6031f4105","modified":1535987588358},{"_id":"public/2018/08/01/pic/456066894.jpg","hash":"0112f06e8784cc8a2a2d1f1a2e3259451a4c057d","modified":1535987588358},{"_id":"public/2018/08/01/pic/1997264555.jpg","hash":"84c3d5ba4ca31370133474375b8346782c532863","modified":1535987588390},{"_id":"public/2018/08/01/pic/1301854874.jpg","hash":"0667303878c9d0931b6fcd21e2ab5784e45236b6","modified":1535987588390},{"_id":"public/2018/08/01/pic/2048547518.jpg","hash":"fb36ccd58e555f294a7dc296b06f312b77af7eda","modified":1535987588390},{"_id":"public/2018/08/01/pic/565924812.jpg","hash":"69f486382d9620ca60e429008d911420cdea0b43","modified":1535987588390},{"_id":"public/2018/08/01/pic/1959017488.jpg","hash":"1b7b23482597376f03768d36698cacb7a22ac414","modified":1535987588390},{"_id":"public/2018/08/01/pic/944233120.jpg","hash":"3b3655c7c48b2278a3200ed5423ed2520d182131","modified":1535987588390},{"_id":"public/2018/08/01/pic/433381594.jpg","hash":"925c43afa8f407b38d9ee42de33fc12538a33af2","modified":1535987588390},{"_id":"public/2018/08/01/小时候吃的/1997264555.jpg","hash":"84c3d5ba4ca31370133474375b8346782c532863","modified":1535987588390},{"_id":"public/2018/08/01/你好，世界/1959017488.jpg","hash":"1b7b23482597376f03768d36698cacb7a22ac414","modified":1535987588390},{"_id":"public/2018/08/14/react-motion翻译及学习/944233120.jpg","hash":"3b3655c7c48b2278a3200ed5423ed2520d182131","modified":1535987588390},{"_id":"public/2018/08/16/几个题目/1301854874.jpg","hash":"0667303878c9d0931b6fcd21e2ab5784e45236b6","modified":1535987588390},{"_id":"public/2018/08/14/懒加载/433381594.jpg","hash":"925c43afa8f407b38d9ee42de33fc12538a33af2","modified":1535987588394},{"_id":"public/2018/08/03/redux之createStore/565924812.jpg","hash":"69f486382d9620ca60e429008d911420cdea0b43","modified":1535987588394},{"_id":"public/2018/08/01/pic/898024871.jpg","hash":"6d5c2f0c51d14361f2a7e776c7bd466c7373ad33","modified":1535987589021},{"_id":"public/2018/08/01/三月的烟雨/898024871.jpg","hash":"6d5c2f0c51d14361f2a7e776c7bd466c7373ad33","modified":1535987589021},{"_id":"public/2018/08/01/pic/196334101.jpg","hash":"596677bbdd8c72e5c6c148f04cd9866e9023730d","modified":1535987589021},{"_id":"public/2018/08/03/redux之compose/196334101.jpg","hash":"596677bbdd8c72e5c6c148f04cd9866e9023730d","modified":1535987589021}],"Category":[{"name":"前端","_id":"cjlmfcbcs0001ssv6w6m2x38v"},{"name":"杂记","_id":"cjlmfcbhc000pssv6mw25l2on"},{"name":"生活","_id":"cjlmfcbi80013ssv69o7v873w"}],"Data":[],"Page":[{"title":"分类","date":"2018-08-01T11:28:24.178Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 日期\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-08-01T11:28:24.178Z","path":"categories/index.html","layout":"page","_id":"cjlmfcbfw000assv6p5c8bhu5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-08-01T11:28:24.178Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 日期\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-08-01T11:28:24.178Z","path":"tags/index.html","layout":"page","_id":"cjlmfcbfw000cssv6skyx3iap","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"redux之applyMiddleware","date":"2018-09-03T13:39:05.000Z","_content":"\n# redux之applyMiddleware\n\n`redux` 函数式写法相当多，所以在 `applyMiddleware` 处理多个中间执行顺序的写法也是比较绕和难懂的。`redux` 的中间件用切面的思想，让第三方的中间件切入到 `reducer` 处理 `action` 之前，做一些处理比如 `log` 之类的。`applyMiddleware` 则是把众多的中间件汇聚在一起，一层一层地去增强了原本生成的`store` 上的 `dispath` 的功能。\n\n## 用法\n\n先看下怎么使用这个 `api`：\n\n```js\nimport { createStore, applyMiddleware } from 'redux'\nimport todos from './reducers'\n\nfunction logger({ getState }) {\n  return (next) => (action) => {\n    console.log('will dispatch', action)\n\n    // 调用 middleware 链中下一个 middleware 的 dispatch。\n    let returnValue = next(action)\n\n    console.log('state after dispatch', getState())\n\n    // 一般会是 action 本身，除非\n    // 后面的 middleware 修改了它。\n    return returnValue\n  }\n}\n\nlet store = createStore(\n  todos,\n  [ 'Use Redux' ],\n  applyMiddleware(logger)\n)\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'Understand the middleware'\n})\n// (将打印如下信息:)\n// will dispatch: { type: 'ADD_TODO', text: 'Understand the middleware' }\n// state after dispatch: [ 'Use Redux', 'Understand the middleware' ]\n```\n\n官网的这个例子大概说明了 `applyMiddleware` 的用法了，这里用 `let store = createStore(todos, [ 'Use Redux' ],applyMiddleware(logger))` 生成了一个新的store，同样的也可以用 `let newStore = applyMiddleware(mid1, mid2, mid3, ...)(createStore)(reducer, initialState);` 的方式生成 `store`。`applyMiddleware` 返回一个 `store` 的 `enhancer` 然后生成增强后的 `createStore` ，部分细节可以参照 `createStore` 中的一小段代码：\n\n`./createStore.js`\n\n```js\nif (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n        // enhancer 不是函数就报错\n      throw new Error('Expected the enhancer to be a function.')\n    }\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n```\n\n## 源码\n\n```js\nexport default function applyMiddleware(...middlewares) {\n  return createStore => (...args) => {\n    const store = createStore(...args)\n    let dispatch = () => {\n      throw new Error(\n        `Dispatching while constructing your middleware is not allowed. ` +\n          `Other middleware would not be applied to this dispatch.`\n      )\n    }\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n    const chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n\n    // const middle1 = next => action => next(action)\n    // const middle2 = next => action => next(action)\n\n    // dispatch = compose(middle1, middle2)(store.dispatch) = middle1(middle2(store.dispatch))\n    // dispatch(actions) = middle1(middle2(store.dispatch))(actions)\n    // middle2(store.dispatch) = action => store.dispath(action)\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n```\n\n上来返回一个接收 `createStore`做为参数的函数，调用这个`createStore` 去生成对应的 `store`，之前也提到了`applyMiddleware` 主要目的是为了增强 `dispatch`的功能，所以最后是用拓展运算符返回了原本store上的属性以及增强过的`dispatch`。\n\n### 细节\n\n```js\n(...args) => {\n    const store = createStore(...args)\n    let dispatch = () => {\n      throw new Error(\n        `Dispatching while constructing your middleware is not allowed. ` +\n          `Other middleware would not be applied to this dispatch.`\n      )\n    }\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n    const chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n    return {\n      ...store,\n      dispatch\n    }\n```\n\n中间件的签名是这样的 `({dispatch, getStore}) => next => action => {// 一些第三方中间件的处理}`，这里对整个`middlewares` 数组进行了一次 `map` 给每一个中间件传入 `middlewareAPI` 进行一次调用，可以看做是进行了一次剥皮，这样chain里面存的就都是 `next => action => {// 一些第三方中间件的处理}` 这样签名的函数了。最关键的一步来了，`dispatch = compose(...chain)(store.dispatch)` 用 `compose` 把`chain` 内部的函数全部组合起来，接受最原始的 `store.dispatch`，生成一个增强后的 `dispatch` 。讲清楚这一行代码，就能搞明白 `redux` 的中间件干了什么事情。\n\n### 特别的一行代码\n\n```js\ndispatch = compose(...chain)(store.dispatch)\n```\n\n我们先假设传给了 `applyMiddleware` 这样的参数：\n\n```js\n\nconst middleware1 = ({dispatch, getStore}) => next => action => {\n    console.log(`middleware1 start`)\n    next(action)\n    console.log(`middleware1 end`)\n}\n\nconst middleware2 = ({dispatch, getStore}) => next => action => {\n    console.log(`middleware2 start`)\n    next(action)\n    console.log(`middleware2 end`)\n}\nconst enhancer = applyMidleware([middleware1, middleware2])\n```\n\n到了上述这行代码的时候，`chain` 是这个样子了：\n\n```js\n\nconst m1 = next => action => {\n        console.log(`middleware1 start`)\n        next(action)\n        console.log(`middleware1 end`)\n    }\nconst m2 = next => action => {\n        console.log(`middleware2 start`)\n        next(action)\n        console.log(`middleware2 end`)\n    }\nchain = [m1, m2]\n```\n\n结合之前提到的 `compose` 组合函数，所以这行代码变形成这样：`dispatch = m1(m2(store.dispatch))`。这个时候假设需要`dispatch` 一个 `anAction` ，就会变成这样 `m1(m2(store.dispatch))(anAction)`。对于m1而言，`m2(store.dispatch)` 就是他的 `next` 参数，当 `m1` 执行到 `next(action)`的时候，相当于这时候调用了`m2(store.dispatch)(action)`, 然后进入到`m2`中间件的逻辑，此时`m2`中间件接受的 `next` 正是原本的 `store.dispatch`，运行到`m2` 内部的 `next(action)` 的时候，这时候才去真正的用`store.dispatch` 去处理这个 `action`。\n\n这就有种俄罗斯套娃一样，一层一层地嵌套，`action` 经过多层的处理，最终到达最里层的才真正地被`dispatch` 。","source":"_posts/redux之applyMiddleware.md","raw":"---\ntitle: redux之applyMiddleware\ndate: 2018-09-03 21:39:05\ntags:\n  - redux\n  - react\n  - 源码\ncategories: 前端\n---\n\n# redux之applyMiddleware\n\n`redux` 函数式写法相当多，所以在 `applyMiddleware` 处理多个中间执行顺序的写法也是比较绕和难懂的。`redux` 的中间件用切面的思想，让第三方的中间件切入到 `reducer` 处理 `action` 之前，做一些处理比如 `log` 之类的。`applyMiddleware` 则是把众多的中间件汇聚在一起，一层一层地去增强了原本生成的`store` 上的 `dispath` 的功能。\n\n## 用法\n\n先看下怎么使用这个 `api`：\n\n```js\nimport { createStore, applyMiddleware } from 'redux'\nimport todos from './reducers'\n\nfunction logger({ getState }) {\n  return (next) => (action) => {\n    console.log('will dispatch', action)\n\n    // 调用 middleware 链中下一个 middleware 的 dispatch。\n    let returnValue = next(action)\n\n    console.log('state after dispatch', getState())\n\n    // 一般会是 action 本身，除非\n    // 后面的 middleware 修改了它。\n    return returnValue\n  }\n}\n\nlet store = createStore(\n  todos,\n  [ 'Use Redux' ],\n  applyMiddleware(logger)\n)\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'Understand the middleware'\n})\n// (将打印如下信息:)\n// will dispatch: { type: 'ADD_TODO', text: 'Understand the middleware' }\n// state after dispatch: [ 'Use Redux', 'Understand the middleware' ]\n```\n\n官网的这个例子大概说明了 `applyMiddleware` 的用法了，这里用 `let store = createStore(todos, [ 'Use Redux' ],applyMiddleware(logger))` 生成了一个新的store，同样的也可以用 `let newStore = applyMiddleware(mid1, mid2, mid3, ...)(createStore)(reducer, initialState);` 的方式生成 `store`。`applyMiddleware` 返回一个 `store` 的 `enhancer` 然后生成增强后的 `createStore` ，部分细节可以参照 `createStore` 中的一小段代码：\n\n`./createStore.js`\n\n```js\nif (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n        // enhancer 不是函数就报错\n      throw new Error('Expected the enhancer to be a function.')\n    }\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n```\n\n## 源码\n\n```js\nexport default function applyMiddleware(...middlewares) {\n  return createStore => (...args) => {\n    const store = createStore(...args)\n    let dispatch = () => {\n      throw new Error(\n        `Dispatching while constructing your middleware is not allowed. ` +\n          `Other middleware would not be applied to this dispatch.`\n      )\n    }\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n    const chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n\n    // const middle1 = next => action => next(action)\n    // const middle2 = next => action => next(action)\n\n    // dispatch = compose(middle1, middle2)(store.dispatch) = middle1(middle2(store.dispatch))\n    // dispatch(actions) = middle1(middle2(store.dispatch))(actions)\n    // middle2(store.dispatch) = action => store.dispath(action)\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n```\n\n上来返回一个接收 `createStore`做为参数的函数，调用这个`createStore` 去生成对应的 `store`，之前也提到了`applyMiddleware` 主要目的是为了增强 `dispatch`的功能，所以最后是用拓展运算符返回了原本store上的属性以及增强过的`dispatch`。\n\n### 细节\n\n```js\n(...args) => {\n    const store = createStore(...args)\n    let dispatch = () => {\n      throw new Error(\n        `Dispatching while constructing your middleware is not allowed. ` +\n          `Other middleware would not be applied to this dispatch.`\n      )\n    }\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (...args) => dispatch(...args)\n    }\n    const chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n    return {\n      ...store,\n      dispatch\n    }\n```\n\n中间件的签名是这样的 `({dispatch, getStore}) => next => action => {// 一些第三方中间件的处理}`，这里对整个`middlewares` 数组进行了一次 `map` 给每一个中间件传入 `middlewareAPI` 进行一次调用，可以看做是进行了一次剥皮，这样chain里面存的就都是 `next => action => {// 一些第三方中间件的处理}` 这样签名的函数了。最关键的一步来了，`dispatch = compose(...chain)(store.dispatch)` 用 `compose` 把`chain` 内部的函数全部组合起来，接受最原始的 `store.dispatch`，生成一个增强后的 `dispatch` 。讲清楚这一行代码，就能搞明白 `redux` 的中间件干了什么事情。\n\n### 特别的一行代码\n\n```js\ndispatch = compose(...chain)(store.dispatch)\n```\n\n我们先假设传给了 `applyMiddleware` 这样的参数：\n\n```js\n\nconst middleware1 = ({dispatch, getStore}) => next => action => {\n    console.log(`middleware1 start`)\n    next(action)\n    console.log(`middleware1 end`)\n}\n\nconst middleware2 = ({dispatch, getStore}) => next => action => {\n    console.log(`middleware2 start`)\n    next(action)\n    console.log(`middleware2 end`)\n}\nconst enhancer = applyMidleware([middleware1, middleware2])\n```\n\n到了上述这行代码的时候，`chain` 是这个样子了：\n\n```js\n\nconst m1 = next => action => {\n        console.log(`middleware1 start`)\n        next(action)\n        console.log(`middleware1 end`)\n    }\nconst m2 = next => action => {\n        console.log(`middleware2 start`)\n        next(action)\n        console.log(`middleware2 end`)\n    }\nchain = [m1, m2]\n```\n\n结合之前提到的 `compose` 组合函数，所以这行代码变形成这样：`dispatch = m1(m2(store.dispatch))`。这个时候假设需要`dispatch` 一个 `anAction` ，就会变成这样 `m1(m2(store.dispatch))(anAction)`。对于m1而言，`m2(store.dispatch)` 就是他的 `next` 参数，当 `m1` 执行到 `next(action)`的时候，相当于这时候调用了`m2(store.dispatch)(action)`, 然后进入到`m2`中间件的逻辑，此时`m2`中间件接受的 `next` 正是原本的 `store.dispatch`，运行到`m2` 内部的 `next(action)` 的时候，这时候才去真正的用`store.dispatch` 去处理这个 `action`。\n\n这就有种俄罗斯套娃一样，一层一层地嵌套，`action` 经过多层的处理，最终到达最里层的才真正地被`dispatch` 。","slug":"redux之applyMiddleware","published":1,"updated":"2018-09-03T15:12:03.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbck0000ssv6pbsebd7j","content":"<h1 id=\"redux之applyMiddleware\"><a href=\"#redux之applyMiddleware\" class=\"headerlink\" title=\"redux之applyMiddleware\"></a>redux之applyMiddleware</h1><p><code>redux</code> 函数式写法相当多，所以在 <code>applyMiddleware</code> 处理多个中间执行顺序的写法也是比较绕和难懂的。<code>redux</code> 的中间件用切面的思想，让第三方的中间件切入到 <code>reducer</code> 处理 <code>action</code> 之前，做一些处理比如 <code>log</code> 之类的。<code>applyMiddleware</code> 则是把众多的中间件汇聚在一起，一层一层地去增强了原本生成的<code>store</code> 上的 <code>dispath</code> 的功能。</p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>先看下怎么使用这个 <code>api</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, applyMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> todos <span class=\"keyword\">from</span> <span class=\"string\">'./reducers'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\">&#123; getState &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">next</span>) =&gt;</span> (action) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'will dispatch'</span>, action)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用 middleware 链中下一个 middleware 的 dispatch。</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> returnValue = next(action)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'state after dispatch'</span>, getState())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一般会是 action 本身，除非</span></span><br><span class=\"line\">    <span class=\"comment\">// 后面的 middleware 修改了它。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> returnValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> store = createStore(</span><br><span class=\"line\">  todos,</span><br><span class=\"line\">  [ <span class=\"string\">'Use Redux'</span> ],</span><br><span class=\"line\">  applyMiddleware(logger)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'ADD_TODO'</span>,</span><br><span class=\"line\">  text: <span class=\"string\">'Understand the middleware'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// (将打印如下信息:)</span></span><br><span class=\"line\"><span class=\"comment\">// will dispatch: &#123; type: 'ADD_TODO', text: 'Understand the middleware' &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// state after dispatch: [ 'Use Redux', 'Understand the middleware' ]</span></span><br></pre></td></tr></table></figure>\n<p>官网的这个例子大概说明了 <code>applyMiddleware</code> 的用法了，这里用 <code>let store = createStore(todos, [ &#39;Use Redux&#39; ],applyMiddleware(logger))</code> 生成了一个新的store，同样的也可以用 <code>let newStore = applyMiddleware(mid1, mid2, mid3, ...)(createStore)(reducer, initialState);</code> 的方式生成 <code>store</code>。<code>applyMiddleware</code> 返回一个 <code>store</code> 的 <code>enhancer</code> 然后生成增强后的 <code>createStore</code> ，部分细节可以参照 <code>createStore</code> 中的一小段代码：</p>\n<p><code>./createStore.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// enhancer 不是函数就报错</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the enhancer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyMiddleware</span>(<span class=\"params\">...middlewares</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">createStore</span> =&gt;</span> (...args) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = createStore(...args)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dispatch = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Other middleware would not be applied to this dispatch.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> middlewareAPI = &#123;</span><br><span class=\"line\">      getState: store.getState,</span><br><span class=\"line\">      dispatch: <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> chain = middlewares.map(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class=\"line\">    dispatch = compose(...chain)(store.dispatch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// const middle1 = next =&gt; action =&gt; next(action)</span></span><br><span class=\"line\">    <span class=\"comment\">// const middle2 = next =&gt; action =&gt; next(action)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// dispatch = compose(middle1, middle2)(store.dispatch) = middle1(middle2(store.dispatch))</span></span><br><span class=\"line\">    <span class=\"comment\">// dispatch(actions) = middle1(middle2(store.dispatch))(actions)</span></span><br><span class=\"line\">    <span class=\"comment\">// middle2(store.dispatch) = action =&gt; store.dispath(action)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...store,</span><br><span class=\"line\">      dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上来返回一个接收 <code>createStore</code>做为参数的函数，调用这个<code>createStore</code> 去生成对应的 <code>store</code>，之前也提到了<code>applyMiddleware</code> 主要目的是为了增强 <code>dispatch</code>的功能，所以最后是用拓展运算符返回了原本store上的属性以及增强过的<code>dispatch</code>。</p>\n<h3 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(...args) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = createStore(...args)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dispatch = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Other middleware would not be applied to this dispatch.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> middlewareAPI = &#123;</span><br><span class=\"line\">      getState: store.getState,</span><br><span class=\"line\">      dispatch: <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> chain = middlewares.map(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class=\"line\">    dispatch = compose(...chain)(store.dispatch)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...store,</span><br><span class=\"line\">      dispatch</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>中间件的签名是这样的 <code>({dispatch, getStore}) =&gt; next =&gt; action =&gt; {// 一些第三方中间件的处理}</code>，这里对整个<code>middlewares</code> 数组进行了一次 <code>map</code> 给每一个中间件传入 <code>middlewareAPI</code> 进行一次调用，可以看做是进行了一次剥皮，这样chain里面存的就都是 <code>next =&gt; action =&gt; {// 一些第三方中间件的处理}</code> 这样签名的函数了。最关键的一步来了，<code>dispatch = compose(...chain)(store.dispatch)</code> 用 <code>compose</code> 把<code>chain</code> 内部的函数全部组合起来，接受最原始的 <code>store.dispatch</code>，生成一个增强后的 <code>dispatch</code> 。讲清楚这一行代码，就能搞明白 <code>redux</code> 的中间件干了什么事情。</p>\n<h3 id=\"特别的一行代码\"><a href=\"#特别的一行代码\" class=\"headerlink\" title=\"特别的一行代码\"></a>特别的一行代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch = compose(...chain)(store.dispatch)</span><br></pre></td></tr></table></figure>\n<p>我们先假设传给了 <code>applyMiddleware</code> 这样的参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> middleware1 = <span class=\"function\">(<span class=\"params\">&#123;dispatch, getStore&#125;</span>) =&gt;</span> next =&gt; <span class=\"function\"><span class=\"params\">action</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`middleware1 start`</span>)</span><br><span class=\"line\">    next(action)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`middleware1 end`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> middleware2 = <span class=\"function\">(<span class=\"params\">&#123;dispatch, getStore&#125;</span>) =&gt;</span> next =&gt; <span class=\"function\"><span class=\"params\">action</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`middleware2 start`</span>)</span><br><span class=\"line\">    next(action)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`middleware2 end`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> enhancer = applyMidleware([middleware1, middleware2])</span><br></pre></td></tr></table></figure>\n<p>到了上述这行代码的时候，<code>chain</code> 是这个样子了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> m1 = <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> action =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`middleware1 start`</span>)</span><br><span class=\"line\">        next(action)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`middleware1 end`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> m2 = <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> action =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`middleware2 start`</span>)</span><br><span class=\"line\">        next(action)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`middleware2 end`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">chain = [m1, m2]</span><br></pre></td></tr></table></figure>\n<p>结合之前提到的 <code>compose</code> 组合函数，所以这行代码变形成这样：<code>dispatch = m1(m2(store.dispatch))</code>。这个时候假设需要<code>dispatch</code> 一个 <code>anAction</code> ，就会变成这样 <code>m1(m2(store.dispatch))(anAction)</code>。对于m1而言，<code>m2(store.dispatch)</code> 就是他的 <code>next</code> 参数，当 <code>m1</code> 执行到 <code>next(action)</code>的时候，相当于这时候调用了<code>m2(store.dispatch)(action)</code>, 然后进入到<code>m2</code>中间件的逻辑，此时<code>m2</code>中间件接受的 <code>next</code> 正是原本的 <code>store.dispatch</code>，运行到<code>m2</code> 内部的 <code>next(action)</code> 的时候，这时候才去真正的用<code>store.dispatch</code> 去处理这个 <code>action</code>。</p>\n<p>这就有种俄罗斯套娃一样，一层一层地嵌套，<code>action</code> 经过多层的处理，最终到达最里层的才真正地被<code>dispatch</code> 。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"redux之applyMiddleware\"><a href=\"#redux之applyMiddleware\" class=\"headerlink\" title=\"redux之applyMiddleware\"></a>redux之applyMiddleware</h1><p><code>redux</code> 函数式写法相当多，所以在 <code>applyMiddleware</code> 处理多个中间执行顺序的写法也是比较绕和难懂的。<code>redux</code> 的中间件用切面的思想，让第三方的中间件切入到 <code>reducer</code> 处理 <code>action</code> 之前，做一些处理比如 <code>log</code> 之类的。<code>applyMiddleware</code> 则是把众多的中间件汇聚在一起，一层一层地去增强了原本生成的<code>store</code> 上的 <code>dispath</code> 的功能。</p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>先看下怎么使用这个 <code>api</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, applyMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> todos <span class=\"keyword\">from</span> <span class=\"string\">'./reducers'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\">&#123; getState &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">next</span>) =&gt;</span> (action) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'will dispatch'</span>, action)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用 middleware 链中下一个 middleware 的 dispatch。</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> returnValue = next(action)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'state after dispatch'</span>, getState())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一般会是 action 本身，除非</span></span><br><span class=\"line\">    <span class=\"comment\">// 后面的 middleware 修改了它。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> returnValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> store = createStore(</span><br><span class=\"line\">  todos,</span><br><span class=\"line\">  [ <span class=\"string\">'Use Redux'</span> ],</span><br><span class=\"line\">  applyMiddleware(logger)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'ADD_TODO'</span>,</span><br><span class=\"line\">  text: <span class=\"string\">'Understand the middleware'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// (将打印如下信息:)</span></span><br><span class=\"line\"><span class=\"comment\">// will dispatch: &#123; type: 'ADD_TODO', text: 'Understand the middleware' &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// state after dispatch: [ 'Use Redux', 'Understand the middleware' ]</span></span><br></pre></td></tr></table></figure>\n<p>官网的这个例子大概说明了 <code>applyMiddleware</code> 的用法了，这里用 <code>let store = createStore(todos, [ &#39;Use Redux&#39; ],applyMiddleware(logger))</code> 生成了一个新的store，同样的也可以用 <code>let newStore = applyMiddleware(mid1, mid2, mid3, ...)(createStore)(reducer, initialState);</code> 的方式生成 <code>store</code>。<code>applyMiddleware</code> 返回一个 <code>store</code> 的 <code>enhancer</code> 然后生成增强后的 <code>createStore</code> ，部分细节可以参照 <code>createStore</code> 中的一小段代码：</p>\n<p><code>./createStore.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// enhancer 不是函数就报错</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the enhancer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyMiddleware</span>(<span class=\"params\">...middlewares</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">createStore</span> =&gt;</span> (...args) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = createStore(...args)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dispatch = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Other middleware would not be applied to this dispatch.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> middlewareAPI = &#123;</span><br><span class=\"line\">      getState: store.getState,</span><br><span class=\"line\">      dispatch: <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> chain = middlewares.map(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class=\"line\">    dispatch = compose(...chain)(store.dispatch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// const middle1 = next =&gt; action =&gt; next(action)</span></span><br><span class=\"line\">    <span class=\"comment\">// const middle2 = next =&gt; action =&gt; next(action)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// dispatch = compose(middle1, middle2)(store.dispatch) = middle1(middle2(store.dispatch))</span></span><br><span class=\"line\">    <span class=\"comment\">// dispatch(actions) = middle1(middle2(store.dispatch))(actions)</span></span><br><span class=\"line\">    <span class=\"comment\">// middle2(store.dispatch) = action =&gt; store.dispath(action)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...store,</span><br><span class=\"line\">      dispatch</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上来返回一个接收 <code>createStore</code>做为参数的函数，调用这个<code>createStore</code> 去生成对应的 <code>store</code>，之前也提到了<code>applyMiddleware</code> 主要目的是为了增强 <code>dispatch</code>的功能，所以最后是用拓展运算符返回了原本store上的属性以及增强过的<code>dispatch</code>。</p>\n<h3 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(...args) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = createStore(...args)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dispatch = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class=\"line\">          <span class=\"string\">`Other middleware would not be applied to this dispatch.`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> middlewareAPI = &#123;</span><br><span class=\"line\">      getState: store.getState,</span><br><span class=\"line\">      dispatch: <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> chain = middlewares.map(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class=\"line\">    dispatch = compose(...chain)(store.dispatch)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...store,</span><br><span class=\"line\">      dispatch</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>中间件的签名是这样的 <code>({dispatch, getStore}) =&gt; next =&gt; action =&gt; {// 一些第三方中间件的处理}</code>，这里对整个<code>middlewares</code> 数组进行了一次 <code>map</code> 给每一个中间件传入 <code>middlewareAPI</code> 进行一次调用，可以看做是进行了一次剥皮，这样chain里面存的就都是 <code>next =&gt; action =&gt; {// 一些第三方中间件的处理}</code> 这样签名的函数了。最关键的一步来了，<code>dispatch = compose(...chain)(store.dispatch)</code> 用 <code>compose</code> 把<code>chain</code> 内部的函数全部组合起来，接受最原始的 <code>store.dispatch</code>，生成一个增强后的 <code>dispatch</code> 。讲清楚这一行代码，就能搞明白 <code>redux</code> 的中间件干了什么事情。</p>\n<h3 id=\"特别的一行代码\"><a href=\"#特别的一行代码\" class=\"headerlink\" title=\"特别的一行代码\"></a>特别的一行代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch = compose(...chain)(store.dispatch)</span><br></pre></td></tr></table></figure>\n<p>我们先假设传给了 <code>applyMiddleware</code> 这样的参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> middleware1 = <span class=\"function\">(<span class=\"params\">&#123;dispatch, getStore&#125;</span>) =&gt;</span> next =&gt; <span class=\"function\"><span class=\"params\">action</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`middleware1 start`</span>)</span><br><span class=\"line\">    next(action)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`middleware1 end`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> middleware2 = <span class=\"function\">(<span class=\"params\">&#123;dispatch, getStore&#125;</span>) =&gt;</span> next =&gt; <span class=\"function\"><span class=\"params\">action</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`middleware2 start`</span>)</span><br><span class=\"line\">    next(action)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`middleware2 end`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> enhancer = applyMidleware([middleware1, middleware2])</span><br></pre></td></tr></table></figure>\n<p>到了上述这行代码的时候，<code>chain</code> 是这个样子了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> m1 = <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> action =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`middleware1 start`</span>)</span><br><span class=\"line\">        next(action)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`middleware1 end`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> m2 = <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> action =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`middleware2 start`</span>)</span><br><span class=\"line\">        next(action)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`middleware2 end`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">chain = [m1, m2]</span><br></pre></td></tr></table></figure>\n<p>结合之前提到的 <code>compose</code> 组合函数，所以这行代码变形成这样：<code>dispatch = m1(m2(store.dispatch))</code>。这个时候假设需要<code>dispatch</code> 一个 <code>anAction</code> ，就会变成这样 <code>m1(m2(store.dispatch))(anAction)</code>。对于m1而言，<code>m2(store.dispatch)</code> 就是他的 <code>next</code> 参数，当 <code>m1</code> 执行到 <code>next(action)</code>的时候，相当于这时候调用了<code>m2(store.dispatch)(action)</code>, 然后进入到<code>m2</code>中间件的逻辑，此时<code>m2</code>中间件接受的 <code>next</code> 正是原本的 <code>store.dispatch</code>，运行到<code>m2</code> 内部的 <code>next(action)</code> 的时候，这时候才去真正的用<code>store.dispatch</code> 去处理这个 <code>action</code>。</p>\n<p>这就有种俄罗斯套娃一样，一层一层地嵌套，<code>action</code> 经过多层的处理，最终到达最里层的才真正地被<code>dispatch</code> 。</p>\n"},{"title":"react-motion翻译及学习","date":"2018-08-14T06:58:28.000Z","_content":"\n# react-motion文档及学习\n\n之前没怎么重视过动画，所以做出来的东西体验不是特别好，所以回过来学一些动画库，然后发现 `react-motion` 这个库的例子真棒，就学一下这个库的 `API` ，在 `github` 上也只有[英文版文档](https://github.com/chenglou/react-motion)，好在文档内容不算长，所以准备大致翻译一下。\n\n## 这个库解决了什么问题？\n\n在95%的动画组件的应用场景下，我们不必采用硬编码的缓动曲线和持续时间。给你的 `UI` 组件设置一个刚度值和阻尼值，然后让物理魔法来处理剩下的事情。这样就不必担心出现动画中断之类的小问题。这也大大地简化了 `API`。\n\n这个库同时还为 `React` 的 `TransitionGroup` 提供了一个更强大的替代 `API` 。\n\n## API\n\nExports:\n\n* spring\n* Motion\n* StaggeredMotion\n* TransitionMotion\n* presets\n\n## 辅助函数\n\n> -spring: (val: number, config?: SpringHelperConfig) => OpaqueConfig\n\n与相关的组件一起用，明确如何动画到目标值，比如 `spring(10, {stiffness: 120, damping: 17})`意味着以 **120** 的 *刚度* 和 **17** 的 *阻尼*运动到*目标值* 10。\n\n* `val` ：目标值\n* `config` : 可选，作进一步调整。可能的属性值：\n  * `stiffness` : 刚度，可选，默认 `170`\n  * `damping` : 阻尼，可选， 默认 `26`\n  * `precision` : 可选，默认 `0.01`， 指定内插值的舍入和速度，内部值，一般外部不用去改变改值。\n\n> Presets for {stiffness, damping}\n\n大部分是像 `spring(10, presets.wobbly)` 、 `spring(20, {...presets.gentle})` 这样子使用 spring 的预设配置。\n\n## `<Motion/>`\n\n一般的动画组件\n\n### `<Motion/>` 用法\n\n```js\n/**\n * interpolation -> 插值\n * Motion组件的写法比较特殊，传了一个函数当作 Motion 的 chlidren属性\n*/\n<Motion defaultStyle={{x: 0}} style={{x: spring(10)}}>\n    {interpolatingStyle => <div style={interpolatingStyle} />}\n</Motion>\n```\n\n### `<Motion/>` 属性(props)\n\n-style: Style\n\n必须。 `Style` 是一个对象类型映射到上面的 `spring` 返回的数字或者是 `OpaqueConfig` 对象。在组件整个存活期间必须保持相同的值。值的意义：\n\n* `spring` 返回的 `OpaqueConfig` : 插值到 `x`\n* `spring` 返回的数字 `x`: 跳到 `x`， 不插入\n\n-defaultStyle?: PlainStyle\n\n可选。`PlainStyle` 类型映射到数字，和上面的 `style` 相同键的对象，值是初始化要插入的数据。注意，在后续的渲染过程中这个属性会被忽略。从当前值插入的目标值是由 `style` 决定。\n\n-children: (interpolatedStyle: PlainStyle) => ReactElement\n\n必须，且是函数。\n\n* `interpolatedStyle`: 返回给你被插入值的 `style` 对象。举个例子： 如果你写了 `style={...xxx}`, 然后就会在函数里接收到 `interpolatedStyle` 对象，在某一时间，可能拿到这样的数据 `{x:5.2, y: 12.1}`,就可以把这些数据用到你的 `div` 上或者其他地方。\n* `Return` 一定要返回一个 `React element`，这样 `Motion` 才能渲染你的组件。\n\n-onRest?: () => void\n\n可选。动画休息的时候触发的回调函数。\n\n## `<StaggeredMotion/>`\n\n交错的动画组件。\n\n创建一个彼此之间依赖的集合（固定长度）的动画，达到*自然*、*弹性*、*惊人*的效果。这比对一系列运动硬编码延迟的方式（不太自然的动画效果）更加有效。\n\n### `<StaggeredMotion/>` 用法\n\n```js\n<StaggeredMotion\n  defaultStyles={[{h: 0}, {h: 0}, {h: 0}]}\n  styles={prevInterpolatedStyles => prevInterpolatedStyles.map((_, i) => {\n    return i === 0\n      ? {h: spring(100)}\n      : {h: spring(prevInterpolatedStyles[i - 1].h)}\n  })}>\n  {interpolatingStyles =>\n    <div>\n      {interpolatingStyles.map((style, i) =>\n        <div key={i} style={{border: '1px solid', height: style.h}} />)\n      }\n    </div>\n  }\n</StaggeredMotion>\n```\n\n### `<StaggeredMotion/>` 属性(props)\n\n`-styles:(previousInterpolatedStyles: ?Array<PlainStyle>) => Array<style>`\n\n必须,函数。**不要忘记`\"s\"`**\n\n* `previousInterpolatedStyles` 前一个插入值的 `styles` ,(第一次渲染的时候是 `undefined` ,除非提供了 `defaultStyles`)\n\n* Return 一定要返回包含*目的值*的 `styles` 数组,举个例子:[{x: spring(10), x: spring(20)}]\n\n-defaultStyles?: Array<PlainStyle>\n\n可选。和 `Motion` 的 `defaultStyle` 类似，但是是一个数组。\n\n-children: (interpolatedStyles: Array<PlainStyle>) => ReactElement\n\n必须，函数。和 `Motion` 的 `children` 类似, 但是接受一个插入值的数组作为函数的参数。举个例子：`[{x: 5}, {x: 6.4}, {x: 8.1}]`。\n\n(没有 `noRest`, 我们没有发现有什么意义在 `StaggeredMotion` 中加入 `noReset`)\n\n## `<TransitionMotion>`\n\n帮助你创建 `mounting` 和 `unmounting` 时的动画。\n\n### `<TransitionMotion>` 用法\n\n有 `a`、`b`、`c` 三个项目，有各自的 `style` 配置，\n\n---\n\n![Edvard Munch – The Scream](react-motion翻译及学习/944233120.jpg)\n\n> Edvard Munch – The Scream. ver. 1893","source":"_posts/react-motion翻译及学习.md","raw":"---\ntitle: react-motion翻译及学习\ndate: 2018-08-14 14:58:28\ntags:\n  - react\n  - react-motion\n  - 翻译\ncategories: 前端\n---\n\n# react-motion文档及学习\n\n之前没怎么重视过动画，所以做出来的东西体验不是特别好，所以回过来学一些动画库，然后发现 `react-motion` 这个库的例子真棒，就学一下这个库的 `API` ，在 `github` 上也只有[英文版文档](https://github.com/chenglou/react-motion)，好在文档内容不算长，所以准备大致翻译一下。\n\n## 这个库解决了什么问题？\n\n在95%的动画组件的应用场景下，我们不必采用硬编码的缓动曲线和持续时间。给你的 `UI` 组件设置一个刚度值和阻尼值，然后让物理魔法来处理剩下的事情。这样就不必担心出现动画中断之类的小问题。这也大大地简化了 `API`。\n\n这个库同时还为 `React` 的 `TransitionGroup` 提供了一个更强大的替代 `API` 。\n\n## API\n\nExports:\n\n* spring\n* Motion\n* StaggeredMotion\n* TransitionMotion\n* presets\n\n## 辅助函数\n\n> -spring: (val: number, config?: SpringHelperConfig) => OpaqueConfig\n\n与相关的组件一起用，明确如何动画到目标值，比如 `spring(10, {stiffness: 120, damping: 17})`意味着以 **120** 的 *刚度* 和 **17** 的 *阻尼*运动到*目标值* 10。\n\n* `val` ：目标值\n* `config` : 可选，作进一步调整。可能的属性值：\n  * `stiffness` : 刚度，可选，默认 `170`\n  * `damping` : 阻尼，可选， 默认 `26`\n  * `precision` : 可选，默认 `0.01`， 指定内插值的舍入和速度，内部值，一般外部不用去改变改值。\n\n> Presets for {stiffness, damping}\n\n大部分是像 `spring(10, presets.wobbly)` 、 `spring(20, {...presets.gentle})` 这样子使用 spring 的预设配置。\n\n## `<Motion/>`\n\n一般的动画组件\n\n### `<Motion/>` 用法\n\n```js\n/**\n * interpolation -> 插值\n * Motion组件的写法比较特殊，传了一个函数当作 Motion 的 chlidren属性\n*/\n<Motion defaultStyle={{x: 0}} style={{x: spring(10)}}>\n    {interpolatingStyle => <div style={interpolatingStyle} />}\n</Motion>\n```\n\n### `<Motion/>` 属性(props)\n\n-style: Style\n\n必须。 `Style` 是一个对象类型映射到上面的 `spring` 返回的数字或者是 `OpaqueConfig` 对象。在组件整个存活期间必须保持相同的值。值的意义：\n\n* `spring` 返回的 `OpaqueConfig` : 插值到 `x`\n* `spring` 返回的数字 `x`: 跳到 `x`， 不插入\n\n-defaultStyle?: PlainStyle\n\n可选。`PlainStyle` 类型映射到数字，和上面的 `style` 相同键的对象，值是初始化要插入的数据。注意，在后续的渲染过程中这个属性会被忽略。从当前值插入的目标值是由 `style` 决定。\n\n-children: (interpolatedStyle: PlainStyle) => ReactElement\n\n必须，且是函数。\n\n* `interpolatedStyle`: 返回给你被插入值的 `style` 对象。举个例子： 如果你写了 `style={...xxx}`, 然后就会在函数里接收到 `interpolatedStyle` 对象，在某一时间，可能拿到这样的数据 `{x:5.2, y: 12.1}`,就可以把这些数据用到你的 `div` 上或者其他地方。\n* `Return` 一定要返回一个 `React element`，这样 `Motion` 才能渲染你的组件。\n\n-onRest?: () => void\n\n可选。动画休息的时候触发的回调函数。\n\n## `<StaggeredMotion/>`\n\n交错的动画组件。\n\n创建一个彼此之间依赖的集合（固定长度）的动画，达到*自然*、*弹性*、*惊人*的效果。这比对一系列运动硬编码延迟的方式（不太自然的动画效果）更加有效。\n\n### `<StaggeredMotion/>` 用法\n\n```js\n<StaggeredMotion\n  defaultStyles={[{h: 0}, {h: 0}, {h: 0}]}\n  styles={prevInterpolatedStyles => prevInterpolatedStyles.map((_, i) => {\n    return i === 0\n      ? {h: spring(100)}\n      : {h: spring(prevInterpolatedStyles[i - 1].h)}\n  })}>\n  {interpolatingStyles =>\n    <div>\n      {interpolatingStyles.map((style, i) =>\n        <div key={i} style={{border: '1px solid', height: style.h}} />)\n      }\n    </div>\n  }\n</StaggeredMotion>\n```\n\n### `<StaggeredMotion/>` 属性(props)\n\n`-styles:(previousInterpolatedStyles: ?Array<PlainStyle>) => Array<style>`\n\n必须,函数。**不要忘记`\"s\"`**\n\n* `previousInterpolatedStyles` 前一个插入值的 `styles` ,(第一次渲染的时候是 `undefined` ,除非提供了 `defaultStyles`)\n\n* Return 一定要返回包含*目的值*的 `styles` 数组,举个例子:[{x: spring(10), x: spring(20)}]\n\n-defaultStyles?: Array<PlainStyle>\n\n可选。和 `Motion` 的 `defaultStyle` 类似，但是是一个数组。\n\n-children: (interpolatedStyles: Array<PlainStyle>) => ReactElement\n\n必须，函数。和 `Motion` 的 `children` 类似, 但是接受一个插入值的数组作为函数的参数。举个例子：`[{x: 5}, {x: 6.4}, {x: 8.1}]`。\n\n(没有 `noRest`, 我们没有发现有什么意义在 `StaggeredMotion` 中加入 `noReset`)\n\n## `<TransitionMotion>`\n\n帮助你创建 `mounting` 和 `unmounting` 时的动画。\n\n### `<TransitionMotion>` 用法\n\n有 `a`、`b`、`c` 三个项目，有各自的 `style` 配置，\n\n---\n\n![Edvard Munch – The Scream](react-motion翻译及学习/944233120.jpg)\n\n> Edvard Munch – The Scream. ver. 1893","slug":"react-motion翻译及学习","published":1,"updated":"2018-08-26T03:52:41.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbfk0009ssv69ps8yr43","content":"<h1 id=\"react-motion文档及学习\"><a href=\"#react-motion文档及学习\" class=\"headerlink\" title=\"react-motion文档及学习\"></a>react-motion文档及学习</h1><p>之前没怎么重视过动画，所以做出来的东西体验不是特别好，所以回过来学一些动画库，然后发现 <code>react-motion</code> 这个库的例子真棒，就学一下这个库的 <code>API</code> ，在 <code>github</code> 上也只有<a href=\"https://github.com/chenglou/react-motion\" target=\"_blank\" rel=\"noopener\">英文版文档</a>，好在文档内容不算长，所以准备大致翻译一下。</p>\n<h2 id=\"这个库解决了什么问题？\"><a href=\"#这个库解决了什么问题？\" class=\"headerlink\" title=\"这个库解决了什么问题？\"></a>这个库解决了什么问题？</h2><p>在95%的动画组件的应用场景下，我们不必采用硬编码的缓动曲线和持续时间。给你的 <code>UI</code> 组件设置一个刚度值和阻尼值，然后让物理魔法来处理剩下的事情。这样就不必担心出现动画中断之类的小问题。这也大大地简化了 <code>API</code>。</p>\n<p>这个库同时还为 <code>React</code> 的 <code>TransitionGroup</code> 提供了一个更强大的替代 <code>API</code> 。</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>Exports:</p>\n<ul>\n<li>spring</li>\n<li>Motion</li>\n<li>StaggeredMotion</li>\n<li>TransitionMotion</li>\n<li>presets</li>\n</ul>\n<h2 id=\"辅助函数\"><a href=\"#辅助函数\" class=\"headerlink\" title=\"辅助函数\"></a>辅助函数</h2><blockquote>\n<p>-spring: (val: number, config?: SpringHelperConfig) =&gt; OpaqueConfig</p>\n</blockquote>\n<p>与相关的组件一起用，明确如何动画到目标值，比如 <code>spring(10, {stiffness: 120, damping: 17})</code>意味着以 <strong>120</strong> 的 <em>刚度</em> 和 <strong>17</strong> 的 <em>阻尼</em>运动到<em>目标值</em> 10。</p>\n<ul>\n<li><code>val</code> ：目标值</li>\n<li><code>config</code> : 可选，作进一步调整。可能的属性值：<ul>\n<li><code>stiffness</code> : 刚度，可选，默认 <code>170</code></li>\n<li><code>damping</code> : 阻尼，可选， 默认 <code>26</code></li>\n<li><code>precision</code> : 可选，默认 <code>0.01</code>， 指定内插值的舍入和速度，内部值，一般外部不用去改变改值。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Presets for {stiffness, damping}</p>\n</blockquote>\n<p>大部分是像 <code>spring(10, presets.wobbly)</code> 、 <code>spring(20, {...presets.gentle})</code> 这样子使用 spring 的预设配置。</p>\n<h2 id=\"lt-Motion-gt\"><a href=\"#lt-Motion-gt\" class=\"headerlink\" title=\"&lt;Motion/&gt;\"></a><code>&lt;Motion/&gt;</code></h2><p>一般的动画组件</p>\n<h3 id=\"lt-Motion-gt-用法\"><a href=\"#lt-Motion-gt-用法\" class=\"headerlink\" title=\"&lt;Motion/&gt; 用法\"></a><code>&lt;Motion/&gt;</code> 用法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * interpolation -&gt; 插值</span></span><br><span class=\"line\"><span class=\"comment\"> * Motion组件的写法比较特殊，传了一个函数当作 Motion 的 chlidren属性</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">&lt;Motion defaultStyle=&#123;&#123;<span class=\"attr\">x</span>: <span class=\"number\">0</span>&#125;&#125; style=&#123;&#123;<span class=\"attr\">x</span>: spring(<span class=\"number\">10</span>)&#125;&#125;&gt;</span><br><span class=\"line\">    &#123;interpolatingStyle =&gt; &lt;div style=&#123;interpolatingStyle&#125; /&gt;&#125;</span><br><span class=\"line\">&lt;/Motion&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lt-Motion-gt-属性-props\"><a href=\"#lt-Motion-gt-属性-props\" class=\"headerlink\" title=\"&lt;Motion/&gt; 属性(props)\"></a><code>&lt;Motion/&gt;</code> 属性(props)</h3><p>-style: Style</p>\n<p>必须。 <code>Style</code> 是一个对象类型映射到上面的 <code>spring</code> 返回的数字或者是 <code>OpaqueConfig</code> 对象。在组件整个存活期间必须保持相同的值。值的意义：</p>\n<ul>\n<li><code>spring</code> 返回的 <code>OpaqueConfig</code> : 插值到 <code>x</code></li>\n<li><code>spring</code> 返回的数字 <code>x</code>: 跳到 <code>x</code>， 不插入</li>\n</ul>\n<p>-defaultStyle?: PlainStyle</p>\n<p>可选。<code>PlainStyle</code> 类型映射到数字，和上面的 <code>style</code> 相同键的对象，值是初始化要插入的数据。注意，在后续的渲染过程中这个属性会被忽略。从当前值插入的目标值是由 <code>style</code> 决定。</p>\n<p>-children: (interpolatedStyle: PlainStyle) =&gt; ReactElement</p>\n<p>必须，且是函数。</p>\n<ul>\n<li><code>interpolatedStyle</code>: 返回给你被插入值的 <code>style</code> 对象。举个例子： 如果你写了 <code>style={...xxx}</code>, 然后就会在函数里接收到 <code>interpolatedStyle</code> 对象，在某一时间，可能拿到这样的数据 <code>{x:5.2, y: 12.1}</code>,就可以把这些数据用到你的 <code>div</code> 上或者其他地方。</li>\n<li><code>Return</code> 一定要返回一个 <code>React element</code>，这样 <code>Motion</code> 才能渲染你的组件。</li>\n</ul>\n<p>-onRest?: () =&gt; void</p>\n<p>可选。动画休息的时候触发的回调函数。</p>\n<h2 id=\"lt-StaggeredMotion-gt\"><a href=\"#lt-StaggeredMotion-gt\" class=\"headerlink\" title=\"&lt;StaggeredMotion/&gt;\"></a><code>&lt;StaggeredMotion/&gt;</code></h2><p>交错的动画组件。</p>\n<p>创建一个彼此之间依赖的集合（固定长度）的动画，达到<em>自然</em>、<em>弹性</em>、<em>惊人</em>的效果。这比对一系列运动硬编码延迟的方式（不太自然的动画效果）更加有效。</p>\n<h3 id=\"lt-StaggeredMotion-gt-用法\"><a href=\"#lt-StaggeredMotion-gt-用法\" class=\"headerlink\" title=\"&lt;StaggeredMotion/&gt; 用法\"></a><code>&lt;StaggeredMotion/&gt;</code> 用法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;StaggeredMotion</span><br><span class=\"line\">  defaultStyles=&#123;[&#123;<span class=\"attr\">h</span>: <span class=\"number\">0</span>&#125;, &#123;<span class=\"attr\">h</span>: <span class=\"number\">0</span>&#125;, &#123;<span class=\"attr\">h</span>: <span class=\"number\">0</span>&#125;]&#125;</span><br><span class=\"line\">  styles=&#123;prevInterpolatedStyles =&gt; prevInterpolatedStyles.map(<span class=\"function\">(<span class=\"params\">_, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i === <span class=\"number\">0</span></span><br><span class=\"line\">      ? &#123;<span class=\"attr\">h</span>: spring(<span class=\"number\">100</span>)&#125;</span><br><span class=\"line\">      : &#123;<span class=\"attr\">h</span>: spring(prevInterpolatedStyles[i - <span class=\"number\">1</span>].h)&#125;</span><br><span class=\"line\">  &#125;)&#125;&gt;</span><br><span class=\"line\">  &#123;interpolatingStyles =&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123;interpolatingStyles.map(<span class=\"function\">(<span class=\"params\">style, i</span>) =&gt;</span></span><br><span class=\"line\">        &lt;div key=&#123;i&#125; style=&#123;&#123;<span class=\"attr\">border</span>: <span class=\"string\">'1px solid'</span>, <span class=\"attr\">height</span>: style.h&#125;&#125; /&gt;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>StaggeredMotion&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lt-StaggeredMotion-gt-属性-props\"><a href=\"#lt-StaggeredMotion-gt-属性-props\" class=\"headerlink\" title=\"&lt;StaggeredMotion/&gt; 属性(props)\"></a><code>&lt;StaggeredMotion/&gt;</code> 属性(props)</h3><p><code>-styles:(previousInterpolatedStyles: ?Array&lt;PlainStyle&gt;) =&gt; Array&lt;style&gt;</code></p>\n<p>必须,函数。<strong>不要忘记<code>&quot;s&quot;</code></strong></p>\n<ul>\n<li><p><code>previousInterpolatedStyles</code> 前一个插入值的 <code>styles</code> ,(第一次渲染的时候是 <code>undefined</code> ,除非提供了 <code>defaultStyles</code>)</p>\n</li>\n<li><p>Return 一定要返回包含<em>目的值</em>的 <code>styles</code> 数组,举个例子:[{x: spring(10), x: spring(20)}]</p>\n</li>\n</ul>\n<p>-defaultStyles?: Array<plainstyle></plainstyle></p>\n<p>可选。和 <code>Motion</code> 的 <code>defaultStyle</code> 类似，但是是一个数组。</p>\n<p>-children: (interpolatedStyles: Array<plainstyle>) =&gt; ReactElement</plainstyle></p>\n<p>必须，函数。和 <code>Motion</code> 的 <code>children</code> 类似, 但是接受一个插入值的数组作为函数的参数。举个例子：<code>[{x: 5}, {x: 6.4}, {x: 8.1}]</code>。</p>\n<p>(没有 <code>noRest</code>, 我们没有发现有什么意义在 <code>StaggeredMotion</code> 中加入 <code>noReset</code>)</p>\n<h2 id=\"lt-TransitionMotion-gt\"><a href=\"#lt-TransitionMotion-gt\" class=\"headerlink\" title=\"&lt;TransitionMotion&gt;\"></a><code>&lt;TransitionMotion&gt;</code></h2><p>帮助你创建 <code>mounting</code> 和 <code>unmounting</code> 时的动画。</p>\n<h3 id=\"lt-TransitionMotion-gt-用法\"><a href=\"#lt-TransitionMotion-gt-用法\" class=\"headerlink\" title=\"&lt;TransitionMotion&gt; 用法\"></a><code>&lt;TransitionMotion&gt;</code> 用法</h3><p>有 <code>a</code>、<code>b</code>、<code>c</code> 三个项目，有各自的 <code>style</code> 配置，</p>\n<hr>\n<p><img src=\"/2018/08/14/react-motion翻译及学习/944233120.jpg\" alt=\"Edvard Munch – The Scream\"></p>\n<blockquote>\n<p>Edvard Munch – The Scream. ver. 1893</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"react-motion文档及学习\"><a href=\"#react-motion文档及学习\" class=\"headerlink\" title=\"react-motion文档及学习\"></a>react-motion文档及学习</h1><p>之前没怎么重视过动画，所以做出来的东西体验不是特别好，所以回过来学一些动画库，然后发现 <code>react-motion</code> 这个库的例子真棒，就学一下这个库的 <code>API</code> ，在 <code>github</code> 上也只有<a href=\"https://github.com/chenglou/react-motion\" target=\"_blank\" rel=\"noopener\">英文版文档</a>，好在文档内容不算长，所以准备大致翻译一下。</p>\n<h2 id=\"这个库解决了什么问题？\"><a href=\"#这个库解决了什么问题？\" class=\"headerlink\" title=\"这个库解决了什么问题？\"></a>这个库解决了什么问题？</h2><p>在95%的动画组件的应用场景下，我们不必采用硬编码的缓动曲线和持续时间。给你的 <code>UI</code> 组件设置一个刚度值和阻尼值，然后让物理魔法来处理剩下的事情。这样就不必担心出现动画中断之类的小问题。这也大大地简化了 <code>API</code>。</p>\n<p>这个库同时还为 <code>React</code> 的 <code>TransitionGroup</code> 提供了一个更强大的替代 <code>API</code> 。</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>Exports:</p>\n<ul>\n<li>spring</li>\n<li>Motion</li>\n<li>StaggeredMotion</li>\n<li>TransitionMotion</li>\n<li>presets</li>\n</ul>\n<h2 id=\"辅助函数\"><a href=\"#辅助函数\" class=\"headerlink\" title=\"辅助函数\"></a>辅助函数</h2><blockquote>\n<p>-spring: (val: number, config?: SpringHelperConfig) =&gt; OpaqueConfig</p>\n</blockquote>\n<p>与相关的组件一起用，明确如何动画到目标值，比如 <code>spring(10, {stiffness: 120, damping: 17})</code>意味着以 <strong>120</strong> 的 <em>刚度</em> 和 <strong>17</strong> 的 <em>阻尼</em>运动到<em>目标值</em> 10。</p>\n<ul>\n<li><code>val</code> ：目标值</li>\n<li><code>config</code> : 可选，作进一步调整。可能的属性值：<ul>\n<li><code>stiffness</code> : 刚度，可选，默认 <code>170</code></li>\n<li><code>damping</code> : 阻尼，可选， 默认 <code>26</code></li>\n<li><code>precision</code> : 可选，默认 <code>0.01</code>， 指定内插值的舍入和速度，内部值，一般外部不用去改变改值。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Presets for {stiffness, damping}</p>\n</blockquote>\n<p>大部分是像 <code>spring(10, presets.wobbly)</code> 、 <code>spring(20, {...presets.gentle})</code> 这样子使用 spring 的预设配置。</p>\n<h2 id=\"lt-Motion-gt\"><a href=\"#lt-Motion-gt\" class=\"headerlink\" title=\"&lt;Motion/&gt;\"></a><code>&lt;Motion/&gt;</code></h2><p>一般的动画组件</p>\n<h3 id=\"lt-Motion-gt-用法\"><a href=\"#lt-Motion-gt-用法\" class=\"headerlink\" title=\"&lt;Motion/&gt; 用法\"></a><code>&lt;Motion/&gt;</code> 用法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * interpolation -&gt; 插值</span></span><br><span class=\"line\"><span class=\"comment\"> * Motion组件的写法比较特殊，传了一个函数当作 Motion 的 chlidren属性</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">&lt;Motion defaultStyle=&#123;&#123;<span class=\"attr\">x</span>: <span class=\"number\">0</span>&#125;&#125; style=&#123;&#123;<span class=\"attr\">x</span>: spring(<span class=\"number\">10</span>)&#125;&#125;&gt;</span><br><span class=\"line\">    &#123;interpolatingStyle =&gt; &lt;div style=&#123;interpolatingStyle&#125; /&gt;&#125;</span><br><span class=\"line\">&lt;/Motion&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lt-Motion-gt-属性-props\"><a href=\"#lt-Motion-gt-属性-props\" class=\"headerlink\" title=\"&lt;Motion/&gt; 属性(props)\"></a><code>&lt;Motion/&gt;</code> 属性(props)</h3><p>-style: Style</p>\n<p>必须。 <code>Style</code> 是一个对象类型映射到上面的 <code>spring</code> 返回的数字或者是 <code>OpaqueConfig</code> 对象。在组件整个存活期间必须保持相同的值。值的意义：</p>\n<ul>\n<li><code>spring</code> 返回的 <code>OpaqueConfig</code> : 插值到 <code>x</code></li>\n<li><code>spring</code> 返回的数字 <code>x</code>: 跳到 <code>x</code>， 不插入</li>\n</ul>\n<p>-defaultStyle?: PlainStyle</p>\n<p>可选。<code>PlainStyle</code> 类型映射到数字，和上面的 <code>style</code> 相同键的对象，值是初始化要插入的数据。注意，在后续的渲染过程中这个属性会被忽略。从当前值插入的目标值是由 <code>style</code> 决定。</p>\n<p>-children: (interpolatedStyle: PlainStyle) =&gt; ReactElement</p>\n<p>必须，且是函数。</p>\n<ul>\n<li><code>interpolatedStyle</code>: 返回给你被插入值的 <code>style</code> 对象。举个例子： 如果你写了 <code>style={...xxx}</code>, 然后就会在函数里接收到 <code>interpolatedStyle</code> 对象，在某一时间，可能拿到这样的数据 <code>{x:5.2, y: 12.1}</code>,就可以把这些数据用到你的 <code>div</code> 上或者其他地方。</li>\n<li><code>Return</code> 一定要返回一个 <code>React element</code>，这样 <code>Motion</code> 才能渲染你的组件。</li>\n</ul>\n<p>-onRest?: () =&gt; void</p>\n<p>可选。动画休息的时候触发的回调函数。</p>\n<h2 id=\"lt-StaggeredMotion-gt\"><a href=\"#lt-StaggeredMotion-gt\" class=\"headerlink\" title=\"&lt;StaggeredMotion/&gt;\"></a><code>&lt;StaggeredMotion/&gt;</code></h2><p>交错的动画组件。</p>\n<p>创建一个彼此之间依赖的集合（固定长度）的动画，达到<em>自然</em>、<em>弹性</em>、<em>惊人</em>的效果。这比对一系列运动硬编码延迟的方式（不太自然的动画效果）更加有效。</p>\n<h3 id=\"lt-StaggeredMotion-gt-用法\"><a href=\"#lt-StaggeredMotion-gt-用法\" class=\"headerlink\" title=\"&lt;StaggeredMotion/&gt; 用法\"></a><code>&lt;StaggeredMotion/&gt;</code> 用法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;StaggeredMotion</span><br><span class=\"line\">  defaultStyles=&#123;[&#123;<span class=\"attr\">h</span>: <span class=\"number\">0</span>&#125;, &#123;<span class=\"attr\">h</span>: <span class=\"number\">0</span>&#125;, &#123;<span class=\"attr\">h</span>: <span class=\"number\">0</span>&#125;]&#125;</span><br><span class=\"line\">  styles=&#123;prevInterpolatedStyles =&gt; prevInterpolatedStyles.map(<span class=\"function\">(<span class=\"params\">_, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i === <span class=\"number\">0</span></span><br><span class=\"line\">      ? &#123;<span class=\"attr\">h</span>: spring(<span class=\"number\">100</span>)&#125;</span><br><span class=\"line\">      : &#123;<span class=\"attr\">h</span>: spring(prevInterpolatedStyles[i - <span class=\"number\">1</span>].h)&#125;</span><br><span class=\"line\">  &#125;)&#125;&gt;</span><br><span class=\"line\">  &#123;interpolatingStyles =&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123;interpolatingStyles.map(<span class=\"function\">(<span class=\"params\">style, i</span>) =&gt;</span></span><br><span class=\"line\">        &lt;div key=&#123;i&#125; style=&#123;&#123;<span class=\"attr\">border</span>: <span class=\"string\">'1px solid'</span>, <span class=\"attr\">height</span>: style.h&#125;&#125; /&gt;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>StaggeredMotion&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lt-StaggeredMotion-gt-属性-props\"><a href=\"#lt-StaggeredMotion-gt-属性-props\" class=\"headerlink\" title=\"&lt;StaggeredMotion/&gt; 属性(props)\"></a><code>&lt;StaggeredMotion/&gt;</code> 属性(props)</h3><p><code>-styles:(previousInterpolatedStyles: ?Array&lt;PlainStyle&gt;) =&gt; Array&lt;style&gt;</code></p>\n<p>必须,函数。<strong>不要忘记<code>&quot;s&quot;</code></strong></p>\n<ul>\n<li><p><code>previousInterpolatedStyles</code> 前一个插入值的 <code>styles</code> ,(第一次渲染的时候是 <code>undefined</code> ,除非提供了 <code>defaultStyles</code>)</p>\n</li>\n<li><p>Return 一定要返回包含<em>目的值</em>的 <code>styles</code> 数组,举个例子:[{x: spring(10), x: spring(20)}]</p>\n</li>\n</ul>\n<p>-defaultStyles?: Array<plainstyle></plainstyle></p>\n<p>可选。和 <code>Motion</code> 的 <code>defaultStyle</code> 类似，但是是一个数组。</p>\n<p>-children: (interpolatedStyles: Array<plainstyle>) =&gt; ReactElement</plainstyle></p>\n<p>必须，函数。和 <code>Motion</code> 的 <code>children</code> 类似, 但是接受一个插入值的数组作为函数的参数。举个例子：<code>[{x: 5}, {x: 6.4}, {x: 8.1}]</code>。</p>\n<p>(没有 <code>noRest</code>, 我们没有发现有什么意义在 <code>StaggeredMotion</code> 中加入 <code>noReset</code>)</p>\n<h2 id=\"lt-TransitionMotion-gt\"><a href=\"#lt-TransitionMotion-gt\" class=\"headerlink\" title=\"&lt;TransitionMotion&gt;\"></a><code>&lt;TransitionMotion&gt;</code></h2><p>帮助你创建 <code>mounting</code> 和 <code>unmounting</code> 时的动画。</p>\n<h3 id=\"lt-TransitionMotion-gt-用法\"><a href=\"#lt-TransitionMotion-gt-用法\" class=\"headerlink\" title=\"&lt;TransitionMotion&gt; 用法\"></a><code>&lt;TransitionMotion&gt;</code> 用法</h3><p>有 <code>a</code>、<code>b</code>、<code>c</code> 三个项目，有各自的 <code>style</code> 配置，</p>\n<hr>\n<p><img src=\"/2018/08/14/react-motion翻译及学习/944233120.jpg\" alt=\"Edvard Munch – The Scream\"></p>\n<blockquote>\n<p>Edvard Munch – The Scream. ver. 1893</p>\n</blockquote>\n"},{"title":"redux之compose","date":"2018-08-03T04:59:26.000Z","_content":"\n# redux之compose\n\n`redux` 是状态管理库，与其他框架如 `react` 是没有直接关系，所以 `redux` 可以脱离 `react` 在别的环境下使用。由于没有和`react` 相关逻辑耦合，所以 `redux` 的源码很纯粹，目的就是把如何数据管理好。而真正在 `react` 项目中使用 `redux` 时，是需要有一个 `react-redux` 当作连接器，去连接 `react` 和 `redux` 。\n\n没看 `redux` 源码之前，我觉得看 `redux` 应该是件很困难的事情，因为当初在学 `redux` 如何使用的时候就已经被 `redux` 繁多的概念所淹没。真正翻看 `redux` 源码的时候，会发现 `redux` 源码内容相当之少，代码量也相当少，代码质量也相当高，所以是非常值得看的源码。\n\n## 目录结构\n\n其他目录都可以不看，直接看 `./src` 吧：\n\n.\\REDUX\\SRC\n│  applyMiddleware.js\n│  bindActionCreators.js\n│  combineReducers.js\n│  compose.js\n│  createStore.js\n│  index.js\n│\n└─utils\n        actionTypes.js\n        isPlainObject.js\n        warning.js\n\n`index.js` 就是把 `applyMiddleware.js` 等汇集再统一暴露出去。`utils` 里面就放一些辅助函数。所以一共就五个文件需要看，这五个文件也就是 `redux` 暴露出去的五个 `API`。\n\n```js\n// index.js\nimport createStore from './createStore'\nimport combineReducers from './combineReducers'\nimport bindActionCreators from './bindActionCreators'\nimport applyMiddleware from './applyMiddleware'\nimport compose from './compose'\nimport warning from './utils/warning'\nimport __DO_NOT_USE__ActionTypes from './utils/actionTypes'\n\n// 忽略内容\n\nexport {\n  createStore,\n  combineReducers,\n  bindActionCreators,\n  applyMiddleware,\n  compose,\n  __DO_NOT_USE__ActionTypes\n}\n```\n\n## compose.js\n\n这是五个 `API` 里唯一一个能单独拿出来用的函数，就是函数式编程里常用的组合函数，和 `redux` 本身没有什么多大关系，先了解下函数式编程的一些概念：\n\n> [纯函数](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html#%E8%BF%BD%E6%B1%82%E2%80%9C%E7%BA%AF%E2%80%9D%E7%9A%84%E7%90%86%E7%94%B1)是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用。\n> [代码组合](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html)\n\n代码：\n\n```js\nexport default function compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n```\n\n其实 `compose` 函数做的事就是把 `var a = fn1(fn2(fn3(fn4(x))))` 这种嵌套的调用方式改成 `var a = compose(fn1,fn2,fn3,fn4)(x)` 的方式调用。\n\n`redux` 的 `compose` 实现很简洁，用了数组的 `reduce` 方法，`reduce` 的用法可以参照 [mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)。\n\n核心代码就一句：`return funcs.reduce((a,b) => (..args) => a(b(...args)))`\n\n我虽然经常写 `reduce` 函数，但是看到这句代码还是有点懵的，所以这里举一个实际的例子，看看这个函数是怎么执行的：\n\n```js\nimport {compose} from 'redux'\nlet x = 10\nfunction fn1 (x) {return x + 1}\nfunction fn2(x) {return x + 2}\nfunction fn3(x) {return x + 3}\nfunction fn4(x) {return x + 4}\n\n// 假设我这里想求得这样的值\nlet a = fn1(fn2(fn3(fn4(x)))) // 10 + 4 + 3 + 2 + 1 = 20\n\n// 根据compose的功能，我们可以把上面的这条式子改成如下：\nlet composeFn = compose(fn1, fn2, fn3, fn4)\nlet b = composeFn(x) // 理论上也应该得到20\n```\n\n看一下 `compose(fn1, fn2, fn3, fn4)`根据 `compose` 的源码, 其实执行的就是：\n`[fn1,fn2,fn3.fn4].reduce((a, b) => (...args) => a(b(...args)))`\n\n| 第几轮循环 | a的值 | b的值 | 返回的值 |\n| --- | --- | --- | --- |\n| 第一轮循环 | fn1 | fn2 | (...args) => fn1(fn2(...args)) |\n| 第二轮循环 | (...args) => fn1(fn2(...args)) | fn3 | (...args) => fn1(fn2(fn3(...args))) |\n| 第三轮循环 | (...args) => fn1(fn2(fn3(...args))) | fn4 | (...args) => fn1(fn2(fn3(fn4(...args)))) |\n\n循环最后的返回值就是 `(...args) => fn1(fn2(fn3(fn4(...args))))`。所以经过 `compose` 处理过之后，函数就变成我们想要的格式了。\n\n## 总结\n\n`compose` 函数在函数式编程里很常见。这里 `redux` 的对 `compose` 实现很简单，理解起来却没有那么容易，主要还是因为对 `Array.prototype.reduce` 函数没有那么熟练，其次就是这种接受函数返回函数的写法，再配上几个连续的 `=>` ，容易看晕。\n\n这是 `redux` 解读的第一篇，后续把几个 `API` 都讲一下。特别是 `applyMiddleware` 这个 `API` 有用到这个 `compose` 来组合中间件，也是有那么一个点比较难理解。\n\n---\n\n![Edvard Munch – img742](redux之compose/196334101.jpg)\n\n> Edvard Munch – img742\n","source":"_posts/redux之compose.md","raw":"---\ntitle: redux之compose\ndate: 2018-08-03 12:59:26\ntags:\n  - redux\n  - react\n  - 源码\ncategories: 前端\n---\n\n# redux之compose\n\n`redux` 是状态管理库，与其他框架如 `react` 是没有直接关系，所以 `redux` 可以脱离 `react` 在别的环境下使用。由于没有和`react` 相关逻辑耦合，所以 `redux` 的源码很纯粹，目的就是把如何数据管理好。而真正在 `react` 项目中使用 `redux` 时，是需要有一个 `react-redux` 当作连接器，去连接 `react` 和 `redux` 。\n\n没看 `redux` 源码之前，我觉得看 `redux` 应该是件很困难的事情，因为当初在学 `redux` 如何使用的时候就已经被 `redux` 繁多的概念所淹没。真正翻看 `redux` 源码的时候，会发现 `redux` 源码内容相当之少，代码量也相当少，代码质量也相当高，所以是非常值得看的源码。\n\n## 目录结构\n\n其他目录都可以不看，直接看 `./src` 吧：\n\n.\\REDUX\\SRC\n│  applyMiddleware.js\n│  bindActionCreators.js\n│  combineReducers.js\n│  compose.js\n│  createStore.js\n│  index.js\n│\n└─utils\n        actionTypes.js\n        isPlainObject.js\n        warning.js\n\n`index.js` 就是把 `applyMiddleware.js` 等汇集再统一暴露出去。`utils` 里面就放一些辅助函数。所以一共就五个文件需要看，这五个文件也就是 `redux` 暴露出去的五个 `API`。\n\n```js\n// index.js\nimport createStore from './createStore'\nimport combineReducers from './combineReducers'\nimport bindActionCreators from './bindActionCreators'\nimport applyMiddleware from './applyMiddleware'\nimport compose from './compose'\nimport warning from './utils/warning'\nimport __DO_NOT_USE__ActionTypes from './utils/actionTypes'\n\n// 忽略内容\n\nexport {\n  createStore,\n  combineReducers,\n  bindActionCreators,\n  applyMiddleware,\n  compose,\n  __DO_NOT_USE__ActionTypes\n}\n```\n\n## compose.js\n\n这是五个 `API` 里唯一一个能单独拿出来用的函数，就是函数式编程里常用的组合函数，和 `redux` 本身没有什么多大关系，先了解下函数式编程的一些概念：\n\n> [纯函数](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html#%E8%BF%BD%E6%B1%82%E2%80%9C%E7%BA%AF%E2%80%9D%E7%9A%84%E7%90%86%E7%94%B1)是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用。\n> [代码组合](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html)\n\n代码：\n\n```js\nexport default function compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n```\n\n其实 `compose` 函数做的事就是把 `var a = fn1(fn2(fn3(fn4(x))))` 这种嵌套的调用方式改成 `var a = compose(fn1,fn2,fn3,fn4)(x)` 的方式调用。\n\n`redux` 的 `compose` 实现很简洁，用了数组的 `reduce` 方法，`reduce` 的用法可以参照 [mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)。\n\n核心代码就一句：`return funcs.reduce((a,b) => (..args) => a(b(...args)))`\n\n我虽然经常写 `reduce` 函数，但是看到这句代码还是有点懵的，所以这里举一个实际的例子，看看这个函数是怎么执行的：\n\n```js\nimport {compose} from 'redux'\nlet x = 10\nfunction fn1 (x) {return x + 1}\nfunction fn2(x) {return x + 2}\nfunction fn3(x) {return x + 3}\nfunction fn4(x) {return x + 4}\n\n// 假设我这里想求得这样的值\nlet a = fn1(fn2(fn3(fn4(x)))) // 10 + 4 + 3 + 2 + 1 = 20\n\n// 根据compose的功能，我们可以把上面的这条式子改成如下：\nlet composeFn = compose(fn1, fn2, fn3, fn4)\nlet b = composeFn(x) // 理论上也应该得到20\n```\n\n看一下 `compose(fn1, fn2, fn3, fn4)`根据 `compose` 的源码, 其实执行的就是：\n`[fn1,fn2,fn3.fn4].reduce((a, b) => (...args) => a(b(...args)))`\n\n| 第几轮循环 | a的值 | b的值 | 返回的值 |\n| --- | --- | --- | --- |\n| 第一轮循环 | fn1 | fn2 | (...args) => fn1(fn2(...args)) |\n| 第二轮循环 | (...args) => fn1(fn2(...args)) | fn3 | (...args) => fn1(fn2(fn3(...args))) |\n| 第三轮循环 | (...args) => fn1(fn2(fn3(...args))) | fn4 | (...args) => fn1(fn2(fn3(fn4(...args)))) |\n\n循环最后的返回值就是 `(...args) => fn1(fn2(fn3(fn4(...args))))`。所以经过 `compose` 处理过之后，函数就变成我们想要的格式了。\n\n## 总结\n\n`compose` 函数在函数式编程里很常见。这里 `redux` 的对 `compose` 实现很简单，理解起来却没有那么容易，主要还是因为对 `Array.prototype.reduce` 函数没有那么熟练，其次就是这种接受函数返回函数的写法，再配上几个连续的 `=>` ，容易看晕。\n\n这是 `redux` 解读的第一篇，后续把几个 `API` 都讲一下。特别是 `applyMiddleware` 这个 `API` 有用到这个 `compose` 来组合中间件，也是有那么一个点比较难理解。\n\n---\n\n![Edvard Munch – img742](redux之compose/196334101.jpg)\n\n> Edvard Munch – img742\n","slug":"redux之compose","published":1,"updated":"2018-08-26T03:52:41.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbfw000bssv6lfv9pun4","content":"<h1 id=\"redux之compose\"><a href=\"#redux之compose\" class=\"headerlink\" title=\"redux之compose\"></a>redux之compose</h1><p><code>redux</code> 是状态管理库，与其他框架如 <code>react</code> 是没有直接关系，所以 <code>redux</code> 可以脱离 <code>react</code> 在别的环境下使用。由于没有和<code>react</code> 相关逻辑耦合，所以 <code>redux</code> 的源码很纯粹，目的就是把如何数据管理好。而真正在 <code>react</code> 项目中使用 <code>redux</code> 时，是需要有一个 <code>react-redux</code> 当作连接器，去连接 <code>react</code> 和 <code>redux</code> 。</p>\n<p>没看 <code>redux</code> 源码之前，我觉得看 <code>redux</code> 应该是件很困难的事情，因为当初在学 <code>redux</code> 如何使用的时候就已经被 <code>redux</code> 繁多的概念所淹没。真正翻看 <code>redux</code> 源码的时候，会发现 <code>redux</code> 源码内容相当之少，代码量也相当少，代码质量也相当高，所以是非常值得看的源码。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>其他目录都可以不看，直接看 <code>./src</code> 吧：</p>\n<p>.\\REDUX\\SRC<br>│  applyMiddleware.js<br>│  bindActionCreators.js<br>│  combineReducers.js<br>│  compose.js<br>│  createStore.js<br>│  index.js<br>│<br>└─utils<br>        actionTypes.js<br>        isPlainObject.js<br>        warning.js</p>\n<p><code>index.js</code> 就是把 <code>applyMiddleware.js</code> 等汇集再统一暴露出去。<code>utils</code> 里面就放一些辅助函数。所以一共就五个文件需要看，这五个文件也就是 <code>redux</code> 暴露出去的五个 <code>API</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> createStore <span class=\"keyword\">from</span> <span class=\"string\">'./createStore'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> combineReducers <span class=\"keyword\">from</span> <span class=\"string\">'./combineReducers'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> bindActionCreators <span class=\"keyword\">from</span> <span class=\"string\">'./bindActionCreators'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> applyMiddleware <span class=\"keyword\">from</span> <span class=\"string\">'./applyMiddleware'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> compose <span class=\"keyword\">from</span> <span class=\"string\">'./compose'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> warning <span class=\"keyword\">from</span> <span class=\"string\">'./utils/warning'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> __DO_NOT_USE__ActionTypes <span class=\"keyword\">from</span> <span class=\"string\">'./utils/actionTypes'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 忽略内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">  createStore,</span><br><span class=\"line\">  combineReducers,</span><br><span class=\"line\">  bindActionCreators,</span><br><span class=\"line\">  applyMiddleware,</span><br><span class=\"line\">  compose,</span><br><span class=\"line\">  __DO_NOT_USE__ActionTypes</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"compose-js\"><a href=\"#compose-js\" class=\"headerlink\" title=\"compose.js\"></a>compose.js</h2><p>这是五个 <code>API</code> 里唯一一个能单独拿出来用的函数，就是函数式编程里常用的组合函数，和 <code>redux</code> 本身没有什么多大关系，先了解下函数式编程的一些概念：</p>\n<blockquote>\n<p><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html#%E8%BF%BD%E6%B1%82%E2%80%9C%E7%BA%AF%E2%80%9D%E7%9A%84%E7%90%86%E7%94%B1\" target=\"_blank\" rel=\"noopener\">纯函数</a>是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用。<br><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html\" target=\"_blank\" rel=\"noopener\">代码组合</a></p>\n</blockquote>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\">...funcs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">arg</span> =&gt;</span> arg</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcs.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> (...args) =&gt; a(b(...args)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实 <code>compose</code> 函数做的事就是把 <code>var a = fn1(fn2(fn3(fn4(x))))</code> 这种嵌套的调用方式改成 <code>var a = compose(fn1,fn2,fn3,fn4)(x)</code> 的方式调用。</p>\n<p><code>redux</code> 的 <code>compose</code> 实现很简洁，用了数组的 <code>reduce</code> 方法，<code>reduce</code> 的用法可以参照 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\" rel=\"noopener\">mdn</a>。</p>\n<p>核心代码就一句：<code>return funcs.reduce((a,b) =&gt; (..args) =&gt; a(b(...args)))</code></p>\n<p>我虽然经常写 <code>reduce</code> 函数，但是看到这句代码还是有点懵的，所以这里举一个实际的例子，看看这个函数是怎么执行的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;compose&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span> (<span class=\"params\">x</span>) </span>&#123;<span class=\"keyword\">return</span> x + <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\">x</span>) </span>&#123;<span class=\"keyword\">return</span> x + <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn3</span>(<span class=\"params\">x</span>) </span>&#123;<span class=\"keyword\">return</span> x + <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn4</span>(<span class=\"params\">x</span>) </span>&#123;<span class=\"keyword\">return</span> x + <span class=\"number\">4</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 假设我这里想求得这样的值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = fn1(fn2(fn3(fn4(x)))) <span class=\"comment\">// 10 + 4 + 3 + 2 + 1 = 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据compose的功能，我们可以把上面的这条式子改成如下：</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> composeFn = compose(fn1, fn2, fn3, fn4)</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = composeFn(x) <span class=\"comment\">// 理论上也应该得到20</span></span><br></pre></td></tr></table></figure>\n<p>看一下 <code>compose(fn1, fn2, fn3, fn4)</code>根据 <code>compose</code> 的源码, 其实执行的就是：<br><code>[fn1,fn2,fn3.fn4].reduce((a, b) =&gt; (...args) =&gt; a(b(...args)))</code></p>\n<table>\n<thead>\n<tr>\n<th>第几轮循环</th>\n<th>a的值</th>\n<th>b的值</th>\n<th>返回的值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第一轮循环</td>\n<td>fn1</td>\n<td>fn2</td>\n<td>(…args) =&gt; fn1(fn2(…args))</td>\n</tr>\n<tr>\n<td>第二轮循环</td>\n<td>(…args) =&gt; fn1(fn2(…args))</td>\n<td>fn3</td>\n<td>(…args) =&gt; fn1(fn2(fn3(…args)))</td>\n</tr>\n<tr>\n<td>第三轮循环</td>\n<td>(…args) =&gt; fn1(fn2(fn3(…args)))</td>\n<td>fn4</td>\n<td>(…args) =&gt; fn1(fn2(fn3(fn4(…args))))</td>\n</tr>\n</tbody>\n</table>\n<p>循环最后的返回值就是 <code>(...args) =&gt; fn1(fn2(fn3(fn4(...args))))</code>。所以经过 <code>compose</code> 处理过之后，函数就变成我们想要的格式了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>compose</code> 函数在函数式编程里很常见。这里 <code>redux</code> 的对 <code>compose</code> 实现很简单，理解起来却没有那么容易，主要还是因为对 <code>Array.prototype.reduce</code> 函数没有那么熟练，其次就是这种接受函数返回函数的写法，再配上几个连续的 <code>=&gt;</code> ，容易看晕。</p>\n<p>这是 <code>redux</code> 解读的第一篇，后续把几个 <code>API</code> 都讲一下。特别是 <code>applyMiddleware</code> 这个 <code>API</code> 有用到这个 <code>compose</code> 来组合中间件，也是有那么一个点比较难理解。</p>\n<hr>\n<p><img src=\"/2018/08/03/redux之compose/196334101.jpg\" alt=\"Edvard Munch – img742\"></p>\n<blockquote>\n<p>Edvard Munch – img742</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"redux之compose\"><a href=\"#redux之compose\" class=\"headerlink\" title=\"redux之compose\"></a>redux之compose</h1><p><code>redux</code> 是状态管理库，与其他框架如 <code>react</code> 是没有直接关系，所以 <code>redux</code> 可以脱离 <code>react</code> 在别的环境下使用。由于没有和<code>react</code> 相关逻辑耦合，所以 <code>redux</code> 的源码很纯粹，目的就是把如何数据管理好。而真正在 <code>react</code> 项目中使用 <code>redux</code> 时，是需要有一个 <code>react-redux</code> 当作连接器，去连接 <code>react</code> 和 <code>redux</code> 。</p>\n<p>没看 <code>redux</code> 源码之前，我觉得看 <code>redux</code> 应该是件很困难的事情，因为当初在学 <code>redux</code> 如何使用的时候就已经被 <code>redux</code> 繁多的概念所淹没。真正翻看 <code>redux</code> 源码的时候，会发现 <code>redux</code> 源码内容相当之少，代码量也相当少，代码质量也相当高，所以是非常值得看的源码。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>其他目录都可以不看，直接看 <code>./src</code> 吧：</p>\n<p>.\\REDUX\\SRC<br>│  applyMiddleware.js<br>│  bindActionCreators.js<br>│  combineReducers.js<br>│  compose.js<br>│  createStore.js<br>│  index.js<br>│<br>└─utils<br>        actionTypes.js<br>        isPlainObject.js<br>        warning.js</p>\n<p><code>index.js</code> 就是把 <code>applyMiddleware.js</code> 等汇集再统一暴露出去。<code>utils</code> 里面就放一些辅助函数。所以一共就五个文件需要看，这五个文件也就是 <code>redux</code> 暴露出去的五个 <code>API</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> createStore <span class=\"keyword\">from</span> <span class=\"string\">'./createStore'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> combineReducers <span class=\"keyword\">from</span> <span class=\"string\">'./combineReducers'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> bindActionCreators <span class=\"keyword\">from</span> <span class=\"string\">'./bindActionCreators'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> applyMiddleware <span class=\"keyword\">from</span> <span class=\"string\">'./applyMiddleware'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> compose <span class=\"keyword\">from</span> <span class=\"string\">'./compose'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> warning <span class=\"keyword\">from</span> <span class=\"string\">'./utils/warning'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> __DO_NOT_USE__ActionTypes <span class=\"keyword\">from</span> <span class=\"string\">'./utils/actionTypes'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 忽略内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">  createStore,</span><br><span class=\"line\">  combineReducers,</span><br><span class=\"line\">  bindActionCreators,</span><br><span class=\"line\">  applyMiddleware,</span><br><span class=\"line\">  compose,</span><br><span class=\"line\">  __DO_NOT_USE__ActionTypes</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"compose-js\"><a href=\"#compose-js\" class=\"headerlink\" title=\"compose.js\"></a>compose.js</h2><p>这是五个 <code>API</code> 里唯一一个能单独拿出来用的函数，就是函数式编程里常用的组合函数，和 <code>redux</code> 本身没有什么多大关系，先了解下函数式编程的一些概念：</p>\n<blockquote>\n<p><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html#%E8%BF%BD%E6%B1%82%E2%80%9C%E7%BA%AF%E2%80%9D%E7%9A%84%E7%90%86%E7%94%B1\" target=\"_blank\" rel=\"noopener\">纯函数</a>是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用。<br><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html\" target=\"_blank\" rel=\"noopener\">代码组合</a></p>\n</blockquote>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\">...funcs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">arg</span> =&gt;</span> arg</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcs.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> (...args) =&gt; a(b(...args)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实 <code>compose</code> 函数做的事就是把 <code>var a = fn1(fn2(fn3(fn4(x))))</code> 这种嵌套的调用方式改成 <code>var a = compose(fn1,fn2,fn3,fn4)(x)</code> 的方式调用。</p>\n<p><code>redux</code> 的 <code>compose</code> 实现很简洁，用了数组的 <code>reduce</code> 方法，<code>reduce</code> 的用法可以参照 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\" rel=\"noopener\">mdn</a>。</p>\n<p>核心代码就一句：<code>return funcs.reduce((a,b) =&gt; (..args) =&gt; a(b(...args)))</code></p>\n<p>我虽然经常写 <code>reduce</code> 函数，但是看到这句代码还是有点懵的，所以这里举一个实际的例子，看看这个函数是怎么执行的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;compose&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span> (<span class=\"params\">x</span>) </span>&#123;<span class=\"keyword\">return</span> x + <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\">x</span>) </span>&#123;<span class=\"keyword\">return</span> x + <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn3</span>(<span class=\"params\">x</span>) </span>&#123;<span class=\"keyword\">return</span> x + <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn4</span>(<span class=\"params\">x</span>) </span>&#123;<span class=\"keyword\">return</span> x + <span class=\"number\">4</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 假设我这里想求得这样的值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = fn1(fn2(fn3(fn4(x)))) <span class=\"comment\">// 10 + 4 + 3 + 2 + 1 = 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据compose的功能，我们可以把上面的这条式子改成如下：</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> composeFn = compose(fn1, fn2, fn3, fn4)</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = composeFn(x) <span class=\"comment\">// 理论上也应该得到20</span></span><br></pre></td></tr></table></figure>\n<p>看一下 <code>compose(fn1, fn2, fn3, fn4)</code>根据 <code>compose</code> 的源码, 其实执行的就是：<br><code>[fn1,fn2,fn3.fn4].reduce((a, b) =&gt; (...args) =&gt; a(b(...args)))</code></p>\n<table>\n<thead>\n<tr>\n<th>第几轮循环</th>\n<th>a的值</th>\n<th>b的值</th>\n<th>返回的值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第一轮循环</td>\n<td>fn1</td>\n<td>fn2</td>\n<td>(…args) =&gt; fn1(fn2(…args))</td>\n</tr>\n<tr>\n<td>第二轮循环</td>\n<td>(…args) =&gt; fn1(fn2(…args))</td>\n<td>fn3</td>\n<td>(…args) =&gt; fn1(fn2(fn3(…args)))</td>\n</tr>\n<tr>\n<td>第三轮循环</td>\n<td>(…args) =&gt; fn1(fn2(fn3(…args)))</td>\n<td>fn4</td>\n<td>(…args) =&gt; fn1(fn2(fn3(fn4(…args))))</td>\n</tr>\n</tbody>\n</table>\n<p>循环最后的返回值就是 <code>(...args) =&gt; fn1(fn2(fn3(fn4(...args))))</code>。所以经过 <code>compose</code> 处理过之后，函数就变成我们想要的格式了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>compose</code> 函数在函数式编程里很常见。这里 <code>redux</code> 的对 <code>compose</code> 实现很简单，理解起来却没有那么容易，主要还是因为对 <code>Array.prototype.reduce</code> 函数没有那么熟练，其次就是这种接受函数返回函数的写法，再配上几个连续的 <code>=&gt;</code> ，容易看晕。</p>\n<p>这是 <code>redux</code> 解读的第一篇，后续把几个 <code>API</code> 都讲一下。特别是 <code>applyMiddleware</code> 这个 <code>API</code> 有用到这个 <code>compose</code> 来组合中间件，也是有那么一个点比较难理解。</p>\n<hr>\n<p><img src=\"/2018/08/03/redux之compose/196334101.jpg\" alt=\"Edvard Munch – img742\"></p>\n<blockquote>\n<p>Edvard Munch – img742</p>\n</blockquote>\n"},{"title":"vue、react隐式实例化","date":"2018-08-03T01:33:40.000Z","_content":"\n# vue、react隐式实例化\n\n> 写这篇的缘由是因为上一篇[vue与react组件对比学习](https://github.com/limengke123/my-note/blob/master/%E5%89%8D%E7%AB%AF/vue%E4%B8%8Ereact%E7%BB%84%E4%BB%B6%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0.md)写的有点啰嗦也没有写的很明白同时也存在一点错误，所以重新写一篇简介概要点的。\n\n## 隐式实例化\n\n> 隐式实例化，不希望写在`react`的`jsx`里或是`vue`的`template`，而是希望通过手动去实例化一个`react`或是`vue`组件。\n\n说的有点绕，这种*隐式实例化*的应用场景在提示信息(message)、模态框(modal)、加载条(loadingbar)，例如一个`ajax`请求，在成功或失败的时候需要给一个提示：\n\n```js\n// 下面是伪代码...\n\nimport message from 'message'\n\nfetch('/api/xxx')\n    .then(resp => {\n        if(resp.success === true){\n            message({\n                type:\"success\",\n                text:\"请求成功\"\n            })\n        } else {\n            message({\n                type:\"error\",\n                text:\"请求出错\"\n            })\n        }\n    })\n\n```\n\n可以看的出来，我们的需求是想有一个组件能像`html`原生的`alert`一样，在需要的地方能够直接去调用，而不是需要把`message`组件写进节点中。\n\n## 难点\n\n我们都知道不论是`react`、还是`vue`也好，写的都是一个类或者叫构造器：\n\n```js\n\n// react 引用代码省略\n\nexport default class Message extends React.Component{}\n\n// vue\n// export default {\n    data(){},\n    props:{},\n    methods:{},\n    render:function(){}\n}\n\n\n```\n\n`react`相当明显地创建了一个`class`，`vue`表面上好像只是暴露一个对象，实际上`vue`的组件被使用时，你需要把子组件传入父组件的`component`的对象中，所以`Vue`会调用`Vue.extend({...自组建的选项对象})`，这个方法就返回了一个构造器。\n\n既然知道了子组件是一个构造器，那我能不能直接去手动`new`一个子组件呢？在我测试下来，好像是不行。\n\n## vue实例化\n\n那么如何实例化呢？分成两部分，先是实例化一个组件，然后再把实例化后的组件挂载到html中去。先拿`vue`说：\n\n### 拿到构造器\n\n```js\nimport Vue from 'vue'\nimport message from './message.vue'\n\n// 注意： 这里的message仅仅就是一个对象，需要转成构造器\n\nconst messageConstructor = Vue.extend(message)\n\n\n```\n\n### 实例化\n\n```js\nconst customProps = {\n    // 传给组件的一些props\n}\n\n\n// 这样就能拿到了一个vue组件的实例，就能做很多事情了，比如调用实例中写好的methods中的方法，当然这还没完，我们还得把实例挂载到Html中\nconst messageInstance = new messageConstuctor({propsData:customProps})\n```\n\n### 挂载\n\n`vue`的实例有一个很重要的方法：`$mount`，在选项对象中我们没有传入`el`属性，所以你在这里手动实例化的`vue`实例是没有挂载出来的，需要手动调用一遍`$mount`，可以传入一个DOM节点做为挂载节点，当然也可以不传入参数，后面手动用`dom`方法把节点插入。\n\n```js\n\n// 这里返回的messageWithDom依然还是vue实例而不是dom节点，但是这个实例多了一个$el属性，这个属性里面就藏着我们需要挂载的dom节点\nconst messageWithDom = messageInstance.$mount()\n\nconst dom = messageWithDom.$el\n\ndocument.body.appendChild(dom)\n\n```\n\n### 野路子\n\n`vue`隐式化实例，基本是这个套路，当然我在看*iview组件库*中用了一些其他的野路子，这里也贴一下：\n\n```js\n\nimport Notification from './notification.vue';\nimport Vue from 'vue';\n\nconst _props = properties || {};\n\nconst Instance = new Vue({\n    render (h) {\n        return h(Notification, {\n            props: _props\n        });\n    }\n});\n\n```\n\n道理基本上和我说的差不多，不过调用`Vue.extend`更加容易理解。\n\n### 后续控制\n\n拿到组件的实例后，基本上想怎么玩就能怎么玩了，比如说控制隐藏或显示，可以在组件内部定义一个`isShow`的`data`属性，在实例上可以这样用：\n\n```js\n\nif( xxxx ) {\n    messageWithDom.isShow = true\n} else {\n    messageWithDom.isShow = false\n}\n\n```\n\n## react实例化\n\n`react`的实例化和`vue`稍稍不同，首先引进来的直接就是一个类所以不需要像`Vue`一样多做一步转换成构造器，其次`react`是没有类似`vue`的`$mount`方法，这也是我一开始很疑惑的地方，后来突然想起来`react`把组件的挂载方法放到了`reactDom`这个包里面了。\n\n### 创建一个虚拟dom\n\n这里需要调用`React.createElement`去创建一个虚拟dom，其实`vue`也能创建一个虚拟dom，参考上面`iview`的野路子。\n\n```js\nimport React from 'react'\nimport Message from './message.jsx'\n\nconst customProps = {\n    // 传给自组件的一些props\n}\n\nconst Vnode = React.createElment(Message,{props:customProps})\n\n```\n\n### 挂载并且拿到实例\n\n`react`没有`$mount`方法，而是直接调用`reactDom`的`render`方法，相当于`vue`的两步直接一步完成:\n\n```js\nimport React from 'react'\nimport ReactDom from 'react-dom'\n\nconst containner = document.createElement('div')\ndocument.body.appendChild(containner)\n\n// 把虚拟dom传入reactDom.render方法中，第二个参数是挂载的节点，并返回这个组件的实例\nconst messageInstance = ReactDom.render(Vnode,containner)\n```\n\n### 后续的控制\n\n拿到组件的实例后，基本想怎么玩就能怎么玩了，但是**别忘记了！！！**，`react`修改`state`是调用`setState`，而不像`vue`直接修改。\n\n## 总结\n\n学会隐式化创建实例能够很好的看清楚`vue`和`react`内部的细节，对提高`vue`、`react`大有好处。我的一个项目有个加载条的组件，同时用`react`和`vue`都实现了一遍，可以对比学习发现两者的差异，喜欢的可以点个赞~~。\n\n* [loadingBar的vue实现](https://github.com/limengke123/fantastic-carnival/blob/master/admin/src/components/general/loading-bar/loading-bar.js#L6)\n* [loadingBar的react实现](https://github.com/limengke123/fantastic-carnival/blob/master/client/src/components/common/loading-bar/loading-bar.js#L7)\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Wave](vue、react隐式实例化/596444702.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Wave 1889\n","source":"_posts/vue、react隐式实例化.md","raw":"---\ntitle: vue、react隐式实例化\ndate: 2018-08-03 09:33:40\ntags:\n  - vue\n  - react\ncategories: 前端\n---\n\n# vue、react隐式实例化\n\n> 写这篇的缘由是因为上一篇[vue与react组件对比学习](https://github.com/limengke123/my-note/blob/master/%E5%89%8D%E7%AB%AF/vue%E4%B8%8Ereact%E7%BB%84%E4%BB%B6%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0.md)写的有点啰嗦也没有写的很明白同时也存在一点错误，所以重新写一篇简介概要点的。\n\n## 隐式实例化\n\n> 隐式实例化，不希望写在`react`的`jsx`里或是`vue`的`template`，而是希望通过手动去实例化一个`react`或是`vue`组件。\n\n说的有点绕，这种*隐式实例化*的应用场景在提示信息(message)、模态框(modal)、加载条(loadingbar)，例如一个`ajax`请求，在成功或失败的时候需要给一个提示：\n\n```js\n// 下面是伪代码...\n\nimport message from 'message'\n\nfetch('/api/xxx')\n    .then(resp => {\n        if(resp.success === true){\n            message({\n                type:\"success\",\n                text:\"请求成功\"\n            })\n        } else {\n            message({\n                type:\"error\",\n                text:\"请求出错\"\n            })\n        }\n    })\n\n```\n\n可以看的出来，我们的需求是想有一个组件能像`html`原生的`alert`一样，在需要的地方能够直接去调用，而不是需要把`message`组件写进节点中。\n\n## 难点\n\n我们都知道不论是`react`、还是`vue`也好，写的都是一个类或者叫构造器：\n\n```js\n\n// react 引用代码省略\n\nexport default class Message extends React.Component{}\n\n// vue\n// export default {\n    data(){},\n    props:{},\n    methods:{},\n    render:function(){}\n}\n\n\n```\n\n`react`相当明显地创建了一个`class`，`vue`表面上好像只是暴露一个对象，实际上`vue`的组件被使用时，你需要把子组件传入父组件的`component`的对象中，所以`Vue`会调用`Vue.extend({...自组建的选项对象})`，这个方法就返回了一个构造器。\n\n既然知道了子组件是一个构造器，那我能不能直接去手动`new`一个子组件呢？在我测试下来，好像是不行。\n\n## vue实例化\n\n那么如何实例化呢？分成两部分，先是实例化一个组件，然后再把实例化后的组件挂载到html中去。先拿`vue`说：\n\n### 拿到构造器\n\n```js\nimport Vue from 'vue'\nimport message from './message.vue'\n\n// 注意： 这里的message仅仅就是一个对象，需要转成构造器\n\nconst messageConstructor = Vue.extend(message)\n\n\n```\n\n### 实例化\n\n```js\nconst customProps = {\n    // 传给组件的一些props\n}\n\n\n// 这样就能拿到了一个vue组件的实例，就能做很多事情了，比如调用实例中写好的methods中的方法，当然这还没完，我们还得把实例挂载到Html中\nconst messageInstance = new messageConstuctor({propsData:customProps})\n```\n\n### 挂载\n\n`vue`的实例有一个很重要的方法：`$mount`，在选项对象中我们没有传入`el`属性，所以你在这里手动实例化的`vue`实例是没有挂载出来的，需要手动调用一遍`$mount`，可以传入一个DOM节点做为挂载节点，当然也可以不传入参数，后面手动用`dom`方法把节点插入。\n\n```js\n\n// 这里返回的messageWithDom依然还是vue实例而不是dom节点，但是这个实例多了一个$el属性，这个属性里面就藏着我们需要挂载的dom节点\nconst messageWithDom = messageInstance.$mount()\n\nconst dom = messageWithDom.$el\n\ndocument.body.appendChild(dom)\n\n```\n\n### 野路子\n\n`vue`隐式化实例，基本是这个套路，当然我在看*iview组件库*中用了一些其他的野路子，这里也贴一下：\n\n```js\n\nimport Notification from './notification.vue';\nimport Vue from 'vue';\n\nconst _props = properties || {};\n\nconst Instance = new Vue({\n    render (h) {\n        return h(Notification, {\n            props: _props\n        });\n    }\n});\n\n```\n\n道理基本上和我说的差不多，不过调用`Vue.extend`更加容易理解。\n\n### 后续控制\n\n拿到组件的实例后，基本上想怎么玩就能怎么玩了，比如说控制隐藏或显示，可以在组件内部定义一个`isShow`的`data`属性，在实例上可以这样用：\n\n```js\n\nif( xxxx ) {\n    messageWithDom.isShow = true\n} else {\n    messageWithDom.isShow = false\n}\n\n```\n\n## react实例化\n\n`react`的实例化和`vue`稍稍不同，首先引进来的直接就是一个类所以不需要像`Vue`一样多做一步转换成构造器，其次`react`是没有类似`vue`的`$mount`方法，这也是我一开始很疑惑的地方，后来突然想起来`react`把组件的挂载方法放到了`reactDom`这个包里面了。\n\n### 创建一个虚拟dom\n\n这里需要调用`React.createElement`去创建一个虚拟dom，其实`vue`也能创建一个虚拟dom，参考上面`iview`的野路子。\n\n```js\nimport React from 'react'\nimport Message from './message.jsx'\n\nconst customProps = {\n    // 传给自组件的一些props\n}\n\nconst Vnode = React.createElment(Message,{props:customProps})\n\n```\n\n### 挂载并且拿到实例\n\n`react`没有`$mount`方法，而是直接调用`reactDom`的`render`方法，相当于`vue`的两步直接一步完成:\n\n```js\nimport React from 'react'\nimport ReactDom from 'react-dom'\n\nconst containner = document.createElement('div')\ndocument.body.appendChild(containner)\n\n// 把虚拟dom传入reactDom.render方法中，第二个参数是挂载的节点，并返回这个组件的实例\nconst messageInstance = ReactDom.render(Vnode,containner)\n```\n\n### 后续的控制\n\n拿到组件的实例后，基本想怎么玩就能怎么玩了，但是**别忘记了！！！**，`react`修改`state`是调用`setState`，而不像`vue`直接修改。\n\n## 总结\n\n学会隐式化创建实例能够很好的看清楚`vue`和`react`内部的细节，对提高`vue`、`react`大有好处。我的一个项目有个加载条的组件，同时用`react`和`vue`都实现了一遍，可以对比学习发现两者的差异，喜欢的可以点个赞~~。\n\n* [loadingBar的vue实现](https://github.com/limengke123/fantastic-carnival/blob/master/admin/src/components/general/loading-bar/loading-bar.js#L6)\n* [loadingBar的react实现](https://github.com/limengke123/fantastic-carnival/blob/master/client/src/components/common/loading-bar/loading-bar.js#L7)\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Wave](vue、react隐式实例化/596444702.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Wave 1889\n","slug":"vue、react隐式实例化","published":1,"updated":"2018-08-03T11:48:58.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbg0000essv6e7bbebgl","content":"<h1 id=\"vue、react隐式实例化\"><a href=\"#vue、react隐式实例化\" class=\"headerlink\" title=\"vue、react隐式实例化\"></a>vue、react隐式实例化</h1><blockquote>\n<p>写这篇的缘由是因为上一篇<a href=\"https://github.com/limengke123/my-note/blob/master/%E5%89%8D%E7%AB%AF/vue%E4%B8%8Ereact%E7%BB%84%E4%BB%B6%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0.md\" target=\"_blank\" rel=\"noopener\">vue与react组件对比学习</a>写的有点啰嗦也没有写的很明白同时也存在一点错误，所以重新写一篇简介概要点的。</p>\n</blockquote>\n<h2 id=\"隐式实例化\"><a href=\"#隐式实例化\" class=\"headerlink\" title=\"隐式实例化\"></a>隐式实例化</h2><blockquote>\n<p>隐式实例化，不希望写在<code>react</code>的<code>jsx</code>里或是<code>vue</code>的<code>template</code>，而是希望通过手动去实例化一个<code>react</code>或是<code>vue</code>组件。</p>\n</blockquote>\n<p>说的有点绕，这种<em>隐式实例化</em>的应用场景在提示信息(message)、模态框(modal)、加载条(loadingbar)，例如一个<code>ajax</code>请求，在成功或失败的时候需要给一个提示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面是伪代码...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> message <span class=\"keyword\">from</span> <span class=\"string\">'message'</span></span><br><span class=\"line\"></span><br><span class=\"line\">fetch(<span class=\"string\">'/api/xxx'</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(resp.success === <span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            message(&#123;</span><br><span class=\"line\">                type:<span class=\"string\">\"success\"</span>,</span><br><span class=\"line\">                text:<span class=\"string\">\"请求成功\"</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            message(&#123;</span><br><span class=\"line\">                type:<span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">                text:<span class=\"string\">\"请求出错\"</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>可以看的出来，我们的需求是想有一个组件能像<code>html</code>原生的<code>alert</code>一样，在需要的地方能够直接去调用，而不是需要把<code>message</code>组件写进节点中。</p>\n<h2 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h2><p>我们都知道不论是<code>react</code>、还是<code>vue</code>也好，写的都是一个类或者叫构造器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// react 引用代码省略</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Message</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue</span></span><br><span class=\"line\"><span class=\"comment\">// export default &#123;</span></span><br><span class=\"line\">    data()&#123;&#125;,</span><br><span class=\"line\">    props:&#123;&#125;,</span><br><span class=\"line\">    methods:&#123;&#125;,</span><br><span class=\"line\">    render:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>react</code>相当明显地创建了一个<code>class</code>，<code>vue</code>表面上好像只是暴露一个对象，实际上<code>vue</code>的组件被使用时，你需要把子组件传入父组件的<code>component</code>的对象中，所以<code>Vue</code>会调用<code>Vue.extend({...自组建的选项对象})</code>，这个方法就返回了一个构造器。</p>\n<p>既然知道了子组件是一个构造器，那我能不能直接去手动<code>new</code>一个子组件呢？在我测试下来，好像是不行。</p>\n<h2 id=\"vue实例化\"><a href=\"#vue实例化\" class=\"headerlink\" title=\"vue实例化\"></a>vue实例化</h2><p>那么如何实例化呢？分成两部分，先是实例化一个组件，然后再把实例化后的组件挂载到html中去。先拿<code>vue</code>说：</p>\n<h3 id=\"拿到构造器\"><a href=\"#拿到构造器\" class=\"headerlink\" title=\"拿到构造器\"></a>拿到构造器</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> message <span class=\"keyword\">from</span> <span class=\"string\">'./message.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意： 这里的message仅仅就是一个对象，需要转成构造器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> messageConstructor = Vue.extend(message)</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> customProps = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 传给组件的一些props</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这样就能拿到了一个vue组件的实例，就能做很多事情了，比如调用实例中写好的methods中的方法，当然这还没完，我们还得把实例挂载到Html中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> messageInstance = <span class=\"keyword\">new</span> messageConstuctor(&#123;<span class=\"attr\">propsData</span>:customProps&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h3><p><code>vue</code>的实例有一个很重要的方法：<code>$mount</code>，在选项对象中我们没有传入<code>el</code>属性，所以你在这里手动实例化的<code>vue</code>实例是没有挂载出来的，需要手动调用一遍<code>$mount</code>，可以传入一个DOM节点做为挂载节点，当然也可以不传入参数，后面手动用<code>dom</code>方法把节点插入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里返回的messageWithDom依然还是vue实例而不是dom节点，但是这个实例多了一个$el属性，这个属性里面就藏着我们需要挂载的dom节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> messageWithDom = messageInstance.$mount()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dom = messageWithDom.$el</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(dom)</span><br></pre></td></tr></table></figure>\n<h3 id=\"野路子\"><a href=\"#野路子\" class=\"headerlink\" title=\"野路子\"></a>野路子</h3><p><code>vue</code>隐式化实例，基本是这个套路，当然我在看<em>iview组件库</em>中用了一些其他的野路子，这里也贴一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Notification <span class=\"keyword\">from</span> <span class=\"string\">'./notification.vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> _props = properties || &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Instance = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    render (h) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h(Notification, &#123;</span><br><span class=\"line\">            props: _props</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>道理基本上和我说的差不多，不过调用<code>Vue.extend</code>更加容易理解。</p>\n<h3 id=\"后续控制\"><a href=\"#后续控制\" class=\"headerlink\" title=\"后续控制\"></a>后续控制</h3><p>拿到组件的实例后，基本上想怎么玩就能怎么玩了，比如说控制隐藏或显示，可以在组件内部定义一个<code>isShow</code>的<code>data</code>属性，在实例上可以这样用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>( xxxx ) &#123;</span><br><span class=\"line\">    messageWithDom.isShow = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    messageWithDom.isShow = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"react实例化\"><a href=\"#react实例化\" class=\"headerlink\" title=\"react实例化\"></a>react实例化</h2><p><code>react</code>的实例化和<code>vue</code>稍稍不同，首先引进来的直接就是一个类所以不需要像<code>Vue</code>一样多做一步转换成构造器，其次<code>react</code>是没有类似<code>vue</code>的<code>$mount</code>方法，这也是我一开始很疑惑的地方，后来突然想起来<code>react</code>把组件的挂载方法放到了<code>reactDom</code>这个包里面了。</p>\n<h3 id=\"创建一个虚拟dom\"><a href=\"#创建一个虚拟dom\" class=\"headerlink\" title=\"创建一个虚拟dom\"></a>创建一个虚拟dom</h3><p>这里需要调用<code>React.createElement</code>去创建一个虚拟dom，其实<code>vue</code>也能创建一个虚拟dom，参考上面<code>iview</code>的野路子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Message <span class=\"keyword\">from</span> <span class=\"string\">'./message.jsx'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> customProps = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 传给自组件的一些props</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Vnode = React.createElment(Message,&#123;<span class=\"attr\">props</span>:customProps&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"挂载并且拿到实例\"><a href=\"#挂载并且拿到实例\" class=\"headerlink\" title=\"挂载并且拿到实例\"></a>挂载并且拿到实例</h3><p><code>react</code>没有<code>$mount</code>方法，而是直接调用<code>reactDom</code>的<code>render</code>方法，相当于<code>vue</code>的两步直接一步完成:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDom <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> containner = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(containner)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把虚拟dom传入reactDom.render方法中，第二个参数是挂载的节点，并返回这个组件的实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> messageInstance = ReactDom.render(Vnode,containner)</span><br></pre></td></tr></table></figure>\n<h3 id=\"后续的控制\"><a href=\"#后续的控制\" class=\"headerlink\" title=\"后续的控制\"></a>后续的控制</h3><p>拿到组件的实例后，基本想怎么玩就能怎么玩了，但是<strong>别忘记了！！！</strong>，<code>react</code>修改<code>state</code>是调用<code>setState</code>，而不像<code>vue</code>直接修改。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>学会隐式化创建实例能够很好的看清楚<code>vue</code>和<code>react</code>内部的细节，对提高<code>vue</code>、<code>react</code>大有好处。我的一个项目有个加载条的组件，同时用<code>react</code>和<code>vue</code>都实现了一遍，可以对比学习发现两者的差异，喜欢的可以点个赞~~。</p>\n<ul>\n<li><a href=\"https://github.com/limengke123/fantastic-carnival/blob/master/admin/src/components/general/loading-bar/loading-bar.js#L6\" target=\"_blank\" rel=\"noopener\">loadingBar的vue实现</a></li>\n<li><a href=\"https://github.com/limengke123/fantastic-carnival/blob/master/client/src/components/common/loading-bar/loading-bar.js#L7\" target=\"_blank\" rel=\"noopener\">loadingBar的react实现</a></li>\n</ul>\n<hr>\n<p><img src=\"/2018/08/03/vue、react隐式实例化/596444702.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Wave\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Wave 1889</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue、react隐式实例化\"><a href=\"#vue、react隐式实例化\" class=\"headerlink\" title=\"vue、react隐式实例化\"></a>vue、react隐式实例化</h1><blockquote>\n<p>写这篇的缘由是因为上一篇<a href=\"https://github.com/limengke123/my-note/blob/master/%E5%89%8D%E7%AB%AF/vue%E4%B8%8Ereact%E7%BB%84%E4%BB%B6%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0.md\" target=\"_blank\" rel=\"noopener\">vue与react组件对比学习</a>写的有点啰嗦也没有写的很明白同时也存在一点错误，所以重新写一篇简介概要点的。</p>\n</blockquote>\n<h2 id=\"隐式实例化\"><a href=\"#隐式实例化\" class=\"headerlink\" title=\"隐式实例化\"></a>隐式实例化</h2><blockquote>\n<p>隐式实例化，不希望写在<code>react</code>的<code>jsx</code>里或是<code>vue</code>的<code>template</code>，而是希望通过手动去实例化一个<code>react</code>或是<code>vue</code>组件。</p>\n</blockquote>\n<p>说的有点绕，这种<em>隐式实例化</em>的应用场景在提示信息(message)、模态框(modal)、加载条(loadingbar)，例如一个<code>ajax</code>请求，在成功或失败的时候需要给一个提示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面是伪代码...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> message <span class=\"keyword\">from</span> <span class=\"string\">'message'</span></span><br><span class=\"line\"></span><br><span class=\"line\">fetch(<span class=\"string\">'/api/xxx'</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(resp.success === <span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            message(&#123;</span><br><span class=\"line\">                type:<span class=\"string\">\"success\"</span>,</span><br><span class=\"line\">                text:<span class=\"string\">\"请求成功\"</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            message(&#123;</span><br><span class=\"line\">                type:<span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">                text:<span class=\"string\">\"请求出错\"</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<p>可以看的出来，我们的需求是想有一个组件能像<code>html</code>原生的<code>alert</code>一样，在需要的地方能够直接去调用，而不是需要把<code>message</code>组件写进节点中。</p>\n<h2 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h2><p>我们都知道不论是<code>react</code>、还是<code>vue</code>也好，写的都是一个类或者叫构造器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// react 引用代码省略</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Message</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue</span></span><br><span class=\"line\"><span class=\"comment\">// export default &#123;</span></span><br><span class=\"line\">    data()&#123;&#125;,</span><br><span class=\"line\">    props:&#123;&#125;,</span><br><span class=\"line\">    methods:&#123;&#125;,</span><br><span class=\"line\">    render:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>react</code>相当明显地创建了一个<code>class</code>，<code>vue</code>表面上好像只是暴露一个对象，实际上<code>vue</code>的组件被使用时，你需要把子组件传入父组件的<code>component</code>的对象中，所以<code>Vue</code>会调用<code>Vue.extend({...自组建的选项对象})</code>，这个方法就返回了一个构造器。</p>\n<p>既然知道了子组件是一个构造器，那我能不能直接去手动<code>new</code>一个子组件呢？在我测试下来，好像是不行。</p>\n<h2 id=\"vue实例化\"><a href=\"#vue实例化\" class=\"headerlink\" title=\"vue实例化\"></a>vue实例化</h2><p>那么如何实例化呢？分成两部分，先是实例化一个组件，然后再把实例化后的组件挂载到html中去。先拿<code>vue</code>说：</p>\n<h3 id=\"拿到构造器\"><a href=\"#拿到构造器\" class=\"headerlink\" title=\"拿到构造器\"></a>拿到构造器</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> message <span class=\"keyword\">from</span> <span class=\"string\">'./message.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意： 这里的message仅仅就是一个对象，需要转成构造器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> messageConstructor = Vue.extend(message)</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> customProps = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 传给组件的一些props</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这样就能拿到了一个vue组件的实例，就能做很多事情了，比如调用实例中写好的methods中的方法，当然这还没完，我们还得把实例挂载到Html中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> messageInstance = <span class=\"keyword\">new</span> messageConstuctor(&#123;<span class=\"attr\">propsData</span>:customProps&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h3><p><code>vue</code>的实例有一个很重要的方法：<code>$mount</code>，在选项对象中我们没有传入<code>el</code>属性，所以你在这里手动实例化的<code>vue</code>实例是没有挂载出来的，需要手动调用一遍<code>$mount</code>，可以传入一个DOM节点做为挂载节点，当然也可以不传入参数，后面手动用<code>dom</code>方法把节点插入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里返回的messageWithDom依然还是vue实例而不是dom节点，但是这个实例多了一个$el属性，这个属性里面就藏着我们需要挂载的dom节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> messageWithDom = messageInstance.$mount()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dom = messageWithDom.$el</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(dom)</span><br></pre></td></tr></table></figure>\n<h3 id=\"野路子\"><a href=\"#野路子\" class=\"headerlink\" title=\"野路子\"></a>野路子</h3><p><code>vue</code>隐式化实例，基本是这个套路，当然我在看<em>iview组件库</em>中用了一些其他的野路子，这里也贴一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Notification <span class=\"keyword\">from</span> <span class=\"string\">'./notification.vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> _props = properties || &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Instance = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    render (h) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h(Notification, &#123;</span><br><span class=\"line\">            props: _props</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>道理基本上和我说的差不多，不过调用<code>Vue.extend</code>更加容易理解。</p>\n<h3 id=\"后续控制\"><a href=\"#后续控制\" class=\"headerlink\" title=\"后续控制\"></a>后续控制</h3><p>拿到组件的实例后，基本上想怎么玩就能怎么玩了，比如说控制隐藏或显示，可以在组件内部定义一个<code>isShow</code>的<code>data</code>属性，在实例上可以这样用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>( xxxx ) &#123;</span><br><span class=\"line\">    messageWithDom.isShow = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    messageWithDom.isShow = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"react实例化\"><a href=\"#react实例化\" class=\"headerlink\" title=\"react实例化\"></a>react实例化</h2><p><code>react</code>的实例化和<code>vue</code>稍稍不同，首先引进来的直接就是一个类所以不需要像<code>Vue</code>一样多做一步转换成构造器，其次<code>react</code>是没有类似<code>vue</code>的<code>$mount</code>方法，这也是我一开始很疑惑的地方，后来突然想起来<code>react</code>把组件的挂载方法放到了<code>reactDom</code>这个包里面了。</p>\n<h3 id=\"创建一个虚拟dom\"><a href=\"#创建一个虚拟dom\" class=\"headerlink\" title=\"创建一个虚拟dom\"></a>创建一个虚拟dom</h3><p>这里需要调用<code>React.createElement</code>去创建一个虚拟dom，其实<code>vue</code>也能创建一个虚拟dom，参考上面<code>iview</code>的野路子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Message <span class=\"keyword\">from</span> <span class=\"string\">'./message.jsx'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> customProps = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 传给自组件的一些props</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Vnode = React.createElment(Message,&#123;<span class=\"attr\">props</span>:customProps&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"挂载并且拿到实例\"><a href=\"#挂载并且拿到实例\" class=\"headerlink\" title=\"挂载并且拿到实例\"></a>挂载并且拿到实例</h3><p><code>react</code>没有<code>$mount</code>方法，而是直接调用<code>reactDom</code>的<code>render</code>方法，相当于<code>vue</code>的两步直接一步完成:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDom <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> containner = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(containner)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把虚拟dom传入reactDom.render方法中，第二个参数是挂载的节点，并返回这个组件的实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> messageInstance = ReactDom.render(Vnode,containner)</span><br></pre></td></tr></table></figure>\n<h3 id=\"后续的控制\"><a href=\"#后续的控制\" class=\"headerlink\" title=\"后续的控制\"></a>后续的控制</h3><p>拿到组件的实例后，基本想怎么玩就能怎么玩了，但是<strong>别忘记了！！！</strong>，<code>react</code>修改<code>state</code>是调用<code>setState</code>，而不像<code>vue</code>直接修改。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>学会隐式化创建实例能够很好的看清楚<code>vue</code>和<code>react</code>内部的细节，对提高<code>vue</code>、<code>react</code>大有好处。我的一个项目有个加载条的组件，同时用<code>react</code>和<code>vue</code>都实现了一遍，可以对比学习发现两者的差异，喜欢的可以点个赞~~。</p>\n<ul>\n<li><a href=\"https://github.com/limengke123/fantastic-carnival/blob/master/admin/src/components/general/loading-bar/loading-bar.js#L6\" target=\"_blank\" rel=\"noopener\">loadingBar的vue实现</a></li>\n<li><a href=\"https://github.com/limengke123/fantastic-carnival/blob/master/client/src/components/common/loading-bar/loading-bar.js#L7\" target=\"_blank\" rel=\"noopener\">loadingBar的react实现</a></li>\n</ul>\n<hr>\n<p><img src=\"/2018/08/03/vue、react隐式实例化/596444702.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Wave\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Wave 1889</p>\n</blockquote>\n"},{"title":"redux之createStore","date":"2018-08-03T05:00:20.000Z","_content":"\n# redux之createStore\n\n回顾一下 `redux` 的目录结构:\n\n.\\REDUX\\SRC\n│  applyMiddleware.js\n│  bindActionCreators.js\n│  combineReducers.js\n│  compose.js\n│  createStore.js\n│  index.js\n│\n└─utils\n        actionTypes.js\n        isPlainObject.js\n        warning.js\n\n`redux` 在 `index.js` 中一共暴露了5个 `API`, 上一篇文章讲了下和 `redux` 关联性不太大的 `compose` 。现在正式讲一讲最核心的 `createStore`。\n\n## createStore.js\n\n`createStore` 大概是长成这个样子的：\n\n```js\nimport $$observable from 'symbol-observable'\n\nimport ActionTypes from './utils/actionTypes'\nimport isPlainObject from './utils/isPlainObject'\n\nexport default function createStore(reducer, preloadedState, enhancer) {\n\n    // 1. 对传入参数的顺序处理\n    // 先忽略这一块\n\n    // 2. 变量的定义\n    let currentReducer = reducer\n    let currentState = preloadedState\n    let currentListeners = []\n    let nextListeners = currentListeners\n    let isDispatching = false\n\n    // 3. 一系列函数定义\n    function ensuerCanMutateNextListeners(){}\n\n    function getState(){}\n\n    function subscribe(listener){}\n\n    function dispatch(action){}\n\n    function replaceReducer(nextReducer){}\n\n    function observable(){}\n\n    // 4. dispatch一个初始化的action\n    dispatch({ type: ActionTypes.INIT })\n\n    // 5. 返回store对象\n    return {\n        dispatch,\n        subscribe,\n        getState,\n        replaceReducer,\n        [$$observable]: observable\n    }\n}\n```\n\n我们分别对这五块来看看。\n\n### 1. 参数的顺序处理\n\n这一步就是对传入给 `createStore` 的三个参数 `reducer` 、 `preloadedState` 、 `enhancer` 的顺序调整。\n\n```js\nexport default function createStore(reducer, preloadedState, enhancer) {\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    // 第二个参数是一个函数，没有第三个参数的情况\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n        // enhancer 不是函数就报错\n      throw new Error('Expected the enhancer to be a function.')\n    }\n    // enhancer就是高阶函数，强化了本身这个createStore的函数，拿到增强后的createStore函数去处理\n    // applyMiddleware这个函数还会涉及到这个\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n\n  if (typeof reducer !== 'function') {\n      // reducer不是函数报错\n    throw new Error('Expected the reducer to be a function.')\n  }\n\n  // 其他代码省略\n}\n```\n\n### 2. 变量的定义\n\n```js\n  let currentReducer = reducer\n  let currentState = preloadedState\n  let currentListeners = []\n  let nextListeners = currentListeners\n  let isDispatching = false\n```\n\n- `currentReducer` 当前 `store` 的 `reducer`，由 `createStore` 传入的第一个参数 `reducer` 初始化\n- `currentState` 保存当前整个 `state` 的状态,初始值就是 `createStore` 传进来的第二个参数 `preloadedState`,相当于 `store` 的初始值\n- `currentListeners` 当前的监听器，默认是空\n- `nextListeners` 下一个监听器，由 `currentListeners` 赋值\n- `isDispatching` 当前的 `store` 是否正在 `dispatch` 一个action\n\n全是闭包保存的变量\n\n### 3. 函数的定义\n\n在 `createStore` 的最后，`dispatch` 了一个 `{ type: ActionTypes.INIT }` 对象，那就按图索骥，从 `dispatch` 函数开始看。\n\n先把 `./utils` 下的三个辅助函数(`actionTypes` 、 `isPlainObject` 、`warning`)看一下：\n\nactionTypes:\n\n```js\nconst randomString = () =>\n  Math.random()\n    .toString(36)\n    .substring(7)\n    .split('')\n    .join('.')\n\nconst ActionTypes = {\n  INIT: `@@redux/INIT${randomString()}`,\n  REPLACE: `@@redux/REPLACE${randomString()}`,\n  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`\n}\n\nexport default ActionTypes\n```\n\n这里返回的都是随机的 `action.type`,为了区别常规业务开发写的 `action.type`，比如：`ActionTypes.INIT` 拿到的是一个类似与 `@@redux/INITg.f.m.0.0.4` 随机字符串,只有这样奇奇怪怪的随机数才不会和业务中定义的 `reducer` 所判断的 `type` 重复。\n\n---\n\nisPlainObject:\n\n判断函数是否是纯对象，`[1,23]`、`new Date()`这些都会返回 `false`。\n\n```js\nexport default function isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false\n\n  let proto = obj\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto)\n  }\n\n  return Object.getPrototypeOf(obj) === proto\n}\n```\n\n---\n\nwarning:\n\n就是一个报错函数\n\n```js\nexport default function warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message)\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message)\n  } catch (e) {} // eslint-disable-line no-empty\n}\n```\n\n#### dispatch\n\n`dispatch` 用过 `redux` 的都知道，这就是派发 `action` 的函数，把派发出去的 `action` 交由 `reducer` 处理。\n\n```js\nfunction dispatch(action) {\n    if (!isPlainObject(action)) {\n        // action不是纯对象报错\n      throw new Error(\n        'Actions must be plain objects. ' +\n          'Use custom middleware for async actions.'\n      )\n    }\n\n    if (typeof action.type === 'undefined') {\n        // action没有type属性也报错\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. ' +\n          'Have you misspelled a constant?'\n      )\n    }\n\n    if (isDispatching) {\n        // 这个store正在dispach别的action的时候不能再dispatch另外一个action\n      throw new Error('Reducers may not dispatch actions.')\n    }\n\n    try {\n        // 当前state和action交由当前的reducer处理\n        // 同时改变isDispatching 为 true 表明正在处理action中，不能dispatch新的action了\n      isDispatching = true\n      currentState = currentReducer(currentState, action)\n    } finally {\n        // 修改为 false ，可以dispatch新的action\n      isDispatching = false\n    }\n\n    // 赋值，最终 listeners 、 currentListeners 、nextListeners的值都是 nextListeners\n    const listeners = (currentListeners = nextListeners)\n    for (let i = 0; i < listeners.length; i++) {\n        // 遍历调用监听的函数\n      const listener = listeners[i]\n      listener()\n    }\n    // 返回这个action, 没什么作用\n    return action\n}\n```\n\n核心代码就是 `currentState = currentReducer(currentState, action)`，传入 `currentState`、`action` 给 `currentReducer`，`currentReducer` 把返回值赋值给了 `currentState`。\n\n#### subscribe\n\n订阅监听器。\n\n```js\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n        // 不给函数就报错\n      throw new Error('Expected the listener to be a function.')\n    }\n\n    if (isDispatching) {\n        // 正在dispatch一个store的时候是不能订阅监听器的\n      throw new Error(\n        'You may not call store.subscribe() while the reducer is executing. ' +\n          'If you would like to be notified after the store has been updated, subscribe from a ' +\n          'component and invoke store.getState() in the callback to access the latest state. ' +\n          'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'\n      )\n    }\n\n    // 给unsubscribe调用解除订阅标识\n    let isSubscribed = true\n\n    // 下面解释为什么要调用这个ensureCanMutateNextListeners函数\n    ensureCanMutateNextListeners()\n    // 就是简单的把传入的listeners放到nextListeners\n    nextListeners.push(listener)\n\n    // 返回一个解除订阅的函数\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return\n      }\n\n      if (isDispatching) {\n        throw new Error(\n          'You may not unsubscribe from a store listener while the reducer is executing. ' +\n            'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'\n        )\n      }\n\n      isSubscribed = false\n\n      ensureCanMutateNextListeners()\n      const index = nextListeners.indexOf(listener)\n      // 从 nextListeners 数组中移除\n      nextListeners.splice(index, 1)\n    }\n  }\n```\n\n订阅没什么问题，就是为啥用调用 `ensureCanMutateNextListeners` 呢？\n看一下这个函数：\n\n```js\n function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice()\n    }\n  }\n```\n\n这个函数就是检查 `nextListeners` 和 `currentListeners` 是否是相同的，如果是相同的就把 `currentListeners` 拷贝一个新的赋值给`nextListeners`。因为数组是引用类型的关系，如果 `nextListeners` 和 `currentListeners` 相同，像 `nextListeners` 中 `push` 新的 `listener` 的时候会直接影响到 `currentListeners` 的值。\n\n注意到另外一点，在 `dispatch` 函数的最后遍历 `listeners` 的时候，是这样操作的： `const listeners = (currentListeners = nextListeners)`，这里 `nextListeners` 和 `currentListeners` 就相同了。\n\n那么为啥内部需要有 `currentListeners` 和 `nextListeners`，主要是**通知订阅者的过程中发生了其他的订阅(`subscribe`)和退订(`unsubscribe`),那肯定会发生错误或者不确定性。**\n\n这里有[一篇文章](https://segmentfault.com/a/1190000010263353)论述到这个问题。\n\n#### getState\n\n简单的把 `store` 的 `currentState` 返回出来。\n\n```js\n  function getState() {\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.getState() while the reducer is executing. ' +\n          'The reducer has already received the state as an argument. ' +\n          'Pass it down from the top reducer instead of reading it from the store.'\n      )\n    }\n\n    return currentState\n  }\n```\n\n#### replaceReducer\n\n这个 `API` 帮你替换把原来的 `reducer` 替换成新的 `reducer`。\n\n```js\n function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.')\n    }\n\n    // nextReducer替换旧的reducer\n    currentReducer = nextReducer\n    // 注意这里也dispatch了一个随机action，和createStore的最后dispatch一个随机的初始化action功能是相同的，都是了初始化state\n    dispatch({ type: ActionTypes.REPLACE })\n  }\n```\n\n#### observable\n\n不懂，还是贴一下代码：\n\n```js\n  function observable() {\n    const outerSubscribe = subscribe\n    return {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.')\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState())\n          }\n        }\n\n        observeState()\n        const unsubscribe = outerSubscribe(observeState)\n        return { unsubscribe }\n      },\n\n      [$$observable]() {\n        return this\n      }\n    }\n  }\n```\n\n### 4. dispatch一个初始化的action\n\n```js\ndispatch({ type: ActionTypes.INIT })\n```\n\n在最后，`dispatch` 了一个 `type` 为随机值的 `action`， 我们业务的 `reducer` 中最后没有匹配到对用的 `action.type` 都会默认返回默认的 `state`, 而这个默认的 `state` 往往又在 `reducer` 函数最开始写的时候已经给好了默认值,这样 `dispatch` 的 `action` 与任何 `reducer` 都不匹配,所以拿到了所有 `reducer` 的默认值从而 `currentState` 就被更新成了 `reducer` 定义过的默认值。\n\n### 5. 返回的store对象\n\n把定义好的方法挂载到一个对象上面，这个对象就是 `store` 对象。\n\n```js\nreturn {\n    dispatch,\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  }\n```\n\n## 总结\n\n`redux` 的代码是真的简洁，代码的注释甚至比代码本身还要长，还是非常值得阅读的。\n\n---\n\n![Edvard Munch – Calvary](redux之createStore/565924812.jpg)\n\n> Edvard Munch – Calvary 1900\n","source":"_posts/redux之createStore.md","raw":"---\ntitle: redux之createStore\ndate: 2018-08-03 13:00:20\ntags:\n  - redux\n  - react\n  - 源码\ncategories: 前端\n---\n\n# redux之createStore\n\n回顾一下 `redux` 的目录结构:\n\n.\\REDUX\\SRC\n│  applyMiddleware.js\n│  bindActionCreators.js\n│  combineReducers.js\n│  compose.js\n│  createStore.js\n│  index.js\n│\n└─utils\n        actionTypes.js\n        isPlainObject.js\n        warning.js\n\n`redux` 在 `index.js` 中一共暴露了5个 `API`, 上一篇文章讲了下和 `redux` 关联性不太大的 `compose` 。现在正式讲一讲最核心的 `createStore`。\n\n## createStore.js\n\n`createStore` 大概是长成这个样子的：\n\n```js\nimport $$observable from 'symbol-observable'\n\nimport ActionTypes from './utils/actionTypes'\nimport isPlainObject from './utils/isPlainObject'\n\nexport default function createStore(reducer, preloadedState, enhancer) {\n\n    // 1. 对传入参数的顺序处理\n    // 先忽略这一块\n\n    // 2. 变量的定义\n    let currentReducer = reducer\n    let currentState = preloadedState\n    let currentListeners = []\n    let nextListeners = currentListeners\n    let isDispatching = false\n\n    // 3. 一系列函数定义\n    function ensuerCanMutateNextListeners(){}\n\n    function getState(){}\n\n    function subscribe(listener){}\n\n    function dispatch(action){}\n\n    function replaceReducer(nextReducer){}\n\n    function observable(){}\n\n    // 4. dispatch一个初始化的action\n    dispatch({ type: ActionTypes.INIT })\n\n    // 5. 返回store对象\n    return {\n        dispatch,\n        subscribe,\n        getState,\n        replaceReducer,\n        [$$observable]: observable\n    }\n}\n```\n\n我们分别对这五块来看看。\n\n### 1. 参数的顺序处理\n\n这一步就是对传入给 `createStore` 的三个参数 `reducer` 、 `preloadedState` 、 `enhancer` 的顺序调整。\n\n```js\nexport default function createStore(reducer, preloadedState, enhancer) {\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    // 第二个参数是一个函数，没有第三个参数的情况\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n        // enhancer 不是函数就报错\n      throw new Error('Expected the enhancer to be a function.')\n    }\n    // enhancer就是高阶函数，强化了本身这个createStore的函数，拿到增强后的createStore函数去处理\n    // applyMiddleware这个函数还会涉及到这个\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n\n  if (typeof reducer !== 'function') {\n      // reducer不是函数报错\n    throw new Error('Expected the reducer to be a function.')\n  }\n\n  // 其他代码省略\n}\n```\n\n### 2. 变量的定义\n\n```js\n  let currentReducer = reducer\n  let currentState = preloadedState\n  let currentListeners = []\n  let nextListeners = currentListeners\n  let isDispatching = false\n```\n\n- `currentReducer` 当前 `store` 的 `reducer`，由 `createStore` 传入的第一个参数 `reducer` 初始化\n- `currentState` 保存当前整个 `state` 的状态,初始值就是 `createStore` 传进来的第二个参数 `preloadedState`,相当于 `store` 的初始值\n- `currentListeners` 当前的监听器，默认是空\n- `nextListeners` 下一个监听器，由 `currentListeners` 赋值\n- `isDispatching` 当前的 `store` 是否正在 `dispatch` 一个action\n\n全是闭包保存的变量\n\n### 3. 函数的定义\n\n在 `createStore` 的最后，`dispatch` 了一个 `{ type: ActionTypes.INIT }` 对象，那就按图索骥，从 `dispatch` 函数开始看。\n\n先把 `./utils` 下的三个辅助函数(`actionTypes` 、 `isPlainObject` 、`warning`)看一下：\n\nactionTypes:\n\n```js\nconst randomString = () =>\n  Math.random()\n    .toString(36)\n    .substring(7)\n    .split('')\n    .join('.')\n\nconst ActionTypes = {\n  INIT: `@@redux/INIT${randomString()}`,\n  REPLACE: `@@redux/REPLACE${randomString()}`,\n  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`\n}\n\nexport default ActionTypes\n```\n\n这里返回的都是随机的 `action.type`,为了区别常规业务开发写的 `action.type`，比如：`ActionTypes.INIT` 拿到的是一个类似与 `@@redux/INITg.f.m.0.0.4` 随机字符串,只有这样奇奇怪怪的随机数才不会和业务中定义的 `reducer` 所判断的 `type` 重复。\n\n---\n\nisPlainObject:\n\n判断函数是否是纯对象，`[1,23]`、`new Date()`这些都会返回 `false`。\n\n```js\nexport default function isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false\n\n  let proto = obj\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto)\n  }\n\n  return Object.getPrototypeOf(obj) === proto\n}\n```\n\n---\n\nwarning:\n\n就是一个报错函数\n\n```js\nexport default function warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message)\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message)\n  } catch (e) {} // eslint-disable-line no-empty\n}\n```\n\n#### dispatch\n\n`dispatch` 用过 `redux` 的都知道，这就是派发 `action` 的函数，把派发出去的 `action` 交由 `reducer` 处理。\n\n```js\nfunction dispatch(action) {\n    if (!isPlainObject(action)) {\n        // action不是纯对象报错\n      throw new Error(\n        'Actions must be plain objects. ' +\n          'Use custom middleware for async actions.'\n      )\n    }\n\n    if (typeof action.type === 'undefined') {\n        // action没有type属性也报错\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. ' +\n          'Have you misspelled a constant?'\n      )\n    }\n\n    if (isDispatching) {\n        // 这个store正在dispach别的action的时候不能再dispatch另外一个action\n      throw new Error('Reducers may not dispatch actions.')\n    }\n\n    try {\n        // 当前state和action交由当前的reducer处理\n        // 同时改变isDispatching 为 true 表明正在处理action中，不能dispatch新的action了\n      isDispatching = true\n      currentState = currentReducer(currentState, action)\n    } finally {\n        // 修改为 false ，可以dispatch新的action\n      isDispatching = false\n    }\n\n    // 赋值，最终 listeners 、 currentListeners 、nextListeners的值都是 nextListeners\n    const listeners = (currentListeners = nextListeners)\n    for (let i = 0; i < listeners.length; i++) {\n        // 遍历调用监听的函数\n      const listener = listeners[i]\n      listener()\n    }\n    // 返回这个action, 没什么作用\n    return action\n}\n```\n\n核心代码就是 `currentState = currentReducer(currentState, action)`，传入 `currentState`、`action` 给 `currentReducer`，`currentReducer` 把返回值赋值给了 `currentState`。\n\n#### subscribe\n\n订阅监听器。\n\n```js\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n        // 不给函数就报错\n      throw new Error('Expected the listener to be a function.')\n    }\n\n    if (isDispatching) {\n        // 正在dispatch一个store的时候是不能订阅监听器的\n      throw new Error(\n        'You may not call store.subscribe() while the reducer is executing. ' +\n          'If you would like to be notified after the store has been updated, subscribe from a ' +\n          'component and invoke store.getState() in the callback to access the latest state. ' +\n          'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'\n      )\n    }\n\n    // 给unsubscribe调用解除订阅标识\n    let isSubscribed = true\n\n    // 下面解释为什么要调用这个ensureCanMutateNextListeners函数\n    ensureCanMutateNextListeners()\n    // 就是简单的把传入的listeners放到nextListeners\n    nextListeners.push(listener)\n\n    // 返回一个解除订阅的函数\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return\n      }\n\n      if (isDispatching) {\n        throw new Error(\n          'You may not unsubscribe from a store listener while the reducer is executing. ' +\n            'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'\n        )\n      }\n\n      isSubscribed = false\n\n      ensureCanMutateNextListeners()\n      const index = nextListeners.indexOf(listener)\n      // 从 nextListeners 数组中移除\n      nextListeners.splice(index, 1)\n    }\n  }\n```\n\n订阅没什么问题，就是为啥用调用 `ensureCanMutateNextListeners` 呢？\n看一下这个函数：\n\n```js\n function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice()\n    }\n  }\n```\n\n这个函数就是检查 `nextListeners` 和 `currentListeners` 是否是相同的，如果是相同的就把 `currentListeners` 拷贝一个新的赋值给`nextListeners`。因为数组是引用类型的关系，如果 `nextListeners` 和 `currentListeners` 相同，像 `nextListeners` 中 `push` 新的 `listener` 的时候会直接影响到 `currentListeners` 的值。\n\n注意到另外一点，在 `dispatch` 函数的最后遍历 `listeners` 的时候，是这样操作的： `const listeners = (currentListeners = nextListeners)`，这里 `nextListeners` 和 `currentListeners` 就相同了。\n\n那么为啥内部需要有 `currentListeners` 和 `nextListeners`，主要是**通知订阅者的过程中发生了其他的订阅(`subscribe`)和退订(`unsubscribe`),那肯定会发生错误或者不确定性。**\n\n这里有[一篇文章](https://segmentfault.com/a/1190000010263353)论述到这个问题。\n\n#### getState\n\n简单的把 `store` 的 `currentState` 返回出来。\n\n```js\n  function getState() {\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.getState() while the reducer is executing. ' +\n          'The reducer has already received the state as an argument. ' +\n          'Pass it down from the top reducer instead of reading it from the store.'\n      )\n    }\n\n    return currentState\n  }\n```\n\n#### replaceReducer\n\n这个 `API` 帮你替换把原来的 `reducer` 替换成新的 `reducer`。\n\n```js\n function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.')\n    }\n\n    // nextReducer替换旧的reducer\n    currentReducer = nextReducer\n    // 注意这里也dispatch了一个随机action，和createStore的最后dispatch一个随机的初始化action功能是相同的，都是了初始化state\n    dispatch({ type: ActionTypes.REPLACE })\n  }\n```\n\n#### observable\n\n不懂，还是贴一下代码：\n\n```js\n  function observable() {\n    const outerSubscribe = subscribe\n    return {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.')\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState())\n          }\n        }\n\n        observeState()\n        const unsubscribe = outerSubscribe(observeState)\n        return { unsubscribe }\n      },\n\n      [$$observable]() {\n        return this\n      }\n    }\n  }\n```\n\n### 4. dispatch一个初始化的action\n\n```js\ndispatch({ type: ActionTypes.INIT })\n```\n\n在最后，`dispatch` 了一个 `type` 为随机值的 `action`， 我们业务的 `reducer` 中最后没有匹配到对用的 `action.type` 都会默认返回默认的 `state`, 而这个默认的 `state` 往往又在 `reducer` 函数最开始写的时候已经给好了默认值,这样 `dispatch` 的 `action` 与任何 `reducer` 都不匹配,所以拿到了所有 `reducer` 的默认值从而 `currentState` 就被更新成了 `reducer` 定义过的默认值。\n\n### 5. 返回的store对象\n\n把定义好的方法挂载到一个对象上面，这个对象就是 `store` 对象。\n\n```js\nreturn {\n    dispatch,\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  }\n```\n\n## 总结\n\n`redux` 的代码是真的简洁，代码的注释甚至比代码本身还要长，还是非常值得阅读的。\n\n---\n\n![Edvard Munch – Calvary](redux之createStore/565924812.jpg)\n\n> Edvard Munch – Calvary 1900\n","slug":"redux之createStore","published":1,"updated":"2018-08-26T03:52:41.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbgc000gssv6pyfwhu9t","content":"<h1 id=\"redux之createStore\"><a href=\"#redux之createStore\" class=\"headerlink\" title=\"redux之createStore\"></a>redux之createStore</h1><p>回顾一下 <code>redux</code> 的目录结构:</p>\n<p>.\\REDUX\\SRC<br>│  applyMiddleware.js<br>│  bindActionCreators.js<br>│  combineReducers.js<br>│  compose.js<br>│  createStore.js<br>│  index.js<br>│<br>└─utils<br>        actionTypes.js<br>        isPlainObject.js<br>        warning.js</p>\n<p><code>redux</code> 在 <code>index.js</code> 中一共暴露了5个 <code>API</code>, 上一篇文章讲了下和 <code>redux</code> 关联性不太大的 <code>compose</code> 。现在正式讲一讲最核心的 <code>createStore</code>。</p>\n<h2 id=\"createStore-js\"><a href=\"#createStore-js\" class=\"headerlink\" title=\"createStore.js\"></a>createStore.js</h2><p><code>createStore</code> 大概是长成这个样子的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $$observable <span class=\"keyword\">from</span> <span class=\"string\">'symbol-observable'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ActionTypes <span class=\"keyword\">from</span> <span class=\"string\">'./utils/actionTypes'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> isPlainObject <span class=\"keyword\">from</span> <span class=\"string\">'./utils/isPlainObject'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1. 对传入参数的顺序处理</span></span><br><span class=\"line\">    <span class=\"comment\">// 先忽略这一块</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. 变量的定义</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentReducer = reducer</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentState = preloadedState</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentListeners = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextListeners = currentListeners</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isDispatching = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3. 一系列函数定义</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ensuerCanMutateNextListeners</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">listener</span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceReducer</span>(<span class=\"params\">nextReducer</span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observable</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4. dispatch一个初始化的action</span></span><br><span class=\"line\">    dispatch(&#123; <span class=\"attr\">type</span>: ActionTypes.INIT &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 5. 返回store对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        dispatch,</span><br><span class=\"line\">        subscribe,</span><br><span class=\"line\">        getState,</span><br><span class=\"line\">        replaceReducer,</span><br><span class=\"line\">        [$$observable]: observable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们分别对这五块来看看。</p>\n<h3 id=\"1-参数的顺序处理\"><a href=\"#1-参数的顺序处理\" class=\"headerlink\" title=\"1. 参数的顺序处理\"></a>1. 参数的顺序处理</h3><p>这一步就是对传入给 <code>createStore</code> 的三个参数 <code>reducer</code> 、 <code>preloadedState</code> 、 <code>enhancer</code> 的顺序调整。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第二个参数是一个函数，没有第三个参数的情况</span></span><br><span class=\"line\">    enhancer = preloadedState</span><br><span class=\"line\">    preloadedState = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// enhancer 不是函数就报错</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the enhancer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// enhancer就是高阶函数，强化了本身这个createStore的函数，拿到增强后的createStore函数去处理</span></span><br><span class=\"line\">    <span class=\"comment\">// applyMiddleware这个函数还会涉及到这个</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// reducer不是函数报错</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the reducer to be a function.'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 其他代码省略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-变量的定义\"><a href=\"#2-变量的定义\" class=\"headerlink\" title=\"2. 变量的定义\"></a>2. 变量的定义</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> currentReducer = reducer</span><br><span class=\"line\"><span class=\"keyword\">let</span> currentState = preloadedState</span><br><span class=\"line\"><span class=\"keyword\">let</span> currentListeners = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> nextListeners = currentListeners</span><br><span class=\"line\"><span class=\"keyword\">let</span> isDispatching = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>currentReducer</code> 当前 <code>store</code> 的 <code>reducer</code>，由 <code>createStore</code> 传入的第一个参数 <code>reducer</code> 初始化</li>\n<li><code>currentState</code> 保存当前整个 <code>state</code> 的状态,初始值就是 <code>createStore</code> 传进来的第二个参数 <code>preloadedState</code>,相当于 <code>store</code> 的初始值</li>\n<li><code>currentListeners</code> 当前的监听器，默认是空</li>\n<li><code>nextListeners</code> 下一个监听器，由 <code>currentListeners</code> 赋值</li>\n<li><code>isDispatching</code> 当前的 <code>store</code> 是否正在 <code>dispatch</code> 一个action</li>\n</ul>\n<p>全是闭包保存的变量</p>\n<h3 id=\"3-函数的定义\"><a href=\"#3-函数的定义\" class=\"headerlink\" title=\"3. 函数的定义\"></a>3. 函数的定义</h3><p>在 <code>createStore</code> 的最后，<code>dispatch</code> 了一个 <code>{ type: ActionTypes.INIT }</code> 对象，那就按图索骥，从 <code>dispatch</code> 函数开始看。</p>\n<p>先把 <code>./utils</code> 下的三个辅助函数(<code>actionTypes</code> 、 <code>isPlainObject</code> 、<code>warning</code>)看一下：</p>\n<p>actionTypes:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomString = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\">    .toString(<span class=\"number\">36</span>)</span><br><span class=\"line\">    .substring(<span class=\"number\">7</span>)</span><br><span class=\"line\">    .split(<span class=\"string\">''</span>)</span><br><span class=\"line\">    .join(<span class=\"string\">'.'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ActionTypes = &#123;</span><br><span class=\"line\">  INIT: <span class=\"string\">`@@redux/INIT<span class=\"subst\">$&#123;randomString()&#125;</span>`</span>,</span><br><span class=\"line\">  REPLACE: <span class=\"string\">`@@redux/REPLACE<span class=\"subst\">$&#123;randomString()&#125;</span>`</span>,</span><br><span class=\"line\">  PROBE_UNKNOWN_ACTION: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">`@@redux/PROBE_UNKNOWN_ACTION<span class=\"subst\">$&#123;randomString()&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ActionTypes</span><br></pre></td></tr></table></figure>\n<p>这里返回的都是随机的 <code>action.type</code>,为了区别常规业务开发写的 <code>action.type</code>，比如：<code>ActionTypes.INIT</code> 拿到的是一个类似与 <code>@@redux/INITg.f.m.0.0.4</code> 随机字符串,只有这样奇奇怪怪的随机数才不会和业务中定义的 <code>reducer</code> 所判断的 <code>type</code> 重复。</p>\n<hr>\n<p>isPlainObject:</p>\n<p>判断函数是否是纯对象，<code>[1,23]</code>、<code>new Date()</code>这些都会返回 <code>false</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPlainObject</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span> || obj === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> proto = obj</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">Object</span>.getPrototypeOf(proto) !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    proto = <span class=\"built_in\">Object</span>.getPrototypeOf(proto)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.getPrototypeOf(obj) === proto</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>warning:</p>\n<p>就是一个报错函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">warning</span>(<span class=\"params\">message</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* eslint-disable no-console */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span>.error === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(message)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* eslint-enable no-console */</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This error was thrown as a convenience so that if you enable</span></span><br><span class=\"line\">    <span class=\"comment\">// \"break on all exceptions\" in your console,</span></span><br><span class=\"line\">    <span class=\"comment\">// it would pause the execution at this line.</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(message)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;&#125; <span class=\"comment\">// eslint-disable-line no-empty</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"dispatch\"><a href=\"#dispatch\" class=\"headerlink\" title=\"dispatch\"></a>dispatch</h4><p><code>dispatch</code> 用过 <code>redux</code> 的都知道，这就是派发 <code>action</code> 的函数，把派发出去的 <code>action</code> 交由 <code>reducer</code> 处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isPlainObject(action)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// action不是纯对象报错</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Actions must be plain objects. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Use custom middleware for async actions.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> action.type === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// action没有type属性也报错</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Actions may not have an undefined \"type\" property. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Have you misspelled a constant?'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个store正在dispach别的action的时候不能再dispatch另外一个action</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Reducers may not dispatch actions.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前state和action交由当前的reducer处理</span></span><br><span class=\"line\">        <span class=\"comment\">// 同时改变isDispatching 为 true 表明正在处理action中，不能dispatch新的action了</span></span><br><span class=\"line\">      isDispatching = <span class=\"literal\">true</span></span><br><span class=\"line\">      currentState = currentReducer(currentState, action)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 修改为 false ，可以dispatch新的action</span></span><br><span class=\"line\">      isDispatching = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 赋值，最终 listeners 、 currentListeners 、nextListeners的值都是 nextListeners</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> listeners = (currentListeners = nextListeners)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历调用监听的函数</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> listener = listeners[i]</span><br><span class=\"line\">      listener()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 返回这个action, 没什么作用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> action</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>核心代码就是 <code>currentState = currentReducer(currentState, action)</code>，传入 <code>currentState</code>、<code>action</code> 给 <code>currentReducer</code>，<code>currentReducer</code> 把返回值赋值给了 <code>currentState</code>。</p>\n<h4 id=\"subscribe\"><a href=\"#subscribe\" class=\"headerlink\" title=\"subscribe\"></a>subscribe</h4><p>订阅监听器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">listener</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listener !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不给函数就报错</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the listener to be a function.'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 正在dispatch一个store的时候是不能订阅监听器的</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">'You may not call store.subscribe() while the reducer is executing. '</span> +</span><br><span class=\"line\">        <span class=\"string\">'If you would like to be notified after the store has been updated, subscribe from a '</span> +</span><br><span class=\"line\">        <span class=\"string\">'component and invoke store.getState() in the callback to access the latest state. '</span> +</span><br><span class=\"line\">        <span class=\"string\">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 给unsubscribe调用解除订阅标识</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> isSubscribed = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 下面解释为什么要调用这个ensureCanMutateNextListeners函数</span></span><br><span class=\"line\">  ensureCanMutateNextListeners()</span><br><span class=\"line\">  <span class=\"comment\">// 就是简单的把传入的listeners放到nextListeners</span></span><br><span class=\"line\">  nextListeners.push(listener)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个解除订阅的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unsubscribe</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isSubscribed) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'You may not unsubscribe from a store listener while the reducer is executing. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    isSubscribed = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ensureCanMutateNextListeners()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = nextListeners.indexOf(listener)</span><br><span class=\"line\">    <span class=\"comment\">// 从 nextListeners 数组中移除</span></span><br><span class=\"line\">    nextListeners.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>订阅没什么问题，就是为啥用调用 <code>ensureCanMutateNextListeners</code> 呢？<br>看一下这个函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ensureCanMutateNextListeners</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (nextListeners === currentListeners) &#123;</span><br><span class=\"line\">     nextListeners = currentListeners.slice()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数就是检查 <code>nextListeners</code> 和 <code>currentListeners</code> 是否是相同的，如果是相同的就把 <code>currentListeners</code> 拷贝一个新的赋值给<code>nextListeners</code>。因为数组是引用类型的关系，如果 <code>nextListeners</code> 和 <code>currentListeners</code> 相同，像 <code>nextListeners</code> 中 <code>push</code> 新的 <code>listener</code> 的时候会直接影响到 <code>currentListeners</code> 的值。</p>\n<p>注意到另外一点，在 <code>dispatch</code> 函数的最后遍历 <code>listeners</code> 的时候，是这样操作的： <code>const listeners = (currentListeners = nextListeners)</code>，这里 <code>nextListeners</code> 和 <code>currentListeners</code> 就相同了。</p>\n<p>那么为啥内部需要有 <code>currentListeners</code> 和 <code>nextListeners</code>，主要是<strong>通知订阅者的过程中发生了其他的订阅(<code>subscribe</code>)和退订(<code>unsubscribe</code>),那肯定会发生错误或者不确定性。</strong></p>\n<p>这里有<a href=\"https://segmentfault.com/a/1190000010263353\" target=\"_blank\" rel=\"noopener\">一篇文章</a>论述到这个问题。</p>\n<h4 id=\"getState\"><a href=\"#getState\" class=\"headerlink\" title=\"getState\"></a>getState</h4><p>简单的把 <code>store</code> 的 <code>currentState</code> 返回出来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">'You may not call store.getState() while the reducer is executing. '</span> +</span><br><span class=\"line\">        <span class=\"string\">'The reducer has already received the state as an argument. '</span> +</span><br><span class=\"line\">        <span class=\"string\">'Pass it down from the top reducer instead of reading it from the store.'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentState</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"replaceReducer\"><a href=\"#replaceReducer\" class=\"headerlink\" title=\"replaceReducer\"></a>replaceReducer</h4><p>这个 <code>API</code> 帮你替换把原来的 <code>reducer</code> 替换成新的 <code>reducer</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceReducer</span>(<span class=\"params\">nextReducer</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextReducer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the nextReducer to be a function.'</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// nextReducer替换旧的reducer</span></span><br><span class=\"line\">   currentReducer = nextReducer</span><br><span class=\"line\">   <span class=\"comment\">// 注意这里也dispatch了一个随机action，和createStore的最后dispatch一个随机的初始化action功能是相同的，都是了初始化state</span></span><br><span class=\"line\">   dispatch(&#123; <span class=\"attr\">type</span>: ActionTypes.REPLACE &#125;)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"observable\"><a href=\"#observable\" class=\"headerlink\" title=\"observable\"></a>observable</h4><p>不懂，还是贴一下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observable</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> outerSubscribe = subscribe</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The minimal observable subscription method.</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;Object&#125; observer Any object that can be used as an observer.</span></span><br><span class=\"line\"><span class=\"comment\">     * The observer object should have a `next` method.</span></span><br><span class=\"line\"><span class=\"comment\">     * @returns &#123;subscription&#125; An object with an `unsubscribe` method that can</span></span><br><span class=\"line\"><span class=\"comment\">     * be used to unsubscribe the observable from the store, and prevent further</span></span><br><span class=\"line\"><span class=\"comment\">     * emission of values from the observable.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    subscribe(observer) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> observer !== <span class=\"string\">'object'</span> || observer === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Expected the observer to be an object.'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observeState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observer.next) &#123;</span><br><span class=\"line\">          observer.next(getState())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      observeState()</span><br><span class=\"line\">      <span class=\"keyword\">const</span> unsubscribe = outerSubscribe(observeState)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; unsubscribe &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    [$$observable]() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-dispatch一个初始化的action\"><a href=\"#4-dispatch一个初始化的action\" class=\"headerlink\" title=\"4. dispatch一个初始化的action\"></a>4. dispatch一个初始化的action</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch(&#123; <span class=\"attr\">type</span>: ActionTypes.INIT &#125;)</span><br></pre></td></tr></table></figure>\n<p>在最后，<code>dispatch</code> 了一个 <code>type</code> 为随机值的 <code>action</code>， 我们业务的 <code>reducer</code> 中最后没有匹配到对用的 <code>action.type</code> 都会默认返回默认的 <code>state</code>, 而这个默认的 <code>state</code> 往往又在 <code>reducer</code> 函数最开始写的时候已经给好了默认值,这样 <code>dispatch</code> 的 <code>action</code> 与任何 <code>reducer</code> 都不匹配,所以拿到了所有 <code>reducer</code> 的默认值从而 <code>currentState</code> 就被更新成了 <code>reducer</code> 定义过的默认值。</p>\n<h3 id=\"5-返回的store对象\"><a href=\"#5-返回的store对象\" class=\"headerlink\" title=\"5. 返回的store对象\"></a>5. 返回的store对象</h3><p>把定义好的方法挂载到一个对象上面，这个对象就是 <code>store</code> 对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    subscribe,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">    replaceReducer,</span><br><span class=\"line\">    [$$observable]: observable</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>redux</code> 的代码是真的简洁，代码的注释甚至比代码本身还要长，还是非常值得阅读的。</p>\n<hr>\n<p><img src=\"/2018/08/03/redux之createStore/565924812.jpg\" alt=\"Edvard Munch – Calvary\"></p>\n<blockquote>\n<p>Edvard Munch – Calvary 1900</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"redux之createStore\"><a href=\"#redux之createStore\" class=\"headerlink\" title=\"redux之createStore\"></a>redux之createStore</h1><p>回顾一下 <code>redux</code> 的目录结构:</p>\n<p>.\\REDUX\\SRC<br>│  applyMiddleware.js<br>│  bindActionCreators.js<br>│  combineReducers.js<br>│  compose.js<br>│  createStore.js<br>│  index.js<br>│<br>└─utils<br>        actionTypes.js<br>        isPlainObject.js<br>        warning.js</p>\n<p><code>redux</code> 在 <code>index.js</code> 中一共暴露了5个 <code>API</code>, 上一篇文章讲了下和 <code>redux</code> 关联性不太大的 <code>compose</code> 。现在正式讲一讲最核心的 <code>createStore</code>。</p>\n<h2 id=\"createStore-js\"><a href=\"#createStore-js\" class=\"headerlink\" title=\"createStore.js\"></a>createStore.js</h2><p><code>createStore</code> 大概是长成这个样子的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $$observable <span class=\"keyword\">from</span> <span class=\"string\">'symbol-observable'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ActionTypes <span class=\"keyword\">from</span> <span class=\"string\">'./utils/actionTypes'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> isPlainObject <span class=\"keyword\">from</span> <span class=\"string\">'./utils/isPlainObject'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1. 对传入参数的顺序处理</span></span><br><span class=\"line\">    <span class=\"comment\">// 先忽略这一块</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. 变量的定义</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentReducer = reducer</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentState = preloadedState</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentListeners = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextListeners = currentListeners</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isDispatching = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3. 一系列函数定义</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ensuerCanMutateNextListeners</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">listener</span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceReducer</span>(<span class=\"params\">nextReducer</span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observable</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4. dispatch一个初始化的action</span></span><br><span class=\"line\">    dispatch(&#123; <span class=\"attr\">type</span>: ActionTypes.INIT &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 5. 返回store对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        dispatch,</span><br><span class=\"line\">        subscribe,</span><br><span class=\"line\">        getState,</span><br><span class=\"line\">        replaceReducer,</span><br><span class=\"line\">        [$$observable]: observable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们分别对这五块来看看。</p>\n<h3 id=\"1-参数的顺序处理\"><a href=\"#1-参数的顺序处理\" class=\"headerlink\" title=\"1. 参数的顺序处理\"></a>1. 参数的顺序处理</h3><p>这一步就是对传入给 <code>createStore</code> 的三个参数 <code>reducer</code> 、 <code>preloadedState</code> 、 <code>enhancer</code> 的顺序调整。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第二个参数是一个函数，没有第三个参数的情况</span></span><br><span class=\"line\">    enhancer = preloadedState</span><br><span class=\"line\">    preloadedState = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// enhancer 不是函数就报错</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the enhancer to be a function.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// enhancer就是高阶函数，强化了本身这个createStore的函数，拿到增强后的createStore函数去处理</span></span><br><span class=\"line\">    <span class=\"comment\">// applyMiddleware这个函数还会涉及到这个</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// reducer不是函数报错</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the reducer to be a function.'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 其他代码省略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-变量的定义\"><a href=\"#2-变量的定义\" class=\"headerlink\" title=\"2. 变量的定义\"></a>2. 变量的定义</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> currentReducer = reducer</span><br><span class=\"line\"><span class=\"keyword\">let</span> currentState = preloadedState</span><br><span class=\"line\"><span class=\"keyword\">let</span> currentListeners = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> nextListeners = currentListeners</span><br><span class=\"line\"><span class=\"keyword\">let</span> isDispatching = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>currentReducer</code> 当前 <code>store</code> 的 <code>reducer</code>，由 <code>createStore</code> 传入的第一个参数 <code>reducer</code> 初始化</li>\n<li><code>currentState</code> 保存当前整个 <code>state</code> 的状态,初始值就是 <code>createStore</code> 传进来的第二个参数 <code>preloadedState</code>,相当于 <code>store</code> 的初始值</li>\n<li><code>currentListeners</code> 当前的监听器，默认是空</li>\n<li><code>nextListeners</code> 下一个监听器，由 <code>currentListeners</code> 赋值</li>\n<li><code>isDispatching</code> 当前的 <code>store</code> 是否正在 <code>dispatch</code> 一个action</li>\n</ul>\n<p>全是闭包保存的变量</p>\n<h3 id=\"3-函数的定义\"><a href=\"#3-函数的定义\" class=\"headerlink\" title=\"3. 函数的定义\"></a>3. 函数的定义</h3><p>在 <code>createStore</code> 的最后，<code>dispatch</code> 了一个 <code>{ type: ActionTypes.INIT }</code> 对象，那就按图索骥，从 <code>dispatch</code> 函数开始看。</p>\n<p>先把 <code>./utils</code> 下的三个辅助函数(<code>actionTypes</code> 、 <code>isPlainObject</code> 、<code>warning</code>)看一下：</p>\n<p>actionTypes:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomString = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\">    .toString(<span class=\"number\">36</span>)</span><br><span class=\"line\">    .substring(<span class=\"number\">7</span>)</span><br><span class=\"line\">    .split(<span class=\"string\">''</span>)</span><br><span class=\"line\">    .join(<span class=\"string\">'.'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ActionTypes = &#123;</span><br><span class=\"line\">  INIT: <span class=\"string\">`@@redux/INIT<span class=\"subst\">$&#123;randomString()&#125;</span>`</span>,</span><br><span class=\"line\">  REPLACE: <span class=\"string\">`@@redux/REPLACE<span class=\"subst\">$&#123;randomString()&#125;</span>`</span>,</span><br><span class=\"line\">  PROBE_UNKNOWN_ACTION: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">`@@redux/PROBE_UNKNOWN_ACTION<span class=\"subst\">$&#123;randomString()&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ActionTypes</span><br></pre></td></tr></table></figure>\n<p>这里返回的都是随机的 <code>action.type</code>,为了区别常规业务开发写的 <code>action.type</code>，比如：<code>ActionTypes.INIT</code> 拿到的是一个类似与 <code>@@redux/INITg.f.m.0.0.4</code> 随机字符串,只有这样奇奇怪怪的随机数才不会和业务中定义的 <code>reducer</code> 所判断的 <code>type</code> 重复。</p>\n<hr>\n<p>isPlainObject:</p>\n<p>判断函数是否是纯对象，<code>[1,23]</code>、<code>new Date()</code>这些都会返回 <code>false</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPlainObject</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span> || obj === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> proto = obj</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">Object</span>.getPrototypeOf(proto) !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    proto = <span class=\"built_in\">Object</span>.getPrototypeOf(proto)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.getPrototypeOf(obj) === proto</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>warning:</p>\n<p>就是一个报错函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">warning</span>(<span class=\"params\">message</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* eslint-disable no-console */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span>.error === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(message)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* eslint-enable no-console */</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This error was thrown as a convenience so that if you enable</span></span><br><span class=\"line\">    <span class=\"comment\">// \"break on all exceptions\" in your console,</span></span><br><span class=\"line\">    <span class=\"comment\">// it would pause the execution at this line.</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(message)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;&#125; <span class=\"comment\">// eslint-disable-line no-empty</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"dispatch\"><a href=\"#dispatch\" class=\"headerlink\" title=\"dispatch\"></a>dispatch</h4><p><code>dispatch</code> 用过 <code>redux</code> 的都知道，这就是派发 <code>action</code> 的函数，把派发出去的 <code>action</code> 交由 <code>reducer</code> 处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isPlainObject(action)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// action不是纯对象报错</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Actions must be plain objects. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Use custom middleware for async actions.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> action.type === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// action没有type属性也报错</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Actions may not have an undefined \"type\" property. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'Have you misspelled a constant?'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个store正在dispach别的action的时候不能再dispatch另外一个action</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Reducers may not dispatch actions.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前state和action交由当前的reducer处理</span></span><br><span class=\"line\">        <span class=\"comment\">// 同时改变isDispatching 为 true 表明正在处理action中，不能dispatch新的action了</span></span><br><span class=\"line\">      isDispatching = <span class=\"literal\">true</span></span><br><span class=\"line\">      currentState = currentReducer(currentState, action)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 修改为 false ，可以dispatch新的action</span></span><br><span class=\"line\">      isDispatching = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 赋值，最终 listeners 、 currentListeners 、nextListeners的值都是 nextListeners</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> listeners = (currentListeners = nextListeners)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历调用监听的函数</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> listener = listeners[i]</span><br><span class=\"line\">      listener()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 返回这个action, 没什么作用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> action</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>核心代码就是 <code>currentState = currentReducer(currentState, action)</code>，传入 <code>currentState</code>、<code>action</code> 给 <code>currentReducer</code>，<code>currentReducer</code> 把返回值赋值给了 <code>currentState</code>。</p>\n<h4 id=\"subscribe\"><a href=\"#subscribe\" class=\"headerlink\" title=\"subscribe\"></a>subscribe</h4><p>订阅监听器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span>(<span class=\"params\">listener</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listener !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不给函数就报错</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the listener to be a function.'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 正在dispatch一个store的时候是不能订阅监听器的</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">'You may not call store.subscribe() while the reducer is executing. '</span> +</span><br><span class=\"line\">        <span class=\"string\">'If you would like to be notified after the store has been updated, subscribe from a '</span> +</span><br><span class=\"line\">        <span class=\"string\">'component and invoke store.getState() in the callback to access the latest state. '</span> +</span><br><span class=\"line\">        <span class=\"string\">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 给unsubscribe调用解除订阅标识</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> isSubscribed = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 下面解释为什么要调用这个ensureCanMutateNextListeners函数</span></span><br><span class=\"line\">  ensureCanMutateNextListeners()</span><br><span class=\"line\">  <span class=\"comment\">// 就是简单的把传入的listeners放到nextListeners</span></span><br><span class=\"line\">  nextListeners.push(listener)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个解除订阅的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unsubscribe</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isSubscribed) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'You may not unsubscribe from a store listener while the reducer is executing. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    isSubscribed = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ensureCanMutateNextListeners()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = nextListeners.indexOf(listener)</span><br><span class=\"line\">    <span class=\"comment\">// 从 nextListeners 数组中移除</span></span><br><span class=\"line\">    nextListeners.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>订阅没什么问题，就是为啥用调用 <code>ensureCanMutateNextListeners</code> 呢？<br>看一下这个函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ensureCanMutateNextListeners</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (nextListeners === currentListeners) &#123;</span><br><span class=\"line\">     nextListeners = currentListeners.slice()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数就是检查 <code>nextListeners</code> 和 <code>currentListeners</code> 是否是相同的，如果是相同的就把 <code>currentListeners</code> 拷贝一个新的赋值给<code>nextListeners</code>。因为数组是引用类型的关系，如果 <code>nextListeners</code> 和 <code>currentListeners</code> 相同，像 <code>nextListeners</code> 中 <code>push</code> 新的 <code>listener</code> 的时候会直接影响到 <code>currentListeners</code> 的值。</p>\n<p>注意到另外一点，在 <code>dispatch</code> 函数的最后遍历 <code>listeners</code> 的时候，是这样操作的： <code>const listeners = (currentListeners = nextListeners)</code>，这里 <code>nextListeners</code> 和 <code>currentListeners</code> 就相同了。</p>\n<p>那么为啥内部需要有 <code>currentListeners</code> 和 <code>nextListeners</code>，主要是<strong>通知订阅者的过程中发生了其他的订阅(<code>subscribe</code>)和退订(<code>unsubscribe</code>),那肯定会发生错误或者不确定性。</strong></p>\n<p>这里有<a href=\"https://segmentfault.com/a/1190000010263353\" target=\"_blank\" rel=\"noopener\">一篇文章</a>论述到这个问题。</p>\n<h4 id=\"getState\"><a href=\"#getState\" class=\"headerlink\" title=\"getState\"></a>getState</h4><p>简单的把 <code>store</code> 的 <code>currentState</code> 返回出来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">      <span class=\"string\">'You may not call store.getState() while the reducer is executing. '</span> +</span><br><span class=\"line\">        <span class=\"string\">'The reducer has already received the state as an argument. '</span> +</span><br><span class=\"line\">        <span class=\"string\">'Pass it down from the top reducer instead of reading it from the store.'</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentState</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"replaceReducer\"><a href=\"#replaceReducer\" class=\"headerlink\" title=\"replaceReducer\"></a>replaceReducer</h4><p>这个 <code>API</code> 帮你替换把原来的 <code>reducer</code> 替换成新的 <code>reducer</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceReducer</span>(<span class=\"params\">nextReducer</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextReducer !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Expected the nextReducer to be a function.'</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// nextReducer替换旧的reducer</span></span><br><span class=\"line\">   currentReducer = nextReducer</span><br><span class=\"line\">   <span class=\"comment\">// 注意这里也dispatch了一个随机action，和createStore的最后dispatch一个随机的初始化action功能是相同的，都是了初始化state</span></span><br><span class=\"line\">   dispatch(&#123; <span class=\"attr\">type</span>: ActionTypes.REPLACE &#125;)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"observable\"><a href=\"#observable\" class=\"headerlink\" title=\"observable\"></a>observable</h4><p>不懂，还是贴一下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observable</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> outerSubscribe = subscribe</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The minimal observable subscription method.</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;Object&#125; observer Any object that can be used as an observer.</span></span><br><span class=\"line\"><span class=\"comment\">     * The observer object should have a `next` method.</span></span><br><span class=\"line\"><span class=\"comment\">     * @returns &#123;subscription&#125; An object with an `unsubscribe` method that can</span></span><br><span class=\"line\"><span class=\"comment\">     * be used to unsubscribe the observable from the store, and prevent further</span></span><br><span class=\"line\"><span class=\"comment\">     * emission of values from the observable.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    subscribe(observer) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> observer !== <span class=\"string\">'object'</span> || observer === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Expected the observer to be an object.'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observeState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observer.next) &#123;</span><br><span class=\"line\">          observer.next(getState())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      observeState()</span><br><span class=\"line\">      <span class=\"keyword\">const</span> unsubscribe = outerSubscribe(observeState)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; unsubscribe &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    [$$observable]() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-dispatch一个初始化的action\"><a href=\"#4-dispatch一个初始化的action\" class=\"headerlink\" title=\"4. dispatch一个初始化的action\"></a>4. dispatch一个初始化的action</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch(&#123; <span class=\"attr\">type</span>: ActionTypes.INIT &#125;)</span><br></pre></td></tr></table></figure>\n<p>在最后，<code>dispatch</code> 了一个 <code>type</code> 为随机值的 <code>action</code>， 我们业务的 <code>reducer</code> 中最后没有匹配到对用的 <code>action.type</code> 都会默认返回默认的 <code>state</code>, 而这个默认的 <code>state</code> 往往又在 <code>reducer</code> 函数最开始写的时候已经给好了默认值,这样 <code>dispatch</code> 的 <code>action</code> 与任何 <code>reducer</code> 都不匹配,所以拿到了所有 <code>reducer</code> 的默认值从而 <code>currentState</code> 就被更新成了 <code>reducer</code> 定义过的默认值。</p>\n<h3 id=\"5-返回的store对象\"><a href=\"#5-返回的store对象\" class=\"headerlink\" title=\"5. 返回的store对象\"></a>5. 返回的store对象</h3><p>把定义好的方法挂载到一个对象上面，这个对象就是 <code>store</code> 对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    subscribe,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">    replaceReducer,</span><br><span class=\"line\">    [$$observable]: observable</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>redux</code> 的代码是真的简洁，代码的注释甚至比代码本身还要长，还是非常值得阅读的。</p>\n<hr>\n<p><img src=\"/2018/08/03/redux之createStore/565924812.jpg\" alt=\"Edvard Munch – Calvary\"></p>\n<blockquote>\n<p>Edvard Munch – Calvary 1900</p>\n</blockquote>\n"},{"title":"pic","date":"2018-08-01T04:10:42.000Z","_content":"\n# 收集一些图片作为文章的插图。\n\n[图片站点](https://en.gallerix.ru/album/Vincent-Van-Gogh)\n\n<!-- more -->\n\n## 2018/8/17\n\n![Vincent van Gogh – The Drinkers](pic/1301854874.jpg)\n\n> Vincent van Gogh – The Drinkers 1890\n\n---\n\n## 2018/8/14\n\n![Vincent van Gogh – Blossoming Almond Branch in a Glass with a Book](pic/433381594.jpg)\n\n> Vincent van Gogh – Blossoming Almond Branch in a Glass with a Book 1888\n\n---\n\n## 2018/8/3\n\n![Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked](pic/877090454.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked 1847\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Wave](pic/596444702.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Wave 1889\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Ninth Wave](pic/713080393.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Ninth Wave 1850\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Shipwreck](pic/456066894.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Shipwreck 1864\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Evening In Cairo](pic/2900977792.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Evening In Cairo 1870\n\n---\n\n![Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon](pic/4282315052.jpg)\n\n> Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon 1503-05\n\n---\n\n![Edvard Munch – The Scream](pic/944233120.jpg)\n\n> Edvard Munch – The Scream. ver. 1893\n\n---\n\n![Edvard Munch – img742](pic/196334101.jpg)\n\n> Edvard Munch – img742\n\n---\n\n![Edvard Munch – Calvary](pic/565924812.jpg)\n\n> Edvard Munch – Calvary 1900\n\n---\n\n## 2018/8/2\n\n![Johannes Vermeer – Girl with a Pearl Earring](pic/3526.jpg)\n\n> Johannes Vermeer – Girl with a Pearl Earring 1665-67\n\n---\n\n![Johannes Vermeer – The Milkmaid](pic/1012308194.jpg)\n\n> Johannes Vermeer – The Milkmaid 1658-61\n\n---\n\n![Johannes Vermeer – Officer and Laughing Girl](pic/431359834.jpg)\n\n> Johannes Vermeer – Officer and Laughing Girl 1655-60\n\n---\n\n![Johannes Vermeer – View of Delft](pic/1762221382.jpg)\n\n> Johannes Vermeer – View of Delft 1660-61\n\n---\n\n## 2018/8/1\n\n![Vincent van Gogh – Cafe Terrace in Arles at Night](pic/1959017488.jpg)\n\n> Vincent van Gogh – Cafe Terrace in Arles at Night 1888\n\n---\n\n![Vincent van Gogh – The Parsonage at Nuenen](pic/1917180847.jpg)\n\n> Vincent van Gogh – The Parsonage at Nuenen 1885\n\n---\n\n![Vincent van Gogh – Canal with Women Washing](pic/2048547518.jpg)\n\n> Vincent van Gogh – Canal with Women Washing 1888\n\n---\n\n![Vincent van Gogh – Sunny Lawn in a Public Park](pic/898024871.jpg)\n\n> Vincent van Gogh – Sunny Lawn in a Public Park 1888\n\n---\n\n![Vincent van Gogh – Old Man in Sorrow](pic/1132638050.jpg)\n\n> Vincent van Gogh – Old Man in Sorrow 1890\n\n---\n\n![Vincent van Gogh – Noon Rest from (after Millet)](pic/1997264555.jpg)\n\n> Vincent van Gogh – Noon Rest from (after Millet) 1890\n\n---\n","source":"_posts/pic.md","raw":"---\ntitle: pic\ndate: 2018-08-01 12:10:42\ntags: 图库\ncategories: 杂记\n---\n\n# 收集一些图片作为文章的插图。\n\n[图片站点](https://en.gallerix.ru/album/Vincent-Van-Gogh)\n\n<!-- more -->\n\n## 2018/8/17\n\n![Vincent van Gogh – The Drinkers](pic/1301854874.jpg)\n\n> Vincent van Gogh – The Drinkers 1890\n\n---\n\n## 2018/8/14\n\n![Vincent van Gogh – Blossoming Almond Branch in a Glass with a Book](pic/433381594.jpg)\n\n> Vincent van Gogh – Blossoming Almond Branch in a Glass with a Book 1888\n\n---\n\n## 2018/8/3\n\n![Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked](pic/877090454.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked 1847\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Wave](pic/596444702.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Wave 1889\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Ninth Wave](pic/713080393.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Ninth Wave 1850\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Shipwreck](pic/456066894.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Shipwreck 1864\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Evening In Cairo](pic/2900977792.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Evening In Cairo 1870\n\n---\n\n![Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon](pic/4282315052.jpg)\n\n> Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon 1503-05\n\n---\n\n![Edvard Munch – The Scream](pic/944233120.jpg)\n\n> Edvard Munch – The Scream. ver. 1893\n\n---\n\n![Edvard Munch – img742](pic/196334101.jpg)\n\n> Edvard Munch – img742\n\n---\n\n![Edvard Munch – Calvary](pic/565924812.jpg)\n\n> Edvard Munch – Calvary 1900\n\n---\n\n## 2018/8/2\n\n![Johannes Vermeer – Girl with a Pearl Earring](pic/3526.jpg)\n\n> Johannes Vermeer – Girl with a Pearl Earring 1665-67\n\n---\n\n![Johannes Vermeer – The Milkmaid](pic/1012308194.jpg)\n\n> Johannes Vermeer – The Milkmaid 1658-61\n\n---\n\n![Johannes Vermeer – Officer and Laughing Girl](pic/431359834.jpg)\n\n> Johannes Vermeer – Officer and Laughing Girl 1655-60\n\n---\n\n![Johannes Vermeer – View of Delft](pic/1762221382.jpg)\n\n> Johannes Vermeer – View of Delft 1660-61\n\n---\n\n## 2018/8/1\n\n![Vincent van Gogh – Cafe Terrace in Arles at Night](pic/1959017488.jpg)\n\n> Vincent van Gogh – Cafe Terrace in Arles at Night 1888\n\n---\n\n![Vincent van Gogh – The Parsonage at Nuenen](pic/1917180847.jpg)\n\n> Vincent van Gogh – The Parsonage at Nuenen 1885\n\n---\n\n![Vincent van Gogh – Canal with Women Washing](pic/2048547518.jpg)\n\n> Vincent van Gogh – Canal with Women Washing 1888\n\n---\n\n![Vincent van Gogh – Sunny Lawn in a Public Park](pic/898024871.jpg)\n\n> Vincent van Gogh – Sunny Lawn in a Public Park 1888\n\n---\n\n![Vincent van Gogh – Old Man in Sorrow](pic/1132638050.jpg)\n\n> Vincent van Gogh – Old Man in Sorrow 1890\n\n---\n\n![Vincent van Gogh – Noon Rest from (after Millet)](pic/1997264555.jpg)\n\n> Vincent van Gogh – Noon Rest from (after Millet) 1890\n\n---\n","slug":"pic","published":1,"updated":"2018-08-26T03:52:40.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbgk000jssv65j3lo6s3","content":"<h1 id=\"收集一些图片作为文章的插图。\"><a href=\"#收集一些图片作为文章的插图。\" class=\"headerlink\" title=\"收集一些图片作为文章的插图。\"></a>收集一些图片作为文章的插图。</h1><p><a href=\"https://en.gallerix.ru/album/Vincent-Van-Gogh\" target=\"_blank\" rel=\"noopener\">图片站点</a></p>\n<a id=\"more\"></a>\n<h2 id=\"2018-8-17\"><a href=\"#2018-8-17\" class=\"headerlink\" title=\"2018/8/17\"></a>2018/8/17</h2><p><img src=\"/2018/08/01/pic/1301854874.jpg\" alt=\"Vincent van Gogh – The Drinkers\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Drinkers 1890</p>\n</blockquote>\n<hr>\n<h2 id=\"2018-8-14\"><a href=\"#2018-8-14\" class=\"headerlink\" title=\"2018/8/14\"></a>2018/8/14</h2><p><img src=\"/2018/08/01/pic/433381594.jpg\" alt=\"Vincent van Gogh – Blossoming Almond Branch in a Glass with a Book\"></p>\n<blockquote>\n<p>Vincent van Gogh – Blossoming Almond Branch in a Glass with a Book 1888</p>\n</blockquote>\n<hr>\n<h2 id=\"2018-8-3\"><a href=\"#2018-8-3\" class=\"headerlink\" title=\"2018/8/3\"></a>2018/8/3</h2><p><img src=\"/2018/08/01/pic/877090454.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked 1847</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/596444702.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Wave\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Wave 1889</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/713080393.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Ninth Wave\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Ninth Wave 1850</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/456066894.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Shipwreck\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Shipwreck 1864</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/2900977792.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Evening In Cairo\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Evening In Cairo 1870</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/4282315052.jpg\" alt=\"Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon\"></p>\n<blockquote>\n<p>Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon 1503-05</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/944233120.jpg\" alt=\"Edvard Munch – The Scream\"></p>\n<blockquote>\n<p>Edvard Munch – The Scream. ver. 1893</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/196334101.jpg\" alt=\"Edvard Munch – img742\"></p>\n<blockquote>\n<p>Edvard Munch – img742</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/565924812.jpg\" alt=\"Edvard Munch – Calvary\"></p>\n<blockquote>\n<p>Edvard Munch – Calvary 1900</p>\n</blockquote>\n<hr>\n<h2 id=\"2018-8-2\"><a href=\"#2018-8-2\" class=\"headerlink\" title=\"2018/8/2\"></a>2018/8/2</h2><p><img src=\"/2018/08/01/pic/3526.jpg\" alt=\"Johannes Vermeer – Girl with a Pearl Earring\"></p>\n<blockquote>\n<p>Johannes Vermeer – Girl with a Pearl Earring 1665-67</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1012308194.jpg\" alt=\"Johannes Vermeer – The Milkmaid\"></p>\n<blockquote>\n<p>Johannes Vermeer – The Milkmaid 1658-61</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/431359834.jpg\" alt=\"Johannes Vermeer – Officer and Laughing Girl\"></p>\n<blockquote>\n<p>Johannes Vermeer – Officer and Laughing Girl 1655-60</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1762221382.jpg\" alt=\"Johannes Vermeer – View of Delft\"></p>\n<blockquote>\n<p>Johannes Vermeer – View of Delft 1660-61</p>\n</blockquote>\n<hr>\n<h2 id=\"2018-8-1\"><a href=\"#2018-8-1\" class=\"headerlink\" title=\"2018/8/1\"></a>2018/8/1</h2><p><img src=\"/2018/08/01/pic/1959017488.jpg\" alt=\"Vincent van Gogh – Cafe Terrace in Arles at Night\"></p>\n<blockquote>\n<p>Vincent van Gogh – Cafe Terrace in Arles at Night 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1917180847.jpg\" alt=\"Vincent van Gogh – The Parsonage at Nuenen\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Parsonage at Nuenen 1885</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/2048547518.jpg\" alt=\"Vincent van Gogh – Canal with Women Washing\"></p>\n<blockquote>\n<p>Vincent van Gogh – Canal with Women Washing 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/898024871.jpg\" alt=\"Vincent van Gogh – Sunny Lawn in a Public Park\"></p>\n<blockquote>\n<p>Vincent van Gogh – Sunny Lawn in a Public Park 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1132638050.jpg\" alt=\"Vincent van Gogh – Old Man in Sorrow\"></p>\n<blockquote>\n<p>Vincent van Gogh – Old Man in Sorrow 1890</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1997264555.jpg\" alt=\"Vincent van Gogh – Noon Rest from (after Millet)\"></p>\n<blockquote>\n<p>Vincent van Gogh – Noon Rest from (after Millet) 1890</p>\n</blockquote>\n<hr>\n","site":{"data":{}},"excerpt":"<h1 id=\"收集一些图片作为文章的插图。\"><a href=\"#收集一些图片作为文章的插图。\" class=\"headerlink\" title=\"收集一些图片作为文章的插图。\"></a>收集一些图片作为文章的插图。</h1><p><a href=\"https://en.gallerix.ru/album/Vincent-Van-Gogh\" target=\"_blank\" rel=\"noopener\">图片站点</a></p>","more":"<h2 id=\"2018-8-17\"><a href=\"#2018-8-17\" class=\"headerlink\" title=\"2018/8/17\"></a>2018/8/17</h2><p><img src=\"/2018/08/01/pic/1301854874.jpg\" alt=\"Vincent van Gogh – The Drinkers\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Drinkers 1890</p>\n</blockquote>\n<hr>\n<h2 id=\"2018-8-14\"><a href=\"#2018-8-14\" class=\"headerlink\" title=\"2018/8/14\"></a>2018/8/14</h2><p><img src=\"/2018/08/01/pic/433381594.jpg\" alt=\"Vincent van Gogh – Blossoming Almond Branch in a Glass with a Book\"></p>\n<blockquote>\n<p>Vincent van Gogh – Blossoming Almond Branch in a Glass with a Book 1888</p>\n</blockquote>\n<hr>\n<h2 id=\"2018-8-3\"><a href=\"#2018-8-3\" class=\"headerlink\" title=\"2018/8/3\"></a>2018/8/3</h2><p><img src=\"/2018/08/01/pic/877090454.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked 1847</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/596444702.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Wave\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Wave 1889</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/713080393.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Ninth Wave\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Ninth Wave 1850</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/456066894.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Shipwreck\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Shipwreck 1864</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/2900977792.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Evening In Cairo\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Evening In Cairo 1870</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/4282315052.jpg\" alt=\"Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon\"></p>\n<blockquote>\n<p>Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon 1503-05</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/944233120.jpg\" alt=\"Edvard Munch – The Scream\"></p>\n<blockquote>\n<p>Edvard Munch – The Scream. ver. 1893</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/196334101.jpg\" alt=\"Edvard Munch – img742\"></p>\n<blockquote>\n<p>Edvard Munch – img742</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/565924812.jpg\" alt=\"Edvard Munch – Calvary\"></p>\n<blockquote>\n<p>Edvard Munch – Calvary 1900</p>\n</blockquote>\n<hr>\n<h2 id=\"2018-8-2\"><a href=\"#2018-8-2\" class=\"headerlink\" title=\"2018/8/2\"></a>2018/8/2</h2><p><img src=\"/2018/08/01/pic/3526.jpg\" alt=\"Johannes Vermeer – Girl with a Pearl Earring\"></p>\n<blockquote>\n<p>Johannes Vermeer – Girl with a Pearl Earring 1665-67</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1012308194.jpg\" alt=\"Johannes Vermeer – The Milkmaid\"></p>\n<blockquote>\n<p>Johannes Vermeer – The Milkmaid 1658-61</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/431359834.jpg\" alt=\"Johannes Vermeer – Officer and Laughing Girl\"></p>\n<blockquote>\n<p>Johannes Vermeer – Officer and Laughing Girl 1655-60</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1762221382.jpg\" alt=\"Johannes Vermeer – View of Delft\"></p>\n<blockquote>\n<p>Johannes Vermeer – View of Delft 1660-61</p>\n</blockquote>\n<hr>\n<h2 id=\"2018-8-1\"><a href=\"#2018-8-1\" class=\"headerlink\" title=\"2018/8/1\"></a>2018/8/1</h2><p><img src=\"/2018/08/01/pic/1959017488.jpg\" alt=\"Vincent van Gogh – Cafe Terrace in Arles at Night\"></p>\n<blockquote>\n<p>Vincent van Gogh – Cafe Terrace in Arles at Night 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1917180847.jpg\" alt=\"Vincent van Gogh – The Parsonage at Nuenen\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Parsonage at Nuenen 1885</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/2048547518.jpg\" alt=\"Vincent van Gogh – Canal with Women Washing\"></p>\n<blockquote>\n<p>Vincent van Gogh – Canal with Women Washing 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/898024871.jpg\" alt=\"Vincent van Gogh – Sunny Lawn in a Public Park\"></p>\n<blockquote>\n<p>Vincent van Gogh – Sunny Lawn in a Public Park 1888</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1132638050.jpg\" alt=\"Vincent van Gogh – Old Man in Sorrow\"></p>\n<blockquote>\n<p>Vincent van Gogh – Old Man in Sorrow 1890</p>\n</blockquote>\n<hr>\n<p><img src=\"/2018/08/01/pic/1997264555.jpg\" alt=\"Vincent van Gogh – Noon Rest from (after Millet)\"></p>\n<blockquote>\n<p>Vincent van Gogh – Noon Rest from (after Millet) 1890</p>\n</blockquote>\n<hr>"},{"title":"一次面试记录","date":"2018-08-03T01:37:20.000Z","_content":"\n# 一次面试记录\n\n## 电面\n\n基本上是围绕简历提问，外带一些基本问题。\n\n* 说一说`vue`指令\n* 说一说`webpack`打包大概是什么样的，为什么能把所有资源都能打进来\n* 了解`es6`吗，讲一下装饰器，以及装饰器编译成`es5`是什么样，`babel`如何配置才能用`es7`、`es8`等最新语法\n* `node`爬虫以及解码问题\n* 说一说`react`和`vue`的对比\n* 说一说`虚拟dom`是什么，以及`diff`算法\n* `react`没有`Vue`的依赖收集，所以谈一谈`react`的性能优化\n* 再说一说`React.pureComponent`原理\n* 高阶函数是否知道，以及高阶函数(hoc)和混入(mixin)的对比\n* 浮动影响，怎么清除浮动，父元素伪类设置的`content`为空的时候对清除浮动是否影响，\n* 讲一讲`BFC`\n* 是否了解`BEM`\n* position的取值，以及`relative`、`absolute`的区别，以及`relative`设置`top`，`left`等值是否破坏文档流\n\n## 现场面\n\n传闻现场面有三轮，技术面、hr面、TL(teamLeader)面，结果面完以后内推的小伙伴告诉我面试官是teamLeader才知道这直接就是TL面了，面的不太理想，所以最后是挂了。\n\n### 笔试题\n\n* 函数作用域的那种题，涉及一些基本的闭包，全局作用域一些相关问题\n* 一个10秒钟的`while`循环，这时候事件点击的问题\n* 原型链相关的一个问题\n* 分析一段函数是否存在问题，重点在于递归问题\n\n### mac敲代码题\n\n实现一个解析`url`参数的函数，也算很常见的一个面试题了。\n\n### 提问\n\n* `vue-router`原理\n* 多次改变`this.data`的值，是否多次渲染，渲染之后如何操作，以及`nextTick`原理\n* `vue`原理\n* `koa`中间件原理\n* `node`单线程，那么线程和进程区别\n* 是否有计算机基础\n* webpack怎么涉及文件缓冲,文件名设置为`hash`值后，怎么映射到`index.html`的引入中去\n\n--- \n\n![Ivan Konstantinovich Aivazovsky – Shipwreck](一次面试记录/456066894.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Shipwreck 1864\n","source":"_posts/一次面试记录.md","raw":"---\ntitle: 一次面试记录\ndate: 2018-08-03 09:37:20\ntags:\n  - 面试\ncategories: 前端\n---\n\n# 一次面试记录\n\n## 电面\n\n基本上是围绕简历提问，外带一些基本问题。\n\n* 说一说`vue`指令\n* 说一说`webpack`打包大概是什么样的，为什么能把所有资源都能打进来\n* 了解`es6`吗，讲一下装饰器，以及装饰器编译成`es5`是什么样，`babel`如何配置才能用`es7`、`es8`等最新语法\n* `node`爬虫以及解码问题\n* 说一说`react`和`vue`的对比\n* 说一说`虚拟dom`是什么，以及`diff`算法\n* `react`没有`Vue`的依赖收集，所以谈一谈`react`的性能优化\n* 再说一说`React.pureComponent`原理\n* 高阶函数是否知道，以及高阶函数(hoc)和混入(mixin)的对比\n* 浮动影响，怎么清除浮动，父元素伪类设置的`content`为空的时候对清除浮动是否影响，\n* 讲一讲`BFC`\n* 是否了解`BEM`\n* position的取值，以及`relative`、`absolute`的区别，以及`relative`设置`top`，`left`等值是否破坏文档流\n\n## 现场面\n\n传闻现场面有三轮，技术面、hr面、TL(teamLeader)面，结果面完以后内推的小伙伴告诉我面试官是teamLeader才知道这直接就是TL面了，面的不太理想，所以最后是挂了。\n\n### 笔试题\n\n* 函数作用域的那种题，涉及一些基本的闭包，全局作用域一些相关问题\n* 一个10秒钟的`while`循环，这时候事件点击的问题\n* 原型链相关的一个问题\n* 分析一段函数是否存在问题，重点在于递归问题\n\n### mac敲代码题\n\n实现一个解析`url`参数的函数，也算很常见的一个面试题了。\n\n### 提问\n\n* `vue-router`原理\n* 多次改变`this.data`的值，是否多次渲染，渲染之后如何操作，以及`nextTick`原理\n* `vue`原理\n* `koa`中间件原理\n* `node`单线程，那么线程和进程区别\n* 是否有计算机基础\n* webpack怎么涉及文件缓冲,文件名设置为`hash`值后，怎么映射到`index.html`的引入中去\n\n--- \n\n![Ivan Konstantinovich Aivazovsky – Shipwreck](一次面试记录/456066894.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Shipwreck 1864\n","slug":"一次面试记录","published":1,"updated":"2018-08-03T11:48:58.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbh4000nssv6h32nd6wk","content":"<h1 id=\"一次面试记录\"><a href=\"#一次面试记录\" class=\"headerlink\" title=\"一次面试记录\"></a>一次面试记录</h1><h2 id=\"电面\"><a href=\"#电面\" class=\"headerlink\" title=\"电面\"></a>电面</h2><p>基本上是围绕简历提问，外带一些基本问题。</p>\n<ul>\n<li>说一说<code>vue</code>指令</li>\n<li>说一说<code>webpack</code>打包大概是什么样的，为什么能把所有资源都能打进来</li>\n<li>了解<code>es6</code>吗，讲一下装饰器，以及装饰器编译成<code>es5</code>是什么样，<code>babel</code>如何配置才能用<code>es7</code>、<code>es8</code>等最新语法</li>\n<li><code>node</code>爬虫以及解码问题</li>\n<li>说一说<code>react</code>和<code>vue</code>的对比</li>\n<li>说一说<code>虚拟dom</code>是什么，以及<code>diff</code>算法</li>\n<li><code>react</code>没有<code>Vue</code>的依赖收集，所以谈一谈<code>react</code>的性能优化</li>\n<li>再说一说<code>React.pureComponent</code>原理</li>\n<li>高阶函数是否知道，以及高阶函数(hoc)和混入(mixin)的对比</li>\n<li>浮动影响，怎么清除浮动，父元素伪类设置的<code>content</code>为空的时候对清除浮动是否影响，</li>\n<li>讲一讲<code>BFC</code></li>\n<li>是否了解<code>BEM</code></li>\n<li>position的取值，以及<code>relative</code>、<code>absolute</code>的区别，以及<code>relative</code>设置<code>top</code>，<code>left</code>等值是否破坏文档流</li>\n</ul>\n<h2 id=\"现场面\"><a href=\"#现场面\" class=\"headerlink\" title=\"现场面\"></a>现场面</h2><p>传闻现场面有三轮，技术面、hr面、TL(teamLeader)面，结果面完以后内推的小伙伴告诉我面试官是teamLeader才知道这直接就是TL面了，面的不太理想，所以最后是挂了。</p>\n<h3 id=\"笔试题\"><a href=\"#笔试题\" class=\"headerlink\" title=\"笔试题\"></a>笔试题</h3><ul>\n<li>函数作用域的那种题，涉及一些基本的闭包，全局作用域一些相关问题</li>\n<li>一个10秒钟的<code>while</code>循环，这时候事件点击的问题</li>\n<li>原型链相关的一个问题</li>\n<li>分析一段函数是否存在问题，重点在于递归问题</li>\n</ul>\n<h3 id=\"mac敲代码题\"><a href=\"#mac敲代码题\" class=\"headerlink\" title=\"mac敲代码题\"></a>mac敲代码题</h3><p>实现一个解析<code>url</code>参数的函数，也算很常见的一个面试题了。</p>\n<h3 id=\"提问\"><a href=\"#提问\" class=\"headerlink\" title=\"提问\"></a>提问</h3><ul>\n<li><code>vue-router</code>原理</li>\n<li>多次改变<code>this.data</code>的值，是否多次渲染，渲染之后如何操作，以及<code>nextTick</code>原理</li>\n<li><code>vue</code>原理</li>\n<li><code>koa</code>中间件原理</li>\n<li><code>node</code>单线程，那么线程和进程区别</li>\n<li>是否有计算机基础</li>\n<li>webpack怎么涉及文件缓冲,文件名设置为<code>hash</code>值后，怎么映射到<code>index.html</code>的引入中去</li>\n</ul>\n<hr>\n<p><img src=\"/2018/08/03/一次面试记录/456066894.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Shipwreck\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Shipwreck 1864</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一次面试记录\"><a href=\"#一次面试记录\" class=\"headerlink\" title=\"一次面试记录\"></a>一次面试记录</h1><h2 id=\"电面\"><a href=\"#电面\" class=\"headerlink\" title=\"电面\"></a>电面</h2><p>基本上是围绕简历提问，外带一些基本问题。</p>\n<ul>\n<li>说一说<code>vue</code>指令</li>\n<li>说一说<code>webpack</code>打包大概是什么样的，为什么能把所有资源都能打进来</li>\n<li>了解<code>es6</code>吗，讲一下装饰器，以及装饰器编译成<code>es5</code>是什么样，<code>babel</code>如何配置才能用<code>es7</code>、<code>es8</code>等最新语法</li>\n<li><code>node</code>爬虫以及解码问题</li>\n<li>说一说<code>react</code>和<code>vue</code>的对比</li>\n<li>说一说<code>虚拟dom</code>是什么，以及<code>diff</code>算法</li>\n<li><code>react</code>没有<code>Vue</code>的依赖收集，所以谈一谈<code>react</code>的性能优化</li>\n<li>再说一说<code>React.pureComponent</code>原理</li>\n<li>高阶函数是否知道，以及高阶函数(hoc)和混入(mixin)的对比</li>\n<li>浮动影响，怎么清除浮动，父元素伪类设置的<code>content</code>为空的时候对清除浮动是否影响，</li>\n<li>讲一讲<code>BFC</code></li>\n<li>是否了解<code>BEM</code></li>\n<li>position的取值，以及<code>relative</code>、<code>absolute</code>的区别，以及<code>relative</code>设置<code>top</code>，<code>left</code>等值是否破坏文档流</li>\n</ul>\n<h2 id=\"现场面\"><a href=\"#现场面\" class=\"headerlink\" title=\"现场面\"></a>现场面</h2><p>传闻现场面有三轮，技术面、hr面、TL(teamLeader)面，结果面完以后内推的小伙伴告诉我面试官是teamLeader才知道这直接就是TL面了，面的不太理想，所以最后是挂了。</p>\n<h3 id=\"笔试题\"><a href=\"#笔试题\" class=\"headerlink\" title=\"笔试题\"></a>笔试题</h3><ul>\n<li>函数作用域的那种题，涉及一些基本的闭包，全局作用域一些相关问题</li>\n<li>一个10秒钟的<code>while</code>循环，这时候事件点击的问题</li>\n<li>原型链相关的一个问题</li>\n<li>分析一段函数是否存在问题，重点在于递归问题</li>\n</ul>\n<h3 id=\"mac敲代码题\"><a href=\"#mac敲代码题\" class=\"headerlink\" title=\"mac敲代码题\"></a>mac敲代码题</h3><p>实现一个解析<code>url</code>参数的函数，也算很常见的一个面试题了。</p>\n<h3 id=\"提问\"><a href=\"#提问\" class=\"headerlink\" title=\"提问\"></a>提问</h3><ul>\n<li><code>vue-router</code>原理</li>\n<li>多次改变<code>this.data</code>的值，是否多次渲染，渲染之后如何操作，以及<code>nextTick</code>原理</li>\n<li><code>vue</code>原理</li>\n<li><code>koa</code>中间件原理</li>\n<li><code>node</code>单线程，那么线程和进程区别</li>\n<li>是否有计算机基础</li>\n<li>webpack怎么涉及文件缓冲,文件名设置为<code>hash</code>值后，怎么映射到<code>index.html</code>的引入中去</li>\n</ul>\n<hr>\n<p><img src=\"/2018/08/03/一次面试记录/456066894.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Shipwreck\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Shipwreck 1864</p>\n</blockquote>\n"},{"title":"vue与react组件对比学习","date":"2018-08-03T01:29:03.000Z","_content":"\n# vue与react组件对比学习\n\n## 前言\n\n我最一开始是先学的`react`，然后也就前段时间开始学习`vue`，一开始给我的感受是两者很相似，`react`给我的感觉是*灵活*，`vue`是一种*死板*的感觉。为什么有这种感觉呢，`react`有一种很强烈的欲望，**all in js**只要能够用够`js`写的，就全用`js`写，所以一切都很灵活，`jsx`很酷，**高阶组件**牛逼，`es7`的装饰器也是可以玩的飞起。反观`vue`，搞的`.vue单文件`还是尽量保留原来前端开发的模式，留下了`template`、`script`、`style`三个最基本的东西，其实内部运作应该还是和`react`类似。\n\n## react\n\n`react`看的各种道听途说的文章，这玩意大概是怎么玩的呢？简单的说`jsx`被解析成`createElement`的方法，里面传到参数啊什么的就是告诉`react`怎么渲染之类，然后方法返回一个`虚拟dom`,大概是这么搞的，具体细节我也不是太懂。\n\n## vue\n\n`vue`一开始让我挺晕的，官网的学习教程和一般写的项目不太一样，官网教程的例子没有单文件，全是在选项对象中加入一个`template`属性，一般的项目开发的都是用的`.vue`的单文件。一开始我是没太理解`.vue`这文件到底是怎么玩，只是按着这样写，不理解原理好像也能够基本完成自己想要的效果。\n\n最近看了一些文章以及看了好几遍官网的`api`，[官网的api](https://cn.vuejs.org/v2/api/)还是很有必要每一个都看一遍的，之前大致看一遍感觉好多东西都没有见到过，别人代码看多了，发现很多没用的`api`还是很强的。下面讲讲我对`vue`的一些理解。\n\n`vue`是怎么玩的呢？每一个`vue`组件都是一个`Vue`实例，这样说也不是很准确，应该每一个自己写的组件都是通过调用`Vue.extend`继承`Vue`后扩展出来的新的类的实例，想一想怎么定义一个`vue`组件，就是调用了`Vue.component`[方法](https://cn.vuejs.org/v2/api/?#Vue-component)，\n\n```js\n// 注册组件，传入一个扩展过的构造器\nVue.component('my-component', Vue.extend({ /* ... */ }))\n\n// 注册组件，传入一个选项对象 (自动调用 Vue.extend)\nVue.component('my-component', { /* ... */ })\n\n// 获取注册的组件 (始终返回构造器)\nvar MyComponent = Vue.component('my-component')\n```\n\n一般情况下我们写的`.vue单文件`暴露出来的就是一个选项对象，这个方法的内部自动调用了`Vue.extend`。所以`.vue单文件`本质上是`vue-loader`去把`<template></template>`里的内容转成字符串形式，塞到`<scirpt></script>`里面的`export default {}`的对象里面的`template`去，当然了，这还没有完，`template`属性里面的字符串也可以说是一种糖，`vue`内部是要调用`Vue.compile`去做一次转换，最终把`template`的值转换成`render`，这个属性的值是一个方法，这里就和`react`统一了，用是有个同名的函数`createElement`去生成`Vnode`。所以在选项对象中，可以不给出`template`属性而是给出`render`属性，同时存在`template`和`render`的时候会忽视`template`。\n\n看看[官网](https://cn.vuejs.org/v2/guide/render-function.html)`render`用法：\n\n```js\nvar getChildrenTextContent = function (children) {\n  return children.map(function (node) {\n    return node.children\n      ? getChildrenTextContent(node.children)\n      : node.text\n  }).join('')\n}\n\nVue.component('anchored-heading', {\n  render: function (createElement) {\n    // create kebabCase id\n    var headingId = getChildrenTextContent(this.$slots.default)\n      .toLowerCase()\n      .replace(/\\W+/g, '-')\n      .replace(/(^\\-|\\-$)/g, '')\n\n    return createElement(\n      'h' + this.level,\n      [\n        createElement('a', {\n          attrs: {\n            name: headingId,\n            href: '#' + headingId\n          }\n        }, this.$slots.default)\n      ]\n    )\n  },\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})\n```\n\n看的出来这种直接写`render`比起`template`要麻烦的多，所以为了简化这种写法就搞出来了一个`jsx`写法，这里又和`react`又统一了。\n\n`jsx`用法:\n\n```js\nimport AnchoredHeading from './AnchoredHeading.vue'\n\nnew Vue({\n  el: '#demo',\n  render: function (h) {\n    return (\n      <AnchoredHeading level={1}>\n        <span>Hello</span> world!\n      </AnchoredHeading>\n    )\n  }\n})\n```\n\n## 一个需求引发的思考\n\n通常我们写`react`和`vue`都是一个写一个组件`customComp`，然后在别的组件要用的时候都是直接`<customComp/>`写进去的，但是有的组件就不能这么做了，比如一个提醒的`message`组件，我希望在`react`中是这样调用，像是一个工具类函数一般使用：\n\n```jsx\nimport message from 'message.js'\nimport React from 'react'\n\nclass XXXcomponent extends React.Component{\n    ...\n    componentDidMount(){\n        message.info({\n            type:'success',\n            text:'hello react!'\n        })\n    }\n}\n\n\n```\n\n在`vue`中我希望是这样的调用的：\n\n```js\n{\n    mounted(){\n        this.$message({\n            type:'success',\n            text:\"hello vue!\"\n        })\n    }\n}\n```\n\n在看了一些三方库的这种组件的实现方式，来回折腾了一段时间，对`react`和`vue`理解的更深了一些。\n\n### vue的实现\n\n先拿`vue`说，先写一个`message.vue`的组件文件，然后在`index.js`文件中把这个`message.vue`文件`import`进来，你可以试着打印下这个`vue`文件长得什么样，其实前面也分析过了，其实引进来的就是一个选项对象，而且`<template></template>`标签的内容也被弄成了render属性了，前面也铺垫过了`vue.extend`，这里把引入的选项对象传入`vue.extend`中就返回了一个扩展过的`Vue`类了,然后我们手动去`new`一个`message`的组件实例出来，可以传入一个`propsData`就能把数据传给到组件内部的`prop`中去，打印下实例就会发现定义在`.vue`文件中的`data`、`prop`之类的都有，这个时候我们只是实例化了一个实例，其实在`document`上是找不到这个节点的，只需要最后在实例上调用`$mount(el)`，就能把实例挂载到`document`上去了。直接修改实例上`data`里面定义的值，会发现也是响应的，至此这个`message`组件我们能够手动去控制这个组件了，具体细节该怎么暴露出`api`来个外部调用就不说了。\n\n```js\n//伪代码\nimport message from 'message.vue'\nimport Vue from 'vue'\n\nconst Constructor = Vue.extend(message) //扩展出一个新的类\n\nconst options = {\n    innerProps:\"inner props\"\n}\n\nconst instance = new Constructor({propsData:options})  //创建一个实例，也可以传给一个props\n\ninstance.$mount(document.body) //组件挂在body下\n\n//如果组件内部methods有方法，实例就能直接调用\n\n// instance.innerFunction()\n\n```\n\n### react实现\n\n大体上是和`vue`类似，有几个地方有变化，引进来的组件，因为是用`class extends React.Component`的形式写的，看的出来已经是扩展过`react`后组件类了，直接去`new`就能拿到实例了,或者是用`React.createElement`传入组件拿到`虚拟dom`。和`vue`不同的事，`vue`有个`$mount`方法帮助挂载组件到指定的位置，在`react`中要用到`react-dom`里面的`render`方法，传入前面拿到的`虚拟dom`以及要挂载的位置，这个方法会返回这个组件实例，这个时候就可以调用组件实例的`setState`方法去做一些事情了。\n\n## 总结\n\n`react`、`vue`随便用用带还是挺简单的，我的观点是`api文档`只能教会你**70%**的东西，但是你有了这**70%**的功力，大部分的东西基本都没什么问题，但是文档之外的**30%**，往往是最难学的，可能需要剥开`vue`、`react`简单易用的外表，来回看官方文档，每次都能有新的体会，翻看第三方优秀的组件库是最佳学习的方案，深入地去理解内部原理才能真正的掌握。\n\n这种组件函数式用法在我的[fantastic-carnival(一个博客系统)](https://github.com/limengke123/fantastic-carnival)中有体现：\n其中有一个`loadingBar`组件是一个加载条的组件，参考的是`iview`组件库中的`vue`实现，同时我用`react`也实现了一遍。\n\n* [vue的loadingBar实现](https://github.com/limengke123/fantastic-carnival/tree/master/admin/src/components/general/loading-bar)\n* [vue的message实现](https://github.com/limengke123/fantastic-carnival/tree/master/admin/src/components/general/message)\n* [react的lonadingBar实现](https://github.com/limengke123/fantastic-carnival/tree/master/client/src/components/common/loading-bar)\n\n## 参考资料\n\n1. [vue组件思考](https://nlush.com/blog/2017/10/14/VUE-%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/)\n2. [vue官网渲染函数](https://cn.vuejs.org/v2/guide/render-function.html)\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked](vue与react组件对比学习/877090454.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked 1847\n","source":"_posts/vue与react组件对比学习.md","raw":"---\ntitle: vue与react组件对比学习\ndate: 2018-08-03 09:29:03\ntags:\n  - vue\n  - react\ncategories: 前端\n---\n\n# vue与react组件对比学习\n\n## 前言\n\n我最一开始是先学的`react`，然后也就前段时间开始学习`vue`，一开始给我的感受是两者很相似，`react`给我的感觉是*灵活*，`vue`是一种*死板*的感觉。为什么有这种感觉呢，`react`有一种很强烈的欲望，**all in js**只要能够用够`js`写的，就全用`js`写，所以一切都很灵活，`jsx`很酷，**高阶组件**牛逼，`es7`的装饰器也是可以玩的飞起。反观`vue`，搞的`.vue单文件`还是尽量保留原来前端开发的模式，留下了`template`、`script`、`style`三个最基本的东西，其实内部运作应该还是和`react`类似。\n\n## react\n\n`react`看的各种道听途说的文章，这玩意大概是怎么玩的呢？简单的说`jsx`被解析成`createElement`的方法，里面传到参数啊什么的就是告诉`react`怎么渲染之类，然后方法返回一个`虚拟dom`,大概是这么搞的，具体细节我也不是太懂。\n\n## vue\n\n`vue`一开始让我挺晕的，官网的学习教程和一般写的项目不太一样，官网教程的例子没有单文件，全是在选项对象中加入一个`template`属性，一般的项目开发的都是用的`.vue`的单文件。一开始我是没太理解`.vue`这文件到底是怎么玩，只是按着这样写，不理解原理好像也能够基本完成自己想要的效果。\n\n最近看了一些文章以及看了好几遍官网的`api`，[官网的api](https://cn.vuejs.org/v2/api/)还是很有必要每一个都看一遍的，之前大致看一遍感觉好多东西都没有见到过，别人代码看多了，发现很多没用的`api`还是很强的。下面讲讲我对`vue`的一些理解。\n\n`vue`是怎么玩的呢？每一个`vue`组件都是一个`Vue`实例，这样说也不是很准确，应该每一个自己写的组件都是通过调用`Vue.extend`继承`Vue`后扩展出来的新的类的实例，想一想怎么定义一个`vue`组件，就是调用了`Vue.component`[方法](https://cn.vuejs.org/v2/api/?#Vue-component)，\n\n```js\n// 注册组件，传入一个扩展过的构造器\nVue.component('my-component', Vue.extend({ /* ... */ }))\n\n// 注册组件，传入一个选项对象 (自动调用 Vue.extend)\nVue.component('my-component', { /* ... */ })\n\n// 获取注册的组件 (始终返回构造器)\nvar MyComponent = Vue.component('my-component')\n```\n\n一般情况下我们写的`.vue单文件`暴露出来的就是一个选项对象，这个方法的内部自动调用了`Vue.extend`。所以`.vue单文件`本质上是`vue-loader`去把`<template></template>`里的内容转成字符串形式，塞到`<scirpt></script>`里面的`export default {}`的对象里面的`template`去，当然了，这还没有完，`template`属性里面的字符串也可以说是一种糖，`vue`内部是要调用`Vue.compile`去做一次转换，最终把`template`的值转换成`render`，这个属性的值是一个方法，这里就和`react`统一了，用是有个同名的函数`createElement`去生成`Vnode`。所以在选项对象中，可以不给出`template`属性而是给出`render`属性，同时存在`template`和`render`的时候会忽视`template`。\n\n看看[官网](https://cn.vuejs.org/v2/guide/render-function.html)`render`用法：\n\n```js\nvar getChildrenTextContent = function (children) {\n  return children.map(function (node) {\n    return node.children\n      ? getChildrenTextContent(node.children)\n      : node.text\n  }).join('')\n}\n\nVue.component('anchored-heading', {\n  render: function (createElement) {\n    // create kebabCase id\n    var headingId = getChildrenTextContent(this.$slots.default)\n      .toLowerCase()\n      .replace(/\\W+/g, '-')\n      .replace(/(^\\-|\\-$)/g, '')\n\n    return createElement(\n      'h' + this.level,\n      [\n        createElement('a', {\n          attrs: {\n            name: headingId,\n            href: '#' + headingId\n          }\n        }, this.$slots.default)\n      ]\n    )\n  },\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})\n```\n\n看的出来这种直接写`render`比起`template`要麻烦的多，所以为了简化这种写法就搞出来了一个`jsx`写法，这里又和`react`又统一了。\n\n`jsx`用法:\n\n```js\nimport AnchoredHeading from './AnchoredHeading.vue'\n\nnew Vue({\n  el: '#demo',\n  render: function (h) {\n    return (\n      <AnchoredHeading level={1}>\n        <span>Hello</span> world!\n      </AnchoredHeading>\n    )\n  }\n})\n```\n\n## 一个需求引发的思考\n\n通常我们写`react`和`vue`都是一个写一个组件`customComp`，然后在别的组件要用的时候都是直接`<customComp/>`写进去的，但是有的组件就不能这么做了，比如一个提醒的`message`组件，我希望在`react`中是这样调用，像是一个工具类函数一般使用：\n\n```jsx\nimport message from 'message.js'\nimport React from 'react'\n\nclass XXXcomponent extends React.Component{\n    ...\n    componentDidMount(){\n        message.info({\n            type:'success',\n            text:'hello react!'\n        })\n    }\n}\n\n\n```\n\n在`vue`中我希望是这样的调用的：\n\n```js\n{\n    mounted(){\n        this.$message({\n            type:'success',\n            text:\"hello vue!\"\n        })\n    }\n}\n```\n\n在看了一些三方库的这种组件的实现方式，来回折腾了一段时间，对`react`和`vue`理解的更深了一些。\n\n### vue的实现\n\n先拿`vue`说，先写一个`message.vue`的组件文件，然后在`index.js`文件中把这个`message.vue`文件`import`进来，你可以试着打印下这个`vue`文件长得什么样，其实前面也分析过了，其实引进来的就是一个选项对象，而且`<template></template>`标签的内容也被弄成了render属性了，前面也铺垫过了`vue.extend`，这里把引入的选项对象传入`vue.extend`中就返回了一个扩展过的`Vue`类了,然后我们手动去`new`一个`message`的组件实例出来，可以传入一个`propsData`就能把数据传给到组件内部的`prop`中去，打印下实例就会发现定义在`.vue`文件中的`data`、`prop`之类的都有，这个时候我们只是实例化了一个实例，其实在`document`上是找不到这个节点的，只需要最后在实例上调用`$mount(el)`，就能把实例挂载到`document`上去了。直接修改实例上`data`里面定义的值，会发现也是响应的，至此这个`message`组件我们能够手动去控制这个组件了，具体细节该怎么暴露出`api`来个外部调用就不说了。\n\n```js\n//伪代码\nimport message from 'message.vue'\nimport Vue from 'vue'\n\nconst Constructor = Vue.extend(message) //扩展出一个新的类\n\nconst options = {\n    innerProps:\"inner props\"\n}\n\nconst instance = new Constructor({propsData:options})  //创建一个实例，也可以传给一个props\n\ninstance.$mount(document.body) //组件挂在body下\n\n//如果组件内部methods有方法，实例就能直接调用\n\n// instance.innerFunction()\n\n```\n\n### react实现\n\n大体上是和`vue`类似，有几个地方有变化，引进来的组件，因为是用`class extends React.Component`的形式写的，看的出来已经是扩展过`react`后组件类了，直接去`new`就能拿到实例了,或者是用`React.createElement`传入组件拿到`虚拟dom`。和`vue`不同的事，`vue`有个`$mount`方法帮助挂载组件到指定的位置，在`react`中要用到`react-dom`里面的`render`方法，传入前面拿到的`虚拟dom`以及要挂载的位置，这个方法会返回这个组件实例，这个时候就可以调用组件实例的`setState`方法去做一些事情了。\n\n## 总结\n\n`react`、`vue`随便用用带还是挺简单的，我的观点是`api文档`只能教会你**70%**的东西，但是你有了这**70%**的功力，大部分的东西基本都没什么问题，但是文档之外的**30%**，往往是最难学的，可能需要剥开`vue`、`react`简单易用的外表，来回看官方文档，每次都能有新的体会，翻看第三方优秀的组件库是最佳学习的方案，深入地去理解内部原理才能真正的掌握。\n\n这种组件函数式用法在我的[fantastic-carnival(一个博客系统)](https://github.com/limengke123/fantastic-carnival)中有体现：\n其中有一个`loadingBar`组件是一个加载条的组件，参考的是`iview`组件库中的`vue`实现，同时我用`react`也实现了一遍。\n\n* [vue的loadingBar实现](https://github.com/limengke123/fantastic-carnival/tree/master/admin/src/components/general/loading-bar)\n* [vue的message实现](https://github.com/limengke123/fantastic-carnival/tree/master/admin/src/components/general/message)\n* [react的lonadingBar实现](https://github.com/limengke123/fantastic-carnival/tree/master/client/src/components/common/loading-bar)\n\n## 参考资料\n\n1. [vue组件思考](https://nlush.com/blog/2017/10/14/VUE-%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/)\n2. [vue官网渲染函数](https://cn.vuejs.org/v2/guide/render-function.html)\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked](vue与react组件对比学习/877090454.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked 1847\n","slug":"vue与react组件对比学习","published":1,"updated":"2018-08-03T11:48:58.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbhc000rssv6zgsdgr58","content":"<h1 id=\"vue与react组件对比学习\"><a href=\"#vue与react组件对比学习\" class=\"headerlink\" title=\"vue与react组件对比学习\"></a>vue与react组件对比学习</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我最一开始是先学的<code>react</code>，然后也就前段时间开始学习<code>vue</code>，一开始给我的感受是两者很相似，<code>react</code>给我的感觉是<em>灵活</em>，<code>vue</code>是一种<em>死板</em>的感觉。为什么有这种感觉呢，<code>react</code>有一种很强烈的欲望，<strong>all in js</strong>只要能够用够<code>js</code>写的，就全用<code>js</code>写，所以一切都很灵活，<code>jsx</code>很酷，<strong>高阶组件</strong>牛逼，<code>es7</code>的装饰器也是可以玩的飞起。反观<code>vue</code>，搞的<code>.vue单文件</code>还是尽量保留原来前端开发的模式，留下了<code>template</code>、<code>script</code>、<code>style</code>三个最基本的东西，其实内部运作应该还是和<code>react</code>类似。</p>\n<h2 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h2><p><code>react</code>看的各种道听途说的文章，这玩意大概是怎么玩的呢？简单的说<code>jsx</code>被解析成<code>createElement</code>的方法，里面传到参数啊什么的就是告诉<code>react</code>怎么渲染之类，然后方法返回一个<code>虚拟dom</code>,大概是这么搞的，具体细节我也不是太懂。</p>\n<h2 id=\"vue\"><a href=\"#vue\" class=\"headerlink\" title=\"vue\"></a>vue</h2><p><code>vue</code>一开始让我挺晕的，官网的学习教程和一般写的项目不太一样，官网教程的例子没有单文件，全是在选项对象中加入一个<code>template</code>属性，一般的项目开发的都是用的<code>.vue</code>的单文件。一开始我是没太理解<code>.vue</code>这文件到底是怎么玩，只是按着这样写，不理解原理好像也能够基本完成自己想要的效果。</p>\n<p>最近看了一些文章以及看了好几遍官网的<code>api</code>，<a href=\"https://cn.vuejs.org/v2/api/\" target=\"_blank\" rel=\"noopener\">官网的api</a>还是很有必要每一个都看一遍的，之前大致看一遍感觉好多东西都没有见到过，别人代码看多了，发现很多没用的<code>api</code>还是很强的。下面讲讲我对<code>vue</code>的一些理解。</p>\n<p><code>vue</code>是怎么玩的呢？每一个<code>vue</code>组件都是一个<code>Vue</code>实例，这样说也不是很准确，应该每一个自己写的组件都是通过调用<code>Vue.extend</code>继承<code>Vue</code>后扩展出来的新的类的实例，想一想怎么定义一个<code>vue</code>组件，就是调用了<code>Vue.component</code><a href=\"https://cn.vuejs.org/v2/api/?#Vue-component\" target=\"_blank\" rel=\"noopener\">方法</a>，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册组件，传入一个扩展过的构造器</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, Vue.extend(&#123; <span class=\"comment\">/* ... */</span> &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册组件，传入一个选项对象 (自动调用 Vue.extend)</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123; <span class=\"comment\">/* ... */</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取注册的组件 (始终返回构造器)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.component(<span class=\"string\">'my-component'</span>)</span><br></pre></td></tr></table></figure>\n<p>一般情况下我们写的<code>.vue单文件</code>暴露出来的就是一个选项对象，这个方法的内部自动调用了<code>Vue.extend</code>。所以<code>.vue单文件</code>本质上是<code>vue-loader</code>去把<code>&lt;template&gt;&lt;/template&gt;</code>里的内容转成字符串形式，塞到<code>&lt;scirpt&gt;&lt;/script&gt;</code>里面的<code>export default {}</code>的对象里面的<code>template</code>去，当然了，这还没有完，<code>template</code>属性里面的字符串也可以说是一种糖，<code>vue</code>内部是要调用<code>Vue.compile</code>去做一次转换，最终把<code>template</code>的值转换成<code>render</code>，这个属性的值是一个方法，这里就和<code>react</code>统一了，用是有个同名的函数<code>createElement</code>去生成<code>Vnode</code>。所以在选项对象中，可以不给出<code>template</code>属性而是给出<code>render</code>属性，同时存在<code>template</code>和<code>render</code>的时候会忽视<code>template</code>。</p>\n<p>看看<a href=\"https://cn.vuejs.org/v2/guide/render-function.html\" target=\"_blank\" rel=\"noopener\">官网</a><code>render</code>用法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getChildrenTextContent = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">children</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> children.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.children</span><br><span class=\"line\">      ? getChildrenTextContent(node.children)</span><br><span class=\"line\">      : node.text</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'anchored-heading'</span>, &#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// create kebabCase id</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> headingId = getChildrenTextContent(<span class=\"keyword\">this</span>.$slots.default)</span><br><span class=\"line\">      .toLowerCase()</span><br><span class=\"line\">      .replace(<span class=\"regexp\">/\\W+/g</span>, <span class=\"string\">'-'</span>)</span><br><span class=\"line\">      .replace(<span class=\"regexp\">/(^\\-|\\-$)/g</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> createElement(</span><br><span class=\"line\">      <span class=\"string\">'h'</span> + <span class=\"keyword\">this</span>.level,</span><br><span class=\"line\">      [</span><br><span class=\"line\">        createElement(<span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">          attrs: &#123;</span><br><span class=\"line\">            name: headingId,</span><br><span class=\"line\">            href: <span class=\"string\">'#'</span> + headingId</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"keyword\">this</span>.$slots.default)</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    level: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>看的出来这种直接写<code>render</code>比起<code>template</code>要麻烦的多，所以为了简化这种写法就搞出来了一个<code>jsx</code>写法，这里又和<code>react</code>又统一了。</p>\n<p><code>jsx</code>用法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> AnchoredHeading <span class=\"keyword\">from</span> <span class=\"string\">'./AnchoredHeading.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#demo'</span>,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">h</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;AnchoredHeading level=&#123;<span class=\"number\">1</span>&#125;&gt;</span><br><span class=\"line\">        &lt;span&gt;Hello&lt;<span class=\"regexp\">/span&gt; world!</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>AnchoredHeading&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"一个需求引发的思考\"><a href=\"#一个需求引发的思考\" class=\"headerlink\" title=\"一个需求引发的思考\"></a>一个需求引发的思考</h2><p>通常我们写<code>react</code>和<code>vue</code>都是一个写一个组件<code>customComp</code>，然后在别的组件要用的时候都是直接<code>&lt;customComp/&gt;</code>写进去的，但是有的组件就不能这么做了，比如一个提醒的<code>message</code>组件，我希望在<code>react</code>中是这样调用，像是一个工具类函数一般使用：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> message <span class=\"keyword\">from</span> <span class=\"string\">'message.js'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XXXcomponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    componentDidMount()&#123;</span><br><span class=\"line\">        message.info(&#123;</span><br><span class=\"line\">            type:<span class=\"string\">'success'</span>,</span><br><span class=\"line\">            text:<span class=\"string\">'hello react!'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>vue</code>中我希望是这样的调用的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    mounted()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$message(&#123;</span><br><span class=\"line\">            type:<span class=\"string\">'success'</span>,</span><br><span class=\"line\">            text:<span class=\"string\">\"hello vue!\"</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在看了一些三方库的这种组件的实现方式，来回折腾了一段时间，对<code>react</code>和<code>vue</code>理解的更深了一些。</p>\n<h3 id=\"vue的实现\"><a href=\"#vue的实现\" class=\"headerlink\" title=\"vue的实现\"></a>vue的实现</h3><p>先拿<code>vue</code>说，先写一个<code>message.vue</code>的组件文件，然后在<code>index.js</code>文件中把这个<code>message.vue</code>文件<code>import</code>进来，你可以试着打印下这个<code>vue</code>文件长得什么样，其实前面也分析过了，其实引进来的就是一个选项对象，而且<code>&lt;template&gt;&lt;/template&gt;</code>标签的内容也被弄成了render属性了，前面也铺垫过了<code>vue.extend</code>，这里把引入的选项对象传入<code>vue.extend</code>中就返回了一个扩展过的<code>Vue</code>类了,然后我们手动去<code>new</code>一个<code>message</code>的组件实例出来，可以传入一个<code>propsData</code>就能把数据传给到组件内部的<code>prop</code>中去，打印下实例就会发现定义在<code>.vue</code>文件中的<code>data</code>、<code>prop</code>之类的都有，这个时候我们只是实例化了一个实例，其实在<code>document</code>上是找不到这个节点的，只需要最后在实例上调用<code>$mount(el)</code>，就能把实例挂载到<code>document</code>上去了。直接修改实例上<code>data</code>里面定义的值，会发现也是响应的，至此这个<code>message</code>组件我们能够手动去控制这个组件了，具体细节该怎么暴露出<code>api</code>来个外部调用就不说了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//伪代码</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> message <span class=\"keyword\">from</span> <span class=\"string\">'message.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Constructor = Vue.extend(message) <span class=\"comment\">//扩展出一个新的类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">    innerProps:<span class=\"string\">\"inner props\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = <span class=\"keyword\">new</span> Constructor(&#123;<span class=\"attr\">propsData</span>:options&#125;)  <span class=\"comment\">//创建一个实例，也可以传给一个props</span></span><br><span class=\"line\"></span><br><span class=\"line\">instance.$mount(<span class=\"built_in\">document</span>.body) <span class=\"comment\">//组件挂在body下</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果组件内部methods有方法，实例就能直接调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// instance.innerFunction()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"react实现\"><a href=\"#react实现\" class=\"headerlink\" title=\"react实现\"></a>react实现</h3><p>大体上是和<code>vue</code>类似，有几个地方有变化，引进来的组件，因为是用<code>class extends React.Component</code>的形式写的，看的出来已经是扩展过<code>react</code>后组件类了，直接去<code>new</code>就能拿到实例了,或者是用<code>React.createElement</code>传入组件拿到<code>虚拟dom</code>。和<code>vue</code>不同的事，<code>vue</code>有个<code>$mount</code>方法帮助挂载组件到指定的位置，在<code>react</code>中要用到<code>react-dom</code>里面的<code>render</code>方法，传入前面拿到的<code>虚拟dom</code>以及要挂载的位置，这个方法会返回这个组件实例，这个时候就可以调用组件实例的<code>setState</code>方法去做一些事情了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>react</code>、<code>vue</code>随便用用带还是挺简单的，我的观点是<code>api文档</code>只能教会你<strong>70%</strong>的东西，但是你有了这<strong>70%</strong>的功力，大部分的东西基本都没什么问题，但是文档之外的<strong>30%</strong>，往往是最难学的，可能需要剥开<code>vue</code>、<code>react</code>简单易用的外表，来回看官方文档，每次都能有新的体会，翻看第三方优秀的组件库是最佳学习的方案，深入地去理解内部原理才能真正的掌握。</p>\n<p>这种组件函数式用法在我的<a href=\"https://github.com/limengke123/fantastic-carnival\" target=\"_blank\" rel=\"noopener\">fantastic-carnival(一个博客系统)</a>中有体现：<br>其中有一个<code>loadingBar</code>组件是一个加载条的组件，参考的是<code>iview</code>组件库中的<code>vue</code>实现，同时我用<code>react</code>也实现了一遍。</p>\n<ul>\n<li><a href=\"https://github.com/limengke123/fantastic-carnival/tree/master/admin/src/components/general/loading-bar\" target=\"_blank\" rel=\"noopener\">vue的loadingBar实现</a></li>\n<li><a href=\"https://github.com/limengke123/fantastic-carnival/tree/master/admin/src/components/general/message\" target=\"_blank\" rel=\"noopener\">vue的message实现</a></li>\n<li><a href=\"https://github.com/limengke123/fantastic-carnival/tree/master/client/src/components/common/loading-bar\" target=\"_blank\" rel=\"noopener\">react的lonadingBar实现</a></li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"https://nlush.com/blog/2017/10/14/VUE-%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/\" target=\"_blank\" rel=\"noopener\">vue组件思考</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/render-function.html\" target=\"_blank\" rel=\"noopener\">vue官网渲染函数</a></li>\n</ol>\n<hr>\n<p><img src=\"/2018/08/03/vue与react组件对比学习/877090454.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked 1847</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue与react组件对比学习\"><a href=\"#vue与react组件对比学习\" class=\"headerlink\" title=\"vue与react组件对比学习\"></a>vue与react组件对比学习</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我最一开始是先学的<code>react</code>，然后也就前段时间开始学习<code>vue</code>，一开始给我的感受是两者很相似，<code>react</code>给我的感觉是<em>灵活</em>，<code>vue</code>是一种<em>死板</em>的感觉。为什么有这种感觉呢，<code>react</code>有一种很强烈的欲望，<strong>all in js</strong>只要能够用够<code>js</code>写的，就全用<code>js</code>写，所以一切都很灵活，<code>jsx</code>很酷，<strong>高阶组件</strong>牛逼，<code>es7</code>的装饰器也是可以玩的飞起。反观<code>vue</code>，搞的<code>.vue单文件</code>还是尽量保留原来前端开发的模式，留下了<code>template</code>、<code>script</code>、<code>style</code>三个最基本的东西，其实内部运作应该还是和<code>react</code>类似。</p>\n<h2 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h2><p><code>react</code>看的各种道听途说的文章，这玩意大概是怎么玩的呢？简单的说<code>jsx</code>被解析成<code>createElement</code>的方法，里面传到参数啊什么的就是告诉<code>react</code>怎么渲染之类，然后方法返回一个<code>虚拟dom</code>,大概是这么搞的，具体细节我也不是太懂。</p>\n<h2 id=\"vue\"><a href=\"#vue\" class=\"headerlink\" title=\"vue\"></a>vue</h2><p><code>vue</code>一开始让我挺晕的，官网的学习教程和一般写的项目不太一样，官网教程的例子没有单文件，全是在选项对象中加入一个<code>template</code>属性，一般的项目开发的都是用的<code>.vue</code>的单文件。一开始我是没太理解<code>.vue</code>这文件到底是怎么玩，只是按着这样写，不理解原理好像也能够基本完成自己想要的效果。</p>\n<p>最近看了一些文章以及看了好几遍官网的<code>api</code>，<a href=\"https://cn.vuejs.org/v2/api/\" target=\"_blank\" rel=\"noopener\">官网的api</a>还是很有必要每一个都看一遍的，之前大致看一遍感觉好多东西都没有见到过，别人代码看多了，发现很多没用的<code>api</code>还是很强的。下面讲讲我对<code>vue</code>的一些理解。</p>\n<p><code>vue</code>是怎么玩的呢？每一个<code>vue</code>组件都是一个<code>Vue</code>实例，这样说也不是很准确，应该每一个自己写的组件都是通过调用<code>Vue.extend</code>继承<code>Vue</code>后扩展出来的新的类的实例，想一想怎么定义一个<code>vue</code>组件，就是调用了<code>Vue.component</code><a href=\"https://cn.vuejs.org/v2/api/?#Vue-component\" target=\"_blank\" rel=\"noopener\">方法</a>，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册组件，传入一个扩展过的构造器</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, Vue.extend(&#123; <span class=\"comment\">/* ... */</span> &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册组件，传入一个选项对象 (自动调用 Vue.extend)</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123; <span class=\"comment\">/* ... */</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取注册的组件 (始终返回构造器)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.component(<span class=\"string\">'my-component'</span>)</span><br></pre></td></tr></table></figure>\n<p>一般情况下我们写的<code>.vue单文件</code>暴露出来的就是一个选项对象，这个方法的内部自动调用了<code>Vue.extend</code>。所以<code>.vue单文件</code>本质上是<code>vue-loader</code>去把<code>&lt;template&gt;&lt;/template&gt;</code>里的内容转成字符串形式，塞到<code>&lt;scirpt&gt;&lt;/script&gt;</code>里面的<code>export default {}</code>的对象里面的<code>template</code>去，当然了，这还没有完，<code>template</code>属性里面的字符串也可以说是一种糖，<code>vue</code>内部是要调用<code>Vue.compile</code>去做一次转换，最终把<code>template</code>的值转换成<code>render</code>，这个属性的值是一个方法，这里就和<code>react</code>统一了，用是有个同名的函数<code>createElement</code>去生成<code>Vnode</code>。所以在选项对象中，可以不给出<code>template</code>属性而是给出<code>render</code>属性，同时存在<code>template</code>和<code>render</code>的时候会忽视<code>template</code>。</p>\n<p>看看<a href=\"https://cn.vuejs.org/v2/guide/render-function.html\" target=\"_blank\" rel=\"noopener\">官网</a><code>render</code>用法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getChildrenTextContent = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">children</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> children.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.children</span><br><span class=\"line\">      ? getChildrenTextContent(node.children)</span><br><span class=\"line\">      : node.text</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'anchored-heading'</span>, &#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// create kebabCase id</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> headingId = getChildrenTextContent(<span class=\"keyword\">this</span>.$slots.default)</span><br><span class=\"line\">      .toLowerCase()</span><br><span class=\"line\">      .replace(<span class=\"regexp\">/\\W+/g</span>, <span class=\"string\">'-'</span>)</span><br><span class=\"line\">      .replace(<span class=\"regexp\">/(^\\-|\\-$)/g</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> createElement(</span><br><span class=\"line\">      <span class=\"string\">'h'</span> + <span class=\"keyword\">this</span>.level,</span><br><span class=\"line\">      [</span><br><span class=\"line\">        createElement(<span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">          attrs: &#123;</span><br><span class=\"line\">            name: headingId,</span><br><span class=\"line\">            href: <span class=\"string\">'#'</span> + headingId</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"keyword\">this</span>.$slots.default)</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    level: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>看的出来这种直接写<code>render</code>比起<code>template</code>要麻烦的多，所以为了简化这种写法就搞出来了一个<code>jsx</code>写法，这里又和<code>react</code>又统一了。</p>\n<p><code>jsx</code>用法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> AnchoredHeading <span class=\"keyword\">from</span> <span class=\"string\">'./AnchoredHeading.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#demo'</span>,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">h</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;AnchoredHeading level=&#123;<span class=\"number\">1</span>&#125;&gt;</span><br><span class=\"line\">        &lt;span&gt;Hello&lt;<span class=\"regexp\">/span&gt; world!</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>AnchoredHeading&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"一个需求引发的思考\"><a href=\"#一个需求引发的思考\" class=\"headerlink\" title=\"一个需求引发的思考\"></a>一个需求引发的思考</h2><p>通常我们写<code>react</code>和<code>vue</code>都是一个写一个组件<code>customComp</code>，然后在别的组件要用的时候都是直接<code>&lt;customComp/&gt;</code>写进去的，但是有的组件就不能这么做了，比如一个提醒的<code>message</code>组件，我希望在<code>react</code>中是这样调用，像是一个工具类函数一般使用：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> message <span class=\"keyword\">from</span> <span class=\"string\">'message.js'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XXXcomponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    componentDidMount()&#123;</span><br><span class=\"line\">        message.info(&#123;</span><br><span class=\"line\">            type:<span class=\"string\">'success'</span>,</span><br><span class=\"line\">            text:<span class=\"string\">'hello react!'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>vue</code>中我希望是这样的调用的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    mounted()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$message(&#123;</span><br><span class=\"line\">            type:<span class=\"string\">'success'</span>,</span><br><span class=\"line\">            text:<span class=\"string\">\"hello vue!\"</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在看了一些三方库的这种组件的实现方式，来回折腾了一段时间，对<code>react</code>和<code>vue</code>理解的更深了一些。</p>\n<h3 id=\"vue的实现\"><a href=\"#vue的实现\" class=\"headerlink\" title=\"vue的实现\"></a>vue的实现</h3><p>先拿<code>vue</code>说，先写一个<code>message.vue</code>的组件文件，然后在<code>index.js</code>文件中把这个<code>message.vue</code>文件<code>import</code>进来，你可以试着打印下这个<code>vue</code>文件长得什么样，其实前面也分析过了，其实引进来的就是一个选项对象，而且<code>&lt;template&gt;&lt;/template&gt;</code>标签的内容也被弄成了render属性了，前面也铺垫过了<code>vue.extend</code>，这里把引入的选项对象传入<code>vue.extend</code>中就返回了一个扩展过的<code>Vue</code>类了,然后我们手动去<code>new</code>一个<code>message</code>的组件实例出来，可以传入一个<code>propsData</code>就能把数据传给到组件内部的<code>prop</code>中去，打印下实例就会发现定义在<code>.vue</code>文件中的<code>data</code>、<code>prop</code>之类的都有，这个时候我们只是实例化了一个实例，其实在<code>document</code>上是找不到这个节点的，只需要最后在实例上调用<code>$mount(el)</code>，就能把实例挂载到<code>document</code>上去了。直接修改实例上<code>data</code>里面定义的值，会发现也是响应的，至此这个<code>message</code>组件我们能够手动去控制这个组件了，具体细节该怎么暴露出<code>api</code>来个外部调用就不说了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//伪代码</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> message <span class=\"keyword\">from</span> <span class=\"string\">'message.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Constructor = Vue.extend(message) <span class=\"comment\">//扩展出一个新的类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">    innerProps:<span class=\"string\">\"inner props\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = <span class=\"keyword\">new</span> Constructor(&#123;<span class=\"attr\">propsData</span>:options&#125;)  <span class=\"comment\">//创建一个实例，也可以传给一个props</span></span><br><span class=\"line\"></span><br><span class=\"line\">instance.$mount(<span class=\"built_in\">document</span>.body) <span class=\"comment\">//组件挂在body下</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果组件内部methods有方法，实例就能直接调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// instance.innerFunction()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"react实现\"><a href=\"#react实现\" class=\"headerlink\" title=\"react实现\"></a>react实现</h3><p>大体上是和<code>vue</code>类似，有几个地方有变化，引进来的组件，因为是用<code>class extends React.Component</code>的形式写的，看的出来已经是扩展过<code>react</code>后组件类了，直接去<code>new</code>就能拿到实例了,或者是用<code>React.createElement</code>传入组件拿到<code>虚拟dom</code>。和<code>vue</code>不同的事，<code>vue</code>有个<code>$mount</code>方法帮助挂载组件到指定的位置，在<code>react</code>中要用到<code>react-dom</code>里面的<code>render</code>方法，传入前面拿到的<code>虚拟dom</code>以及要挂载的位置，这个方法会返回这个组件实例，这个时候就可以调用组件实例的<code>setState</code>方法去做一些事情了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>react</code>、<code>vue</code>随便用用带还是挺简单的，我的观点是<code>api文档</code>只能教会你<strong>70%</strong>的东西，但是你有了这<strong>70%</strong>的功力，大部分的东西基本都没什么问题，但是文档之外的<strong>30%</strong>，往往是最难学的，可能需要剥开<code>vue</code>、<code>react</code>简单易用的外表，来回看官方文档，每次都能有新的体会，翻看第三方优秀的组件库是最佳学习的方案，深入地去理解内部原理才能真正的掌握。</p>\n<p>这种组件函数式用法在我的<a href=\"https://github.com/limengke123/fantastic-carnival\" target=\"_blank\" rel=\"noopener\">fantastic-carnival(一个博客系统)</a>中有体现：<br>其中有一个<code>loadingBar</code>组件是一个加载条的组件，参考的是<code>iview</code>组件库中的<code>vue</code>实现，同时我用<code>react</code>也实现了一遍。</p>\n<ul>\n<li><a href=\"https://github.com/limengke123/fantastic-carnival/tree/master/admin/src/components/general/loading-bar\" target=\"_blank\" rel=\"noopener\">vue的loadingBar实现</a></li>\n<li><a href=\"https://github.com/limengke123/fantastic-carnival/tree/master/admin/src/components/general/message\" target=\"_blank\" rel=\"noopener\">vue的message实现</a></li>\n<li><a href=\"https://github.com/limengke123/fantastic-carnival/tree/master/client/src/components/common/loading-bar\" target=\"_blank\" rel=\"noopener\">react的lonadingBar实现</a></li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"https://nlush.com/blog/2017/10/14/VUE-%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/\" target=\"_blank\" rel=\"noopener\">vue组件思考</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/render-function.html\" target=\"_blank\" rel=\"noopener\">vue官网渲染函数</a></li>\n</ol>\n<hr>\n<p><img src=\"/2018/08/03/vue与react组件对比学习/877090454.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Tower. Shipwrecked 1847</p>\n</blockquote>\n"},{"title":"vue较少关注的地方","date":"2018-08-02T01:24:33.000Z","_content":"\n# vue较少关注的地方\n\n`vue`总体来说还是很简单的一个库，基本的一些需求能够很快地完成，但是有的需求用`vue`去实现，可能还是有点头疼，可能是因为一些api很少使用，所以这些地方也是需要查漏补缺，同时看看别的组件库是怎么封装组件的也能够学到很多东西。\n\n## 查漏补缺\n\n> 在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。\n所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象 (一些根实例特有的选项除外)。\n\n### 侦听器&计算属性&方法\n\n计算属性依赖于`data`、`props`或其他`computed`的变化而变化，具有缓冲，方法就没有缓冲。\n\n侦听器的应用场景在**数据变化时执行异步或开销较大的操作**。\n\n### v-if&v-else可复用组件\n\n来回切换的，`if`和`else`里面的一些共同的节点会存在复用的情况减少渲染开支，加入属性Key，避免复用。\n\n这里`v-if`和`v-else`切换的时候可以用这种空的`template`来代替`div`\n\n**`v-show`是不支持`template的`**\n\n```js\n<template v-if=\"loginType === 'username'\">\n  <label>Username</label>\n  <input placeholder=\"Enter your username\">\n</template>\n<template v-else>\n  <label>Email</label>\n  <input placeholder=\"Enter your email address\">\n</template>\n```\n\n### 事件处理\n\n> 有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：\n\n```js\n<button v-on:click=\"warn('Form cannot be submitted yet.', $event)\">\n  Submit\n</button>\n```\n\n### 组件\n\n> 当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，你会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。尤其要注意，像 `<ul>`、`<ol>`、`<table>`、`<select>` 这样的元素里允许包含的元素有限制，而另一些像 `<option>` 这样的元素只能出现在某些特定元素的内部。\n\n~~这个时候用上`is`，其他时候基本用不上。`.vue`没有影响，所以`is`基本没什么卵用。~~\n这个`is`好像还是很有用的...，配合`conponent`组件好像能搞出大事情，后续文章这块会有再介绍用法。\n\n#### 自定义事件的表单输入组件\n\n表单输入是业务中太常见的需求了，具体怎么搞，得深入理解下：\n\n> `v-model`是语法糖\n\n```js\n<input v-model=\"something\">\n```\n\n是以下示例的语法糖：\n\n```js\n<input\n  v-bind:value=\"something\"\n  v-on:input=\"something = $event.target.value\">\n```\n\n所以在组件中使用时，它相当于下面的简写：\n\n```js\n<custom-input\n  v-bind:value=\"something\"\n  v-on:input=\"something = arguments[0]\">\n</custom-input>\n```\n\n所以要让组件的 v-model 生效:\n\n* 接受一个`value`prop\n* 在有新的值时候触发`input`事件并将新的值作为参数\n\n官网例子：\n\n```js\n<currency-input v-model=\"price\"></currency-input>\n```\n\n```js\nVue.component('currency-input', {\n  template: '\\\n    <span>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      >\\\n    </span>\\\n  ',\n  props: ['value'],\n  methods: {\n    // 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制\n    updateValue: function (value) {\n      var formattedValue = value\n        // 删除两侧的空格符\n        .trim()\n        // 保留 2 位小数\n        .slice(\n          0,\n          value.indexOf('.') === -1\n            ? value.length\n            : value.indexOf('.') + 3\n        )\n      // 如果值尚不合规，则手动覆盖为合规的值\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      // 通过 input 事件带出数值\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})\n```\n\n#### 非父子组件通信\n\n官方给了一种比较奇怪的做法，实例化一个Vue实例，专门用来实现事件监听的空壳：\n\n```js\nvar bus = new Vue()\n```\n\n```js\nbus.$emit(`id-select`,1)\n```\n\n```js\nbus.$on('id-selected',function(id){})\n```\n\n这种方案，不清楚在`vue单文件`模式下如何使用。\n\n### 插槽slot\n\n写这篇文章最主要的目的可能就是因为这个插槽，之前过了一遍文档，这块一带而过，没有深入理解，现在遇到需要实现`tooltip`等组件时，发现`element ui`在插槽在[tooltip](https://github.com/ElemeFE/element/tree/dev/packages/tooltip)这一块就是用的`slot`，所以还是很有必要回过头好好学一下这个东西。\n\n先看官网定义，虽然官网这一块写的不是特别容易懂:\n\n自定义组件内部再套一个组件或是一个普通dom节点是插槽解决的问题，`vue`中的叫法叫做`内容分发`，在`React`中好像直接用`this.props.children`就能搞定，`React`在某些地方确实很灵活也比较容易理解：\n\n```html\n<app>\n  <app-header></app-header>\n  <app-footer></app-footer>\n</app>\n```\n\n* 编译作用域\n\n> 父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。\n* 单个插槽\n\n子组件至少包含一个`<slot>`插口，否则父组件的内容将会被**丢弃**。\n当子组件模板只有一个没有属性的插槽时，父组件传入的整个内容片段将插入到插槽所在的 `DOM` 位置，并替换掉插槽标签本身。\n\n例子也简单，贴一下吧：\n\n```js\n//这是子组件my-component\n<div>\n  <h2>我是子组件的标题</h2>\n  <slot>\n    只有在没有要分发的内容时才会显示。\n  </slot>\n</div>\n```\n\n```js\n//父组件调用子组件\n<div>\n  <h1>我是父组件的标题</h1>\n  <my-component>\n    <p>这是一些初始内容</p>\n    <p>这是更多的初始内容</p>\n  </my-component>\n</div>\n```\n\n```js\n//结果\n<div>\n  <h1>我是父组件的标题</h1>\n  <div>\n    <h2>我是子组件的标题</h2>\n    <p>这是一些初始内容</p>\n    <p>这是更多的初始内容</p>\n  </div>\n</div>\n```\n\n* 具名插槽\n\n> `<slot>` 元素可以用一个特殊的特性 `name` 来进一步配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 `slot` 特性的元素。仍然可以有一个`匿名插槽`，它是`默认插槽`，作为找不到匹配的内容片段的备用插槽。如果没有`默认插槽`，这些找不到匹配的内容片段将被抛弃。\n\n继续看例子，也没有什么难度：\n\n```js\n//一个布局组件app-layout\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n```\n\n```js\n//父组件去调用这个组件的时候\n<app-layout>\n  <h1 slot=\"header\">这里可能是一个页面标题</h1>\n\n  <p>主要内容的一个段落。</p>\n  <p>另一个主要段落。</p>\n\n  <p slot=\"footer\">这里有一些联系信息</p>\n</app-layout>\n```\n\n```js\n//结果\n<div class=\"container\">\n  <header>\n    <h1>这里可能是一个页面标题</h1>\n  </header>\n  <main>\n    <p>主要内容的一个段落。</p>\n    <p>另一个主要段落。</p>\n  </main>\n  <footer>\n    <p>这里有一些联系信息</p>\n  </footer>\n</div>\n```\n\n* 作用域插槽\n\n~~这里就是看不太懂的地方，先留一个坑。~~\n看了一圈看的差不多明白了，放一个官网例子：\n\n```js\n//子组件\n<div class=\"child\">\n  <slot text=\"hello from child\"></slot>\n</div>\n```\n\n```js\n//父组件\n<div class=\"parent\">\n  <child>\n    <template slot-scope=\"props\">\n      <span>hello from parent</span>\n      <span>{{ props.text }}</span>\n    </template>\n  </child>\n</div>\n```\n\n```js\n//結果\n<div class=\"parent\">\n  <div class=\"child\">\n    <span>hello from parent</span>\n    <span>hello from child</span>\n  </div>\n</div>\n```\n\n什么意思呢，子组件的内容可以传递到父组件上去给父组件用，例子中在自组建的`slot`上挂了一个`text`属性，然后父组件在`template`上声明一个`slot-scope`属性，通过这个属性的值就可以访问到自组件想要给父组件的值，有点绕，看起来很灵活很有用，但是实际应用场景应该不多。\n\n* 动态组件\n\n> 通过使用保留的 `<component>` 元素，并对其 `is` 特性进行动态绑定，你可以在同一个挂载点动态切换多个组件：\n\n感觉简单的一个可切换card页面可以用这种方法解决：\n\n```js\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: 'home'\n  },\n  components: {\n    home: { /* ... */ },\n    posts: { /* ... */ },\n    archive: { /* ... */ }\n  }\n})\n```\n\n```js\n<component v-bind:is=\"currentView\">\n  <!-- 组件在 vm.currentview 变化时改变！ -->\n</component>\n```\n\n```js\nvar Home = {\n  template: '<p>Welcome home!</p>'\n}\n\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: Home\n  }\n})\n```\n\n* keep-alive\n\n这种专门针对切换可以缓冲组件。\n\n```js\n<keep-alive>\n  <component :is=\"currentView\">\n    <!-- 非活动组件将被缓存！ -->\n  </component>\n</keep-alive>\n```\n\n### 自定义指令\n\n> 有的情况下，你仍然需要对**普通 `DOM` 元素**进行底层操作，这时候就会用到自定义指令\n\n官网的这个例子很好,组件在加载完自动focus：\n\n```js\n// 注册一个全局自定义指令 `v-focus`\nVue.directive('focus', {\n  // 当被绑定的元素插入到 DOM 中时……\n  inserted: function (el) {\n    // 聚焦元素\n    el.focus()\n  }\n})\n```\n\n```js\n//调用\n  <input v-focus>\n```\n\n几个钩子函数：\n\n1. bind 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\n2. inserted 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。\n3. update 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新。\n4. componentUpdated 指令所在组件的 VNode 及其子 VNode 全部更新后调用。\n5. unbind 只调用一次，指令与元素解绑时调用。\n\n钩子函数的参数：\n\n* el  指令所绑定的元素，可以用来直接操作 DOM\n* binding\n  * name 指令名，不包括 `v-` 前缀。\n  * value 指令的绑定值\n  * oldValue 指令绑定的前一个值，仅在 `update` 和 `componentUpdated` 钩子中可用。无论值是否改变都可用。\n  * expression 字符串形式的指令表达式。\n  * arg 传给指令的参数，可选。\n  * modifiers 一个包含修饰符的对象。\n* vnode Vue 编译生成的虚拟节点。\n* oldVnode 上一个虚拟节点，仅在 `update` 和 `componentUpdated` 钩子中可用。\n\n比较重要的也就`el`和`binding`，用`binding`里的`value`可以给`el`用。\n\n> 除了 `el` 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 `dataset` 来进行。\n\n---\n\n## 补充\n\n2018/4/6：\n\n最近看了一些别人组件一些用法，感觉学的`vue`还是比较皮毛的，有空再写一篇`vue`的较为高级用法。先留一个坑[《细看vue组件》](https://github.com/limengke123/my-note/blob/master/%E5%89%8D%E7%AB%AF/vue%E8%BE%83%E5%B0%91%E5%85%B3%E6%B3%A8%E7%9A%84%E5%9C%B0%E6%96%B9.md)\n\n---\n\n参考资料：\n\n1. [element UI](https://github.com/ElemeFE/element)\n\n2. [vant](https://github.com/youzan/vant)\n\n3. [vue组件思考](https://nlush.com/blog/2017/10/14/VUE-%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/)\n\n我的相关项目：\n\n* [fantastic-carnival](https://github.com/limengke123/fantastic-carnival) 一个前后端都有的博客\n\n* [md-editor](https://github.com/limengke123/md-editor) markdown的编辑器\n\n---\n\n![Johannes Vermeer – Girl with a Pearl Earring](vue较少关注的地方/3526.jpg)\n\n> Johannes Vermeer – Girl with a Pearl Earring 1665-67","source":"_posts/vue较少关注的地方.md","raw":"---\ntitle: vue较少关注的地方\ndate: 2018-08-02 09:24:33\ntags:\n  - vue\ncategories: 前端\n---\n\n# vue较少关注的地方\n\n`vue`总体来说还是很简单的一个库，基本的一些需求能够很快地完成，但是有的需求用`vue`去实现，可能还是有点头疼，可能是因为一些api很少使用，所以这些地方也是需要查漏补缺，同时看看别的组件库是怎么封装组件的也能够学到很多东西。\n\n## 查漏补缺\n\n> 在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。\n所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象 (一些根实例特有的选项除外)。\n\n### 侦听器&计算属性&方法\n\n计算属性依赖于`data`、`props`或其他`computed`的变化而变化，具有缓冲，方法就没有缓冲。\n\n侦听器的应用场景在**数据变化时执行异步或开销较大的操作**。\n\n### v-if&v-else可复用组件\n\n来回切换的，`if`和`else`里面的一些共同的节点会存在复用的情况减少渲染开支，加入属性Key，避免复用。\n\n这里`v-if`和`v-else`切换的时候可以用这种空的`template`来代替`div`\n\n**`v-show`是不支持`template的`**\n\n```js\n<template v-if=\"loginType === 'username'\">\n  <label>Username</label>\n  <input placeholder=\"Enter your username\">\n</template>\n<template v-else>\n  <label>Email</label>\n  <input placeholder=\"Enter your email address\">\n</template>\n```\n\n### 事件处理\n\n> 有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：\n\n```js\n<button v-on:click=\"warn('Form cannot be submitted yet.', $event)\">\n  Submit\n</button>\n```\n\n### 组件\n\n> 当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，你会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。尤其要注意，像 `<ul>`、`<ol>`、`<table>`、`<select>` 这样的元素里允许包含的元素有限制，而另一些像 `<option>` 这样的元素只能出现在某些特定元素的内部。\n\n~~这个时候用上`is`，其他时候基本用不上。`.vue`没有影响，所以`is`基本没什么卵用。~~\n这个`is`好像还是很有用的...，配合`conponent`组件好像能搞出大事情，后续文章这块会有再介绍用法。\n\n#### 自定义事件的表单输入组件\n\n表单输入是业务中太常见的需求了，具体怎么搞，得深入理解下：\n\n> `v-model`是语法糖\n\n```js\n<input v-model=\"something\">\n```\n\n是以下示例的语法糖：\n\n```js\n<input\n  v-bind:value=\"something\"\n  v-on:input=\"something = $event.target.value\">\n```\n\n所以在组件中使用时，它相当于下面的简写：\n\n```js\n<custom-input\n  v-bind:value=\"something\"\n  v-on:input=\"something = arguments[0]\">\n</custom-input>\n```\n\n所以要让组件的 v-model 生效:\n\n* 接受一个`value`prop\n* 在有新的值时候触发`input`事件并将新的值作为参数\n\n官网例子：\n\n```js\n<currency-input v-model=\"price\"></currency-input>\n```\n\n```js\nVue.component('currency-input', {\n  template: '\\\n    <span>\\\n      $\\\n      <input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      >\\\n    </span>\\\n  ',\n  props: ['value'],\n  methods: {\n    // 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制\n    updateValue: function (value) {\n      var formattedValue = value\n        // 删除两侧的空格符\n        .trim()\n        // 保留 2 位小数\n        .slice(\n          0,\n          value.indexOf('.') === -1\n            ? value.length\n            : value.indexOf('.') + 3\n        )\n      // 如果值尚不合规，则手动覆盖为合规的值\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      // 通过 input 事件带出数值\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})\n```\n\n#### 非父子组件通信\n\n官方给了一种比较奇怪的做法，实例化一个Vue实例，专门用来实现事件监听的空壳：\n\n```js\nvar bus = new Vue()\n```\n\n```js\nbus.$emit(`id-select`,1)\n```\n\n```js\nbus.$on('id-selected',function(id){})\n```\n\n这种方案，不清楚在`vue单文件`模式下如何使用。\n\n### 插槽slot\n\n写这篇文章最主要的目的可能就是因为这个插槽，之前过了一遍文档，这块一带而过，没有深入理解，现在遇到需要实现`tooltip`等组件时，发现`element ui`在插槽在[tooltip](https://github.com/ElemeFE/element/tree/dev/packages/tooltip)这一块就是用的`slot`，所以还是很有必要回过头好好学一下这个东西。\n\n先看官网定义，虽然官网这一块写的不是特别容易懂:\n\n自定义组件内部再套一个组件或是一个普通dom节点是插槽解决的问题，`vue`中的叫法叫做`内容分发`，在`React`中好像直接用`this.props.children`就能搞定，`React`在某些地方确实很灵活也比较容易理解：\n\n```html\n<app>\n  <app-header></app-header>\n  <app-footer></app-footer>\n</app>\n```\n\n* 编译作用域\n\n> 父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。\n* 单个插槽\n\n子组件至少包含一个`<slot>`插口，否则父组件的内容将会被**丢弃**。\n当子组件模板只有一个没有属性的插槽时，父组件传入的整个内容片段将插入到插槽所在的 `DOM` 位置，并替换掉插槽标签本身。\n\n例子也简单，贴一下吧：\n\n```js\n//这是子组件my-component\n<div>\n  <h2>我是子组件的标题</h2>\n  <slot>\n    只有在没有要分发的内容时才会显示。\n  </slot>\n</div>\n```\n\n```js\n//父组件调用子组件\n<div>\n  <h1>我是父组件的标题</h1>\n  <my-component>\n    <p>这是一些初始内容</p>\n    <p>这是更多的初始内容</p>\n  </my-component>\n</div>\n```\n\n```js\n//结果\n<div>\n  <h1>我是父组件的标题</h1>\n  <div>\n    <h2>我是子组件的标题</h2>\n    <p>这是一些初始内容</p>\n    <p>这是更多的初始内容</p>\n  </div>\n</div>\n```\n\n* 具名插槽\n\n> `<slot>` 元素可以用一个特殊的特性 `name` 来进一步配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 `slot` 特性的元素。仍然可以有一个`匿名插槽`，它是`默认插槽`，作为找不到匹配的内容片段的备用插槽。如果没有`默认插槽`，这些找不到匹配的内容片段将被抛弃。\n\n继续看例子，也没有什么难度：\n\n```js\n//一个布局组件app-layout\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n```\n\n```js\n//父组件去调用这个组件的时候\n<app-layout>\n  <h1 slot=\"header\">这里可能是一个页面标题</h1>\n\n  <p>主要内容的一个段落。</p>\n  <p>另一个主要段落。</p>\n\n  <p slot=\"footer\">这里有一些联系信息</p>\n</app-layout>\n```\n\n```js\n//结果\n<div class=\"container\">\n  <header>\n    <h1>这里可能是一个页面标题</h1>\n  </header>\n  <main>\n    <p>主要内容的一个段落。</p>\n    <p>另一个主要段落。</p>\n  </main>\n  <footer>\n    <p>这里有一些联系信息</p>\n  </footer>\n</div>\n```\n\n* 作用域插槽\n\n~~这里就是看不太懂的地方，先留一个坑。~~\n看了一圈看的差不多明白了，放一个官网例子：\n\n```js\n//子组件\n<div class=\"child\">\n  <slot text=\"hello from child\"></slot>\n</div>\n```\n\n```js\n//父组件\n<div class=\"parent\">\n  <child>\n    <template slot-scope=\"props\">\n      <span>hello from parent</span>\n      <span>{{ props.text }}</span>\n    </template>\n  </child>\n</div>\n```\n\n```js\n//結果\n<div class=\"parent\">\n  <div class=\"child\">\n    <span>hello from parent</span>\n    <span>hello from child</span>\n  </div>\n</div>\n```\n\n什么意思呢，子组件的内容可以传递到父组件上去给父组件用，例子中在自组建的`slot`上挂了一个`text`属性，然后父组件在`template`上声明一个`slot-scope`属性，通过这个属性的值就可以访问到自组件想要给父组件的值，有点绕，看起来很灵活很有用，但是实际应用场景应该不多。\n\n* 动态组件\n\n> 通过使用保留的 `<component>` 元素，并对其 `is` 特性进行动态绑定，你可以在同一个挂载点动态切换多个组件：\n\n感觉简单的一个可切换card页面可以用这种方法解决：\n\n```js\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: 'home'\n  },\n  components: {\n    home: { /* ... */ },\n    posts: { /* ... */ },\n    archive: { /* ... */ }\n  }\n})\n```\n\n```js\n<component v-bind:is=\"currentView\">\n  <!-- 组件在 vm.currentview 变化时改变！ -->\n</component>\n```\n\n```js\nvar Home = {\n  template: '<p>Welcome home!</p>'\n}\n\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: Home\n  }\n})\n```\n\n* keep-alive\n\n这种专门针对切换可以缓冲组件。\n\n```js\n<keep-alive>\n  <component :is=\"currentView\">\n    <!-- 非活动组件将被缓存！ -->\n  </component>\n</keep-alive>\n```\n\n### 自定义指令\n\n> 有的情况下，你仍然需要对**普通 `DOM` 元素**进行底层操作，这时候就会用到自定义指令\n\n官网的这个例子很好,组件在加载完自动focus：\n\n```js\n// 注册一个全局自定义指令 `v-focus`\nVue.directive('focus', {\n  // 当被绑定的元素插入到 DOM 中时……\n  inserted: function (el) {\n    // 聚焦元素\n    el.focus()\n  }\n})\n```\n\n```js\n//调用\n  <input v-focus>\n```\n\n几个钩子函数：\n\n1. bind 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\n2. inserted 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。\n3. update 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新。\n4. componentUpdated 指令所在组件的 VNode 及其子 VNode 全部更新后调用。\n5. unbind 只调用一次，指令与元素解绑时调用。\n\n钩子函数的参数：\n\n* el  指令所绑定的元素，可以用来直接操作 DOM\n* binding\n  * name 指令名，不包括 `v-` 前缀。\n  * value 指令的绑定值\n  * oldValue 指令绑定的前一个值，仅在 `update` 和 `componentUpdated` 钩子中可用。无论值是否改变都可用。\n  * expression 字符串形式的指令表达式。\n  * arg 传给指令的参数，可选。\n  * modifiers 一个包含修饰符的对象。\n* vnode Vue 编译生成的虚拟节点。\n* oldVnode 上一个虚拟节点，仅在 `update` 和 `componentUpdated` 钩子中可用。\n\n比较重要的也就`el`和`binding`，用`binding`里的`value`可以给`el`用。\n\n> 除了 `el` 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 `dataset` 来进行。\n\n---\n\n## 补充\n\n2018/4/6：\n\n最近看了一些别人组件一些用法，感觉学的`vue`还是比较皮毛的，有空再写一篇`vue`的较为高级用法。先留一个坑[《细看vue组件》](https://github.com/limengke123/my-note/blob/master/%E5%89%8D%E7%AB%AF/vue%E8%BE%83%E5%B0%91%E5%85%B3%E6%B3%A8%E7%9A%84%E5%9C%B0%E6%96%B9.md)\n\n---\n\n参考资料：\n\n1. [element UI](https://github.com/ElemeFE/element)\n\n2. [vant](https://github.com/youzan/vant)\n\n3. [vue组件思考](https://nlush.com/blog/2017/10/14/VUE-%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/)\n\n我的相关项目：\n\n* [fantastic-carnival](https://github.com/limengke123/fantastic-carnival) 一个前后端都有的博客\n\n* [md-editor](https://github.com/limengke123/md-editor) markdown的编辑器\n\n---\n\n![Johannes Vermeer – Girl with a Pearl Earring](vue较少关注的地方/3526.jpg)\n\n> Johannes Vermeer – Girl with a Pearl Earring 1665-67","slug":"vue较少关注的地方","published":1,"updated":"2018-08-02T13:17:52.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbhg000vssv6rkmgtwjp","content":"<h1 id=\"vue较少关注的地方\"><a href=\"#vue较少关注的地方\" class=\"headerlink\" title=\"vue较少关注的地方\"></a>vue较少关注的地方</h1><p><code>vue</code>总体来说还是很简单的一个库，基本的一些需求能够很快地完成，但是有的需求用<code>vue</code>去实现，可能还是有点头疼，可能是因为一些api很少使用，所以这些地方也是需要查漏补缺，同时看看别的组件库是怎么封装组件的也能够学到很多东西。</p>\n<h2 id=\"查漏补缺\"><a href=\"#查漏补缺\" class=\"headerlink\" title=\"查漏补缺\"></a>查漏补缺</h2><blockquote>\n<p>在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。<br>所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象 (一些根实例特有的选项除外)。</p>\n</blockquote>\n<h3 id=\"侦听器-amp-计算属性-amp-方法\"><a href=\"#侦听器-amp-计算属性-amp-方法\" class=\"headerlink\" title=\"侦听器&amp;计算属性&amp;方法\"></a>侦听器&amp;计算属性&amp;方法</h3><p>计算属性依赖于<code>data</code>、<code>props</code>或其他<code>computed</code>的变化而变化，具有缓冲，方法就没有缓冲。</p>\n<p>侦听器的应用场景在<strong>数据变化时执行异步或开销较大的操作</strong>。</p>\n<h3 id=\"v-if-amp-v-else可复用组件\"><a href=\"#v-if-amp-v-else可复用组件\" class=\"headerlink\" title=\"v-if&amp;v-else可复用组件\"></a>v-if&amp;v-else可复用组件</h3><p>来回切换的，<code>if</code>和<code>else</code>里面的一些共同的节点会存在复用的情况减少渲染开支，加入属性Key，避免复用。</p>\n<p>这里<code>v-if</code>和<code>v-else</code>切换的时候可以用这种空的<code>template</code>来代替<code>div</code></p>\n<p><strong><code>v-show</code>是不支持<code>template的</code></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template v-<span class=\"keyword\">if</span>=<span class=\"string\">\"loginType === 'username'\"</span>&gt;</span><br><span class=\"line\">  &lt;label&gt;Username&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;input placeholder=\"Enter your username\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\">&lt;template v-<span class=\"keyword\">else</span>&gt;</span><br><span class=\"line\">  &lt;label&gt;Email&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;input placeholder=\"Enter your email address\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h3><blockquote>\n<p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">\"warn('Form cannot be submitted yet.', $event)\"</span>&gt;</span><br><span class=\"line\">  Submit</span><br><span class=\"line\">&lt;<span class=\"regexp\">/button&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><blockquote>\n<p>当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，你会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。尤其要注意，像 <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;select&gt;</code> 这样的元素里允许包含的元素有限制，而另一些像 <code>&lt;option&gt;</code> 这样的元素只能出现在某些特定元素的内部。</p>\n</blockquote>\n<p><del>这个时候用上<code>is</code>，其他时候基本用不上。<code>.vue</code>没有影响，所以<code>is</code>基本没什么卵用。</del><br>这个<code>is</code>好像还是很有用的…，配合<code>conponent</code>组件好像能搞出大事情，后续文章这块会有再介绍用法。</p>\n<h4 id=\"自定义事件的表单输入组件\"><a href=\"#自定义事件的表单输入组件\" class=\"headerlink\" title=\"自定义事件的表单输入组件\"></a>自定义事件的表单输入组件</h4><p>表单输入是业务中太常见的需求了，具体怎么搞，得深入理解下：</p>\n<blockquote>\n<p><code>v-model</code>是语法糖</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-model=<span class=\"string\">\"something\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>是以下示例的语法糖：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input</span><br><span class=\"line\">  v-bind:value=<span class=\"string\">\"something\"</span></span><br><span class=\"line\">  v-on:input=<span class=\"string\">\"something = $event.target.value\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>所以在组件中使用时，它相当于下面的简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;custom-input</span><br><span class=\"line\">  v-bind:value=<span class=\"string\">\"something\"</span></span><br><span class=\"line\">  v-on:input=<span class=\"string\">\"something = arguments[0]\"</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/custom-input&gt;</span></span><br></pre></td></tr></table></figure>\n<p>所以要让组件的 v-model 生效:</p>\n<ul>\n<li>接受一个<code>value</code>prop</li>\n<li>在有新的值时候触发<code>input</code>事件并将新的值作为参数</li>\n</ul>\n<p>官网例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;currency-input v-model=<span class=\"string\">\"price\"</span>&gt;&lt;/currency-input&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'currency-input'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'\\</span></span><br><span class=\"line\"><span class=\"string\">    &lt;span&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">      $\\</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input\\</span></span><br><span class=\"line\"><span class=\"string\">        ref=\"input\"\\</span></span><br><span class=\"line\"><span class=\"string\">        v-bind:value=\"value\"\\</span></span><br><span class=\"line\"><span class=\"string\">        v-on:input=\"updateValue($event.target.value)\"\\</span></span><br><span class=\"line\"><span class=\"string\">      &gt;\\</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/span&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">  '</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">'value'</span>],</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制</span></span><br><span class=\"line\">    updateValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> formattedValue = value</span><br><span class=\"line\">        <span class=\"comment\">// 删除两侧的空格符</span></span><br><span class=\"line\">        .trim()</span><br><span class=\"line\">        <span class=\"comment\">// 保留 2 位小数</span></span><br><span class=\"line\">        .slice(</span><br><span class=\"line\">          <span class=\"number\">0</span>,</span><br><span class=\"line\">          value.indexOf(<span class=\"string\">'.'</span>) === <span class=\"number\">-1</span></span><br><span class=\"line\">            ? value.length</span><br><span class=\"line\">            : value.indexOf(<span class=\"string\">'.'</span>) + <span class=\"number\">3</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      <span class=\"comment\">// 如果值尚不合规，则手动覆盖为合规的值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (formattedValue !== value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$refs.input.value = formattedValue</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 通过 input 事件带出数值</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, <span class=\"built_in\">Number</span>(formattedValue))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"非父子组件通信\"><a href=\"#非父子组件通信\" class=\"headerlink\" title=\"非父子组件通信\"></a>非父子组件通信</h4><p>官方给了一种比较奇怪的做法，实例化一个Vue实例，专门用来实现事件监听的空壳：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bus = <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bus.$emit(<span class=\"string\">`id-select`</span>,<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bus.$on(<span class=\"string\">'id-selected'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>这种方案，不清楚在<code>vue单文件</code>模式下如何使用。</p>\n<h3 id=\"插槽slot\"><a href=\"#插槽slot\" class=\"headerlink\" title=\"插槽slot\"></a>插槽slot</h3><p>写这篇文章最主要的目的可能就是因为这个插槽，之前过了一遍文档，这块一带而过，没有深入理解，现在遇到需要实现<code>tooltip</code>等组件时，发现<code>element ui</code>在插槽在<a href=\"https://github.com/ElemeFE/element/tree/dev/packages/tooltip\" target=\"_blank\" rel=\"noopener\">tooltip</a>这一块就是用的<code>slot</code>，所以还是很有必要回过头好好学一下这个东西。</p>\n<p>先看官网定义，虽然官网这一块写的不是特别容易懂:</p>\n<p>自定义组件内部再套一个组件或是一个普通dom节点是插槽解决的问题，<code>vue</code>中的叫法叫做<code>内容分发</code>，在<code>React</code>中好像直接用<code>this.props.children</code>就能搞定，<code>React</code>在某些地方确实很灵活也比较容易理解：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>编译作用域</li>\n</ul>\n<blockquote>\n<p>父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。</p>\n<ul>\n<li>单个插槽</li>\n</ul>\n</blockquote>\n<p>子组件至少包含一个<code>&lt;slot&gt;</code>插口，否则父组件的内容将会被<strong>丢弃</strong>。<br>当子组件模板只有一个没有属性的插槽时，父组件传入的整个内容片段将插入到插槽所在的 <code>DOM</code> 位置，并替换掉插槽标签本身。</p>\n<p>例子也简单，贴一下吧：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这是子组件my-component</span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h2&gt;我是子组件的标题&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;slot&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    只有在没有要分发的内容时才会显示。</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>slot&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件调用子组件</span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h1&gt;我是父组件的标题&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;my-component&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;这是一些初始内容&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;p&gt;这是更多的初始内容&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/my</span>-component&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h1&gt;我是父组件的标题&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;h2&gt;我是子组件的标题&lt;/</span>h2&gt;</span><br><span class=\"line\">    &lt;p&gt;这是一些初始内容&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;这是更多的初始内容&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>具名插槽</li>\n</ul>\n<blockquote>\n<p><code>&lt;slot&gt;</code> 元素可以用一个特殊的特性 <code>name</code> 来进一步配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 <code>slot</code> 特性的元素。仍然可以有一个<code>匿名插槽</code>，它是<code>默认插槽</code>，作为找不到匹配的内容片段的备用插槽。如果没有<code>默认插槽</code>，这些找不到匹配的内容片段将被抛弃。</p>\n</blockquote>\n<p>继续看例子，也没有什么难度：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个布局组件app-layout</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">  &lt;header&gt;</span><br><span class=\"line\">    &lt;slot name=<span class=\"string\">\"header\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span><br><span class=\"line\">  &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;main&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;slot&gt;&lt;/</span>slot&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/main&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;footer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;slot name=\"footer\"&gt;&lt;/</span>slot&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/footer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件去调用这个组件的时候</span></span><br><span class=\"line\">&lt;app-layout&gt;</span><br><span class=\"line\">  &lt;h1 slot=<span class=\"string\">\"header\"</span>&gt;这里可能是一个页面标题&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;主要内容的一个段落。&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;p&gt;另一个主要段落。&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p slot=\"footer\"&gt;这里有一些联系信息&lt;/</span>p&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/app-layout&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">  &lt;header&gt;</span><br><span class=\"line\">    &lt;h1&gt;这里可能是一个页面标题&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>header&gt;</span><br><span class=\"line\">  &lt;main&gt;</span><br><span class=\"line\">    &lt;p&gt;主要内容的一个段落。&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;另一个主要段落。&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/main&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;footer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;这里有一些联系信息&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/footer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>作用域插槽</li>\n</ul>\n<p><del>这里就是看不太懂的地方，先留一个坑。</del><br>看了一圈看的差不多明白了，放一个官网例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"child\"</span>&gt;</span><br><span class=\"line\">  &lt;slot text=<span class=\"string\">\"hello from child\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"parent\"</span>&gt;</span><br><span class=\"line\">  &lt;child&gt;</span><br><span class=\"line\">    &lt;template slot-scope=<span class=\"string\">\"props\"</span>&gt;</span><br><span class=\"line\">      &lt;span&gt;hello <span class=\"keyword\">from</span> parent&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;span&gt;&#123;&#123; props.text &#125;&#125;&lt;/</span>span&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>child&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//結果</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"parent\"</span>&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"child\"</span>&gt;</span><br><span class=\"line\">    &lt;span&gt;hello <span class=\"keyword\">from</span> parent&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;span&gt;hello from child&lt;/</span>span&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<p>什么意思呢，子组件的内容可以传递到父组件上去给父组件用，例子中在自组建的<code>slot</code>上挂了一个<code>text</code>属性，然后父组件在<code>template</code>上声明一个<code>slot-scope</code>属性，通过这个属性的值就可以访问到自组件想要给父组件的值，有点绕，看起来很灵活很有用，但是实际应用场景应该不多。</p>\n<ul>\n<li>动态组件</li>\n</ul>\n<blockquote>\n<p>通过使用保留的 <code>&lt;component&gt;</code> 元素，并对其 <code>is</code> 特性进行动态绑定，你可以在同一个挂载点动态切换多个组件：</p>\n</blockquote>\n<p>感觉简单的一个可切换card页面可以用这种方法解决：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    currentView: <span class=\"string\">'home'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    home: &#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">    posts: &#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">    archive: &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component v-bind:is=<span class=\"string\">\"currentView\"</span>&gt;</span><br><span class=\"line\">  &lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/component&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Home = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;p&gt;Welcome home!&lt;/p&gt;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    currentView: Home</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>keep-alive</li>\n</ul>\n<p>这种专门针对切换可以缓冲组件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;keep-alive&gt;</span><br><span class=\"line\">  &lt;component :is=<span class=\"string\">\"currentView\"</span>&gt;</span><br><span class=\"line\">    &lt;!-- 非活动组件将被缓存！ --&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/component&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>keep-alive&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h3><blockquote>\n<p>有的情况下，你仍然需要对<strong>普通 <code>DOM</code> 元素</strong>进行底层操作，这时候就会用到自定义指令</p>\n</blockquote>\n<p>官网的这个例子很好,组件在加载完自动focus：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册一个全局自定义指令 `v-focus`</span></span><br><span class=\"line\">Vue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class=\"line\">  inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 聚焦元素</span></span><br><span class=\"line\">    el.focus()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">  &lt;input v-focus&gt;</span><br></pre></td></tr></table></figure>\n<p>几个钩子函数：</p>\n<ol>\n<li>bind 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li>\n<li>inserted 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li>\n<li>update 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新。</li>\n<li>componentUpdated 指令所在组件的 VNode 及其子 VNode 全部更新后调用。</li>\n<li>unbind 只调用一次，指令与元素解绑时调用。</li>\n</ol>\n<p>钩子函数的参数：</p>\n<ul>\n<li>el  指令所绑定的元素，可以用来直接操作 DOM</li>\n<li>binding<ul>\n<li>name 指令名，不包括 <code>v-</code> 前缀。</li>\n<li>value 指令的绑定值</li>\n<li>oldValue 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li>\n<li>expression 字符串形式的指令表达式。</li>\n<li>arg 传给指令的参数，可选。</li>\n<li>modifiers 一个包含修饰符的对象。</li>\n</ul>\n</li>\n<li>vnode Vue 编译生成的虚拟节点。</li>\n<li>oldVnode 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li>\n</ul>\n<p>比较重要的也就<code>el</code>和<code>binding</code>，用<code>binding</code>里的<code>value</code>可以给<code>el</code>用。</p>\n<blockquote>\n<p>除了 <code>el</code> 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 <code>dataset</code> 来进行。</p>\n</blockquote>\n<hr>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>2018/4/6：</p>\n<p>最近看了一些别人组件一些用法，感觉学的<code>vue</code>还是比较皮毛的，有空再写一篇<code>vue</code>的较为高级用法。先留一个坑<a href=\"https://github.com/limengke123/my-note/blob/master/%E5%89%8D%E7%AB%AF/vue%E8%BE%83%E5%B0%91%E5%85%B3%E6%B3%A8%E7%9A%84%E5%9C%B0%E6%96%B9.md\" target=\"_blank\" rel=\"noopener\">《细看vue组件》</a></p>\n<hr>\n<p>参考资料：</p>\n<ol>\n<li><p><a href=\"https://github.com/ElemeFE/element\" target=\"_blank\" rel=\"noopener\">element UI</a></p>\n</li>\n<li><p><a href=\"https://github.com/youzan/vant\" target=\"_blank\" rel=\"noopener\">vant</a></p>\n</li>\n<li><p><a href=\"https://nlush.com/blog/2017/10/14/VUE-%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/\" target=\"_blank\" rel=\"noopener\">vue组件思考</a></p>\n</li>\n</ol>\n<p>我的相关项目：</p>\n<ul>\n<li><p><a href=\"https://github.com/limengke123/fantastic-carnival\" target=\"_blank\" rel=\"noopener\">fantastic-carnival</a> 一个前后端都有的博客</p>\n</li>\n<li><p><a href=\"https://github.com/limengke123/md-editor\" target=\"_blank\" rel=\"noopener\">md-editor</a> markdown的编辑器</p>\n</li>\n</ul>\n<hr>\n<p><img src=\"/2018/08/02/vue较少关注的地方/3526.jpg\" alt=\"Johannes Vermeer – Girl with a Pearl Earring\"></p>\n<blockquote>\n<p>Johannes Vermeer – Girl with a Pearl Earring 1665-67</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue较少关注的地方\"><a href=\"#vue较少关注的地方\" class=\"headerlink\" title=\"vue较少关注的地方\"></a>vue较少关注的地方</h1><p><code>vue</code>总体来说还是很简单的一个库，基本的一些需求能够很快地完成，但是有的需求用<code>vue</code>去实现，可能还是有点头疼，可能是因为一些api很少使用，所以这些地方也是需要查漏补缺，同时看看别的组件库是怎么封装组件的也能够学到很多东西。</p>\n<h2 id=\"查漏补缺\"><a href=\"#查漏补缺\" class=\"headerlink\" title=\"查漏补缺\"></a>查漏补缺</h2><blockquote>\n<p>在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。<br>所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象 (一些根实例特有的选项除外)。</p>\n</blockquote>\n<h3 id=\"侦听器-amp-计算属性-amp-方法\"><a href=\"#侦听器-amp-计算属性-amp-方法\" class=\"headerlink\" title=\"侦听器&amp;计算属性&amp;方法\"></a>侦听器&amp;计算属性&amp;方法</h3><p>计算属性依赖于<code>data</code>、<code>props</code>或其他<code>computed</code>的变化而变化，具有缓冲，方法就没有缓冲。</p>\n<p>侦听器的应用场景在<strong>数据变化时执行异步或开销较大的操作</strong>。</p>\n<h3 id=\"v-if-amp-v-else可复用组件\"><a href=\"#v-if-amp-v-else可复用组件\" class=\"headerlink\" title=\"v-if&amp;v-else可复用组件\"></a>v-if&amp;v-else可复用组件</h3><p>来回切换的，<code>if</code>和<code>else</code>里面的一些共同的节点会存在复用的情况减少渲染开支，加入属性Key，避免复用。</p>\n<p>这里<code>v-if</code>和<code>v-else</code>切换的时候可以用这种空的<code>template</code>来代替<code>div</code></p>\n<p><strong><code>v-show</code>是不支持<code>template的</code></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template v-<span class=\"keyword\">if</span>=<span class=\"string\">\"loginType === 'username'\"</span>&gt;</span><br><span class=\"line\">  &lt;label&gt;Username&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;input placeholder=\"Enter your username\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\">&lt;template v-<span class=\"keyword\">else</span>&gt;</span><br><span class=\"line\">  &lt;label&gt;Email&lt;<span class=\"regexp\">/label&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;input placeholder=\"Enter your email address\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h3><blockquote>\n<p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=<span class=\"string\">\"warn('Form cannot be submitted yet.', $event)\"</span>&gt;</span><br><span class=\"line\">  Submit</span><br><span class=\"line\">&lt;<span class=\"regexp\">/button&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><blockquote>\n<p>当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，你会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。尤其要注意，像 <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;select&gt;</code> 这样的元素里允许包含的元素有限制，而另一些像 <code>&lt;option&gt;</code> 这样的元素只能出现在某些特定元素的内部。</p>\n</blockquote>\n<p><del>这个时候用上<code>is</code>，其他时候基本用不上。<code>.vue</code>没有影响，所以<code>is</code>基本没什么卵用。</del><br>这个<code>is</code>好像还是很有用的…，配合<code>conponent</code>组件好像能搞出大事情，后续文章这块会有再介绍用法。</p>\n<h4 id=\"自定义事件的表单输入组件\"><a href=\"#自定义事件的表单输入组件\" class=\"headerlink\" title=\"自定义事件的表单输入组件\"></a>自定义事件的表单输入组件</h4><p>表单输入是业务中太常见的需求了，具体怎么搞，得深入理解下：</p>\n<blockquote>\n<p><code>v-model</code>是语法糖</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input v-model=<span class=\"string\">\"something\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>是以下示例的语法糖：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input</span><br><span class=\"line\">  v-bind:value=<span class=\"string\">\"something\"</span></span><br><span class=\"line\">  v-on:input=<span class=\"string\">\"something = $event.target.value\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>所以在组件中使用时，它相当于下面的简写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;custom-input</span><br><span class=\"line\">  v-bind:value=<span class=\"string\">\"something\"</span></span><br><span class=\"line\">  v-on:input=<span class=\"string\">\"something = arguments[0]\"</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/custom-input&gt;</span></span><br></pre></td></tr></table></figure>\n<p>所以要让组件的 v-model 生效:</p>\n<ul>\n<li>接受一个<code>value</code>prop</li>\n<li>在有新的值时候触发<code>input</code>事件并将新的值作为参数</li>\n</ul>\n<p>官网例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;currency-input v-model=<span class=\"string\">\"price\"</span>&gt;&lt;/currency-input&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'currency-input'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'\\</span></span><br><span class=\"line\"><span class=\"string\">    &lt;span&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">      $\\</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input\\</span></span><br><span class=\"line\"><span class=\"string\">        ref=\"input\"\\</span></span><br><span class=\"line\"><span class=\"string\">        v-bind:value=\"value\"\\</span></span><br><span class=\"line\"><span class=\"string\">        v-on:input=\"updateValue($event.target.value)\"\\</span></span><br><span class=\"line\"><span class=\"string\">      &gt;\\</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/span&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">  '</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">'value'</span>],</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制</span></span><br><span class=\"line\">    updateValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> formattedValue = value</span><br><span class=\"line\">        <span class=\"comment\">// 删除两侧的空格符</span></span><br><span class=\"line\">        .trim()</span><br><span class=\"line\">        <span class=\"comment\">// 保留 2 位小数</span></span><br><span class=\"line\">        .slice(</span><br><span class=\"line\">          <span class=\"number\">0</span>,</span><br><span class=\"line\">          value.indexOf(<span class=\"string\">'.'</span>) === <span class=\"number\">-1</span></span><br><span class=\"line\">            ? value.length</span><br><span class=\"line\">            : value.indexOf(<span class=\"string\">'.'</span>) + <span class=\"number\">3</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      <span class=\"comment\">// 如果值尚不合规，则手动覆盖为合规的值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (formattedValue !== value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$refs.input.value = formattedValue</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 通过 input 事件带出数值</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, <span class=\"built_in\">Number</span>(formattedValue))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"非父子组件通信\"><a href=\"#非父子组件通信\" class=\"headerlink\" title=\"非父子组件通信\"></a>非父子组件通信</h4><p>官方给了一种比较奇怪的做法，实例化一个Vue实例，专门用来实现事件监听的空壳：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bus = <span class=\"keyword\">new</span> Vue()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bus.$emit(<span class=\"string\">`id-select`</span>,<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bus.$on(<span class=\"string\">'id-selected'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>这种方案，不清楚在<code>vue单文件</code>模式下如何使用。</p>\n<h3 id=\"插槽slot\"><a href=\"#插槽slot\" class=\"headerlink\" title=\"插槽slot\"></a>插槽slot</h3><p>写这篇文章最主要的目的可能就是因为这个插槽，之前过了一遍文档，这块一带而过，没有深入理解，现在遇到需要实现<code>tooltip</code>等组件时，发现<code>element ui</code>在插槽在<a href=\"https://github.com/ElemeFE/element/tree/dev/packages/tooltip\" target=\"_blank\" rel=\"noopener\">tooltip</a>这一块就是用的<code>slot</code>，所以还是很有必要回过头好好学一下这个东西。</p>\n<p>先看官网定义，虽然官网这一块写的不是特别容易懂:</p>\n<p>自定义组件内部再套一个组件或是一个普通dom节点是插槽解决的问题，<code>vue</code>中的叫法叫做<code>内容分发</code>，在<code>React</code>中好像直接用<code>this.props.children</code>就能搞定，<code>React</code>在某些地方确实很灵活也比较容易理解：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>编译作用域</li>\n</ul>\n<blockquote>\n<p>父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。</p>\n<ul>\n<li>单个插槽</li>\n</ul>\n</blockquote>\n<p>子组件至少包含一个<code>&lt;slot&gt;</code>插口，否则父组件的内容将会被<strong>丢弃</strong>。<br>当子组件模板只有一个没有属性的插槽时，父组件传入的整个内容片段将插入到插槽所在的 <code>DOM</code> 位置，并替换掉插槽标签本身。</p>\n<p>例子也简单，贴一下吧：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这是子组件my-component</span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h2&gt;我是子组件的标题&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;slot&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    只有在没有要分发的内容时才会显示。</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>slot&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件调用子组件</span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h1&gt;我是父组件的标题&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;my-component&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;这是一些初始内容&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;p&gt;这是更多的初始内容&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/my</span>-component&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h1&gt;我是父组件的标题&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;h2&gt;我是子组件的标题&lt;/</span>h2&gt;</span><br><span class=\"line\">    &lt;p&gt;这是一些初始内容&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;这是更多的初始内容&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>具名插槽</li>\n</ul>\n<blockquote>\n<p><code>&lt;slot&gt;</code> 元素可以用一个特殊的特性 <code>name</code> 来进一步配置如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应 <code>slot</code> 特性的元素。仍然可以有一个<code>匿名插槽</code>，它是<code>默认插槽</code>，作为找不到匹配的内容片段的备用插槽。如果没有<code>默认插槽</code>，这些找不到匹配的内容片段将被抛弃。</p>\n</blockquote>\n<p>继续看例子，也没有什么难度：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个布局组件app-layout</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">  &lt;header&gt;</span><br><span class=\"line\">    &lt;slot name=<span class=\"string\">\"header\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span><br><span class=\"line\">  &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;main&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;slot&gt;&lt;/</span>slot&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/main&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;footer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;slot name=\"footer\"&gt;&lt;/</span>slot&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/footer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件去调用这个组件的时候</span></span><br><span class=\"line\">&lt;app-layout&gt;</span><br><span class=\"line\">  &lt;h1 slot=<span class=\"string\">\"header\"</span>&gt;这里可能是一个页面标题&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;主要内容的一个段落。&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;p&gt;另一个主要段落。&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p slot=\"footer\"&gt;这里有一些联系信息&lt;/</span>p&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/app-layout&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">  &lt;header&gt;</span><br><span class=\"line\">    &lt;h1&gt;这里可能是一个页面标题&lt;<span class=\"regexp\">/h1&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>header&gt;</span><br><span class=\"line\">  &lt;main&gt;</span><br><span class=\"line\">    &lt;p&gt;主要内容的一个段落。&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;另一个主要段落。&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/main&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;footer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;这里有一些联系信息&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/footer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>作用域插槽</li>\n</ul>\n<p><del>这里就是看不太懂的地方，先留一个坑。</del><br>看了一圈看的差不多明白了，放一个官网例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"child\"</span>&gt;</span><br><span class=\"line\">  &lt;slot text=<span class=\"string\">\"hello from child\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"parent\"</span>&gt;</span><br><span class=\"line\">  &lt;child&gt;</span><br><span class=\"line\">    &lt;template slot-scope=<span class=\"string\">\"props\"</span>&gt;</span><br><span class=\"line\">      &lt;span&gt;hello <span class=\"keyword\">from</span> parent&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;span&gt;&#123;&#123; props.text &#125;&#125;&lt;/</span>span&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>child&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//結果</span></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"parent\"</span>&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"child\"</span>&gt;</span><br><span class=\"line\">    &lt;span&gt;hello <span class=\"keyword\">from</span> parent&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;span&gt;hello from child&lt;/</span>span&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<p>什么意思呢，子组件的内容可以传递到父组件上去给父组件用，例子中在自组建的<code>slot</code>上挂了一个<code>text</code>属性，然后父组件在<code>template</code>上声明一个<code>slot-scope</code>属性，通过这个属性的值就可以访问到自组件想要给父组件的值，有点绕，看起来很灵活很有用，但是实际应用场景应该不多。</p>\n<ul>\n<li>动态组件</li>\n</ul>\n<blockquote>\n<p>通过使用保留的 <code>&lt;component&gt;</code> 元素，并对其 <code>is</code> 特性进行动态绑定，你可以在同一个挂载点动态切换多个组件：</p>\n</blockquote>\n<p>感觉简单的一个可切换card页面可以用这种方法解决：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    currentView: <span class=\"string\">'home'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    home: &#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">    posts: &#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">    archive: &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component v-bind:is=<span class=\"string\">\"currentView\"</span>&gt;</span><br><span class=\"line\">  &lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/component&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Home = &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;p&gt;Welcome home!&lt;/p&gt;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    currentView: Home</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>keep-alive</li>\n</ul>\n<p>这种专门针对切换可以缓冲组件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;keep-alive&gt;</span><br><span class=\"line\">  &lt;component :is=<span class=\"string\">\"currentView\"</span>&gt;</span><br><span class=\"line\">    &lt;!-- 非活动组件将被缓存！ --&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/component&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>keep-alive&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h3><blockquote>\n<p>有的情况下，你仍然需要对<strong>普通 <code>DOM</code> 元素</strong>进行底层操作，这时候就会用到自定义指令</p>\n</blockquote>\n<p>官网的这个例子很好,组件在加载完自动focus：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册一个全局自定义指令 `v-focus`</span></span><br><span class=\"line\">Vue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class=\"line\">  inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 聚焦元素</span></span><br><span class=\"line\">    el.focus()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">  &lt;input v-focus&gt;</span><br></pre></td></tr></table></figure>\n<p>几个钩子函数：</p>\n<ol>\n<li>bind 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li>\n<li>inserted 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li>\n<li>update 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新。</li>\n<li>componentUpdated 指令所在组件的 VNode 及其子 VNode 全部更新后调用。</li>\n<li>unbind 只调用一次，指令与元素解绑时调用。</li>\n</ol>\n<p>钩子函数的参数：</p>\n<ul>\n<li>el  指令所绑定的元素，可以用来直接操作 DOM</li>\n<li>binding<ul>\n<li>name 指令名，不包括 <code>v-</code> 前缀。</li>\n<li>value 指令的绑定值</li>\n<li>oldValue 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li>\n<li>expression 字符串形式的指令表达式。</li>\n<li>arg 传给指令的参数，可选。</li>\n<li>modifiers 一个包含修饰符的对象。</li>\n</ul>\n</li>\n<li>vnode Vue 编译生成的虚拟节点。</li>\n<li>oldVnode 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li>\n</ul>\n<p>比较重要的也就<code>el</code>和<code>binding</code>，用<code>binding</code>里的<code>value</code>可以给<code>el</code>用。</p>\n<blockquote>\n<p>除了 <code>el</code> 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 <code>dataset</code> 来进行。</p>\n</blockquote>\n<hr>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>2018/4/6：</p>\n<p>最近看了一些别人组件一些用法，感觉学的<code>vue</code>还是比较皮毛的，有空再写一篇<code>vue</code>的较为高级用法。先留一个坑<a href=\"https://github.com/limengke123/my-note/blob/master/%E5%89%8D%E7%AB%AF/vue%E8%BE%83%E5%B0%91%E5%85%B3%E6%B3%A8%E7%9A%84%E5%9C%B0%E6%96%B9.md\" target=\"_blank\" rel=\"noopener\">《细看vue组件》</a></p>\n<hr>\n<p>参考资料：</p>\n<ol>\n<li><p><a href=\"https://github.com/ElemeFE/element\" target=\"_blank\" rel=\"noopener\">element UI</a></p>\n</li>\n<li><p><a href=\"https://github.com/youzan/vant\" target=\"_blank\" rel=\"noopener\">vant</a></p>\n</li>\n<li><p><a href=\"https://nlush.com/blog/2017/10/14/VUE-%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/\" target=\"_blank\" rel=\"noopener\">vue组件思考</a></p>\n</li>\n</ol>\n<p>我的相关项目：</p>\n<ul>\n<li><p><a href=\"https://github.com/limengke123/fantastic-carnival\" target=\"_blank\" rel=\"noopener\">fantastic-carnival</a> 一个前后端都有的博客</p>\n</li>\n<li><p><a href=\"https://github.com/limengke123/md-editor\" target=\"_blank\" rel=\"noopener\">md-editor</a> markdown的编辑器</p>\n</li>\n</ul>\n<hr>\n<p><img src=\"/2018/08/02/vue较少关注的地方/3526.jpg\" alt=\"Johannes Vermeer – Girl with a Pearl Earring\"></p>\n<blockquote>\n<p>Johannes Vermeer – Girl with a Pearl Earring 1665-67</p>\n</blockquote>\n"},{"title":"三月的烟雨","date":"2018-08-01T11:44:41.000Z","_content":"\n# 三月的烟雨\n\n>三月的烟雨，飘荡的南方\n\n有很多次想写一写关于生活的笔记，碍于自己的描述表达能力不行迟迟都没有开始。所以这篇算是开山第一篇了，以后也终于可以在想说话、想表达、想发泄的时候能合理的释放情绪了。\n\n## 回不去\n\n从2016.11.3来杭实习到现在的2018.3.27，竟然也快过去了一年半了，不得不感叹时间真的过得很快，我有时候也经常想起大学的时光，想起来的那些人那些事，所有这些的过去开始一点点模糊，大家也都有了新的生活，就是这种淡淡的感觉里承载着四年时间里的酸甜苦辣，五味陈杂的感觉总让我想去触摸它却又始终不敢也不可能去触摸得到。\n\n## 情绪\n\n我有时候是个很悲观的人，容易积累负面情绪，我喜欢这样想：`发生这样的事情还不如回到以前`，所以表现出一点恋旧的情绪，同时也有一种`弱者情绪`，我定义的`弱者情绪`就是喜欢从弱者的视角去过度同情他，因为在我的想法里我一直是这样的`弱者`\n\n## 民谣\n\n始终听不腻民谣，这种失意人的共鸣真的让自己心生怜悯，难免也会同情自己有多可怜，其实我也没有那么多痛痒的青春故事和一直低谷的情绪，可能就是喜欢吉他的声音吧。\n\n## 健身\n\n最近我也开始了在keep的帮助下健身，从来没想过去健身的我竟然也开始了锻炼身体。我给自己定了目标，每天锻炼二十分钟，虽然我感觉我坚持不了几天了，但是这几天自律健身，我也开始想着去识图合理分配下班后到家剩下来的时间。这是一个好的开始，希望能好好地坚持！！！\n\n---\n\n![Vincent van Gogh – Sunny Lawn in a Public Park](三月的烟雨/898024871.jpg)\n\n> Vincent van Gogh – Sunny Lawn in a Public Park 1888\n","source":"_posts/三月的烟雨.md","raw":"---\ntitle: 三月的烟雨\ndate: 2018-08-01 19:44:41\ntags: \ncategories: 生活\n---\n\n# 三月的烟雨\n\n>三月的烟雨，飘荡的南方\n\n有很多次想写一写关于生活的笔记，碍于自己的描述表达能力不行迟迟都没有开始。所以这篇算是开山第一篇了，以后也终于可以在想说话、想表达、想发泄的时候能合理的释放情绪了。\n\n## 回不去\n\n从2016.11.3来杭实习到现在的2018.3.27，竟然也快过去了一年半了，不得不感叹时间真的过得很快，我有时候也经常想起大学的时光，想起来的那些人那些事，所有这些的过去开始一点点模糊，大家也都有了新的生活，就是这种淡淡的感觉里承载着四年时间里的酸甜苦辣，五味陈杂的感觉总让我想去触摸它却又始终不敢也不可能去触摸得到。\n\n## 情绪\n\n我有时候是个很悲观的人，容易积累负面情绪，我喜欢这样想：`发生这样的事情还不如回到以前`，所以表现出一点恋旧的情绪，同时也有一种`弱者情绪`，我定义的`弱者情绪`就是喜欢从弱者的视角去过度同情他，因为在我的想法里我一直是这样的`弱者`\n\n## 民谣\n\n始终听不腻民谣，这种失意人的共鸣真的让自己心生怜悯，难免也会同情自己有多可怜，其实我也没有那么多痛痒的青春故事和一直低谷的情绪，可能就是喜欢吉他的声音吧。\n\n## 健身\n\n最近我也开始了在keep的帮助下健身，从来没想过去健身的我竟然也开始了锻炼身体。我给自己定了目标，每天锻炼二十分钟，虽然我感觉我坚持不了几天了，但是这几天自律健身，我也开始想着去识图合理分配下班后到家剩下来的时间。这是一个好的开始，希望能好好地坚持！！！\n\n---\n\n![Vincent van Gogh – Sunny Lawn in a Public Park](三月的烟雨/898024871.jpg)\n\n> Vincent van Gogh – Sunny Lawn in a Public Park 1888\n","slug":"三月的烟雨","published":1,"updated":"2018-08-01T11:47:49.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbhs000xssv6lcnsu9us","content":"<h1 id=\"三月的烟雨\"><a href=\"#三月的烟雨\" class=\"headerlink\" title=\"三月的烟雨\"></a>三月的烟雨</h1><blockquote>\n<p>三月的烟雨，飘荡的南方</p>\n</blockquote>\n<p>有很多次想写一写关于生活的笔记，碍于自己的描述表达能力不行迟迟都没有开始。所以这篇算是开山第一篇了，以后也终于可以在想说话、想表达、想发泄的时候能合理的释放情绪了。</p>\n<h2 id=\"回不去\"><a href=\"#回不去\" class=\"headerlink\" title=\"回不去\"></a>回不去</h2><p>从2016.11.3来杭实习到现在的2018.3.27，竟然也快过去了一年半了，不得不感叹时间真的过得很快，我有时候也经常想起大学的时光，想起来的那些人那些事，所有这些的过去开始一点点模糊，大家也都有了新的生活，就是这种淡淡的感觉里承载着四年时间里的酸甜苦辣，五味陈杂的感觉总让我想去触摸它却又始终不敢也不可能去触摸得到。</p>\n<h2 id=\"情绪\"><a href=\"#情绪\" class=\"headerlink\" title=\"情绪\"></a>情绪</h2><p>我有时候是个很悲观的人，容易积累负面情绪，我喜欢这样想：<code>发生这样的事情还不如回到以前</code>，所以表现出一点恋旧的情绪，同时也有一种<code>弱者情绪</code>，我定义的<code>弱者情绪</code>就是喜欢从弱者的视角去过度同情他，因为在我的想法里我一直是这样的<code>弱者</code></p>\n<h2 id=\"民谣\"><a href=\"#民谣\" class=\"headerlink\" title=\"民谣\"></a>民谣</h2><p>始终听不腻民谣，这种失意人的共鸣真的让自己心生怜悯，难免也会同情自己有多可怜，其实我也没有那么多痛痒的青春故事和一直低谷的情绪，可能就是喜欢吉他的声音吧。</p>\n<h2 id=\"健身\"><a href=\"#健身\" class=\"headerlink\" title=\"健身\"></a>健身</h2><p>最近我也开始了在keep的帮助下健身，从来没想过去健身的我竟然也开始了锻炼身体。我给自己定了目标，每天锻炼二十分钟，虽然我感觉我坚持不了几天了，但是这几天自律健身，我也开始想着去识图合理分配下班后到家剩下来的时间。这是一个好的开始，希望能好好地坚持！！！</p>\n<hr>\n<p><img src=\"/2018/08/01/三月的烟雨/898024871.jpg\" alt=\"Vincent van Gogh – Sunny Lawn in a Public Park\"></p>\n<blockquote>\n<p>Vincent van Gogh – Sunny Lawn in a Public Park 1888</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"三月的烟雨\"><a href=\"#三月的烟雨\" class=\"headerlink\" title=\"三月的烟雨\"></a>三月的烟雨</h1><blockquote>\n<p>三月的烟雨，飘荡的南方</p>\n</blockquote>\n<p>有很多次想写一写关于生活的笔记，碍于自己的描述表达能力不行迟迟都没有开始。所以这篇算是开山第一篇了，以后也终于可以在想说话、想表达、想发泄的时候能合理的释放情绪了。</p>\n<h2 id=\"回不去\"><a href=\"#回不去\" class=\"headerlink\" title=\"回不去\"></a>回不去</h2><p>从2016.11.3来杭实习到现在的2018.3.27，竟然也快过去了一年半了，不得不感叹时间真的过得很快，我有时候也经常想起大学的时光，想起来的那些人那些事，所有这些的过去开始一点点模糊，大家也都有了新的生活，就是这种淡淡的感觉里承载着四年时间里的酸甜苦辣，五味陈杂的感觉总让我想去触摸它却又始终不敢也不可能去触摸得到。</p>\n<h2 id=\"情绪\"><a href=\"#情绪\" class=\"headerlink\" title=\"情绪\"></a>情绪</h2><p>我有时候是个很悲观的人，容易积累负面情绪，我喜欢这样想：<code>发生这样的事情还不如回到以前</code>，所以表现出一点恋旧的情绪，同时也有一种<code>弱者情绪</code>，我定义的<code>弱者情绪</code>就是喜欢从弱者的视角去过度同情他，因为在我的想法里我一直是这样的<code>弱者</code></p>\n<h2 id=\"民谣\"><a href=\"#民谣\" class=\"headerlink\" title=\"民谣\"></a>民谣</h2><p>始终听不腻民谣，这种失意人的共鸣真的让自己心生怜悯，难免也会同情自己有多可怜，其实我也没有那么多痛痒的青春故事和一直低谷的情绪，可能就是喜欢吉他的声音吧。</p>\n<h2 id=\"健身\"><a href=\"#健身\" class=\"headerlink\" title=\"健身\"></a>健身</h2><p>最近我也开始了在keep的帮助下健身，从来没想过去健身的我竟然也开始了锻炼身体。我给自己定了目标，每天锻炼二十分钟，虽然我感觉我坚持不了几天了，但是这几天自律健身，我也开始想着去识图合理分配下班后到家剩下来的时间。这是一个好的开始，希望能好好地坚持！！！</p>\n<hr>\n<p><img src=\"/2018/08/01/三月的烟雨/898024871.jpg\" alt=\"Vincent van Gogh – Sunny Lawn in a Public Park\"></p>\n<blockquote>\n<p>Vincent van Gogh – Sunny Lawn in a Public Park 1888</p>\n</blockquote>\n"},{"title":"你好，世界","date":"2018-08-01T03:14:20.000Z","_content":"\n折腾了一天,终于用 `hexo` 搭出来博客了,一开始上手的时候感觉很简单,应该小半天就能把原来的文章迁移过来，结果还是遇到了不少的坑。中途在 `gitee` 和 `github` 上来回折腾，`github` 实在是太卡了，无形中增加了不少搭建的时间。所幸，最终还是弄好了，下一步就是把之前写在另一个仓库下的文章迁移过来了。\n\n`hexo` 最大的方便就是完成了基本的配置和主题的选择之后，只要专心写好 `markdown` 就好了，文章页面就交由 `hexo` 处理即可，大大提升对文章本身的专注力。\n\n最后还是要说一句：“你好，世界！”\n\n---\n\n![Cafe Terrace in Arles at Night](你好，世界/1959017488.jpg)\n> Vincent van Gogh – Cafe Terrace in Arles at Night 1888\n","source":"_posts/你好，世界.md","raw":"---\ntitle: 你好，世界\ndate: 2018-08-01 11:14:20\ntags:\ncategories: 杂记\n---\n\n折腾了一天,终于用 `hexo` 搭出来博客了,一开始上手的时候感觉很简单,应该小半天就能把原来的文章迁移过来，结果还是遇到了不少的坑。中途在 `gitee` 和 `github` 上来回折腾，`github` 实在是太卡了，无形中增加了不少搭建的时间。所幸，最终还是弄好了，下一步就是把之前写在另一个仓库下的文章迁移过来了。\n\n`hexo` 最大的方便就是完成了基本的配置和主题的选择之后，只要专心写好 `markdown` 就好了，文章页面就交由 `hexo` 处理即可，大大提升对文章本身的专注力。\n\n最后还是要说一句：“你好，世界！”\n\n---\n\n![Cafe Terrace in Arles at Night](你好，世界/1959017488.jpg)\n> Vincent van Gogh – Cafe Terrace in Arles at Night 1888\n","slug":"你好，世界","published":1,"updated":"2018-08-01T11:28:24.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbi40011ssv6t6dvpirb","content":"<p>折腾了一天,终于用 <code>hexo</code> 搭出来博客了,一开始上手的时候感觉很简单,应该小半天就能把原来的文章迁移过来，结果还是遇到了不少的坑。中途在 <code>gitee</code> 和 <code>github</code> 上来回折腾，<code>github</code> 实在是太卡了，无形中增加了不少搭建的时间。所幸，最终还是弄好了，下一步就是把之前写在另一个仓库下的文章迁移过来了。</p>\n<p><code>hexo</code> 最大的方便就是完成了基本的配置和主题的选择之后，只要专心写好 <code>markdown</code> 就好了，文章页面就交由 <code>hexo</code> 处理即可，大大提升对文章本身的专注力。</p>\n<p>最后还是要说一句：“你好，世界！”</p>\n<hr>\n<p><img src=\"/2018/08/01/你好，世界/1959017488.jpg\" alt=\"Cafe Terrace in Arles at Night\"></p>\n<blockquote>\n<p>Vincent van Gogh – Cafe Terrace in Arles at Night 1888</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>折腾了一天,终于用 <code>hexo</code> 搭出来博客了,一开始上手的时候感觉很简单,应该小半天就能把原来的文章迁移过来，结果还是遇到了不少的坑。中途在 <code>gitee</code> 和 <code>github</code> 上来回折腾，<code>github</code> 实在是太卡了，无形中增加了不少搭建的时间。所幸，最终还是弄好了，下一步就是把之前写在另一个仓库下的文章迁移过来了。</p>\n<p><code>hexo</code> 最大的方便就是完成了基本的配置和主题的选择之后，只要专心写好 <code>markdown</code> 就好了，文章页面就交由 <code>hexo</code> 处理即可，大大提升对文章本身的专注力。</p>\n<p>最后还是要说一句：“你好，世界！”</p>\n<hr>\n<p><img src=\"/2018/08/01/你好，世界/1959017488.jpg\" alt=\"Cafe Terrace in Arles at Night\"></p>\n<blockquote>\n<p>Vincent van Gogh – Cafe Terrace in Arles at Night 1888</p>\n</blockquote>\n"},{"title":"四月的清风","date":"2018-08-01T12:04:57.000Z","_content":"\n# 四月的清风\n\n我忍不住地感叹时间的快速流逝，这已经又到了四月份了，啊，时间请慢点走。\n\n## 压力\n\n做一个底层的`js`程序员，虽然表面上看起来没什么压力，可是我的内心总是被无形的压力给压迫着，像是一块重重的石头，压得喘不过气，我知道此时的我不能停下来，憋住气努力去学习。学习是一件持久的事，急躁不得，急躁不得，急躁不得。\n\n## 4.9总结\n\n过完清明节，玩了三天后，整个人好像有点零散了，注意力很难集中去做一件事，也可能是最近没什么项目可以做，有点无头苍蝇一般，不知道去做什么，心里也是因此有点烦躁啊，没有进步就是退步，希望找到一个点，平衡下，潜下心，去做一些事情。\n\n---\n\n![Vincent van Gogh – Old Man in Sorrow](四月的清风/1132638050.jpg)\n\n> Vincent van Gogh – Old Man in Sorrow 1890","source":"_posts/四月的清风.md","raw":"---\ntitle: 四月的清风\ndate: 2018-08-01 20:04:57\ntags:\ncategories: 生活\n---\n\n# 四月的清风\n\n我忍不住地感叹时间的快速流逝，这已经又到了四月份了，啊，时间请慢点走。\n\n## 压力\n\n做一个底层的`js`程序员，虽然表面上看起来没什么压力，可是我的内心总是被无形的压力给压迫着，像是一块重重的石头，压得喘不过气，我知道此时的我不能停下来，憋住气努力去学习。学习是一件持久的事，急躁不得，急躁不得，急躁不得。\n\n## 4.9总结\n\n过完清明节，玩了三天后，整个人好像有点零散了，注意力很难集中去做一件事，也可能是最近没什么项目可以做，有点无头苍蝇一般，不知道去做什么，心里也是因此有点烦躁啊，没有进步就是退步，希望找到一个点，平衡下，潜下心，去做一些事情。\n\n---\n\n![Vincent van Gogh – Old Man in Sorrow](四月的清风/1132638050.jpg)\n\n> Vincent van Gogh – Old Man in Sorrow 1890","slug":"四月的清风","published":1,"updated":"2018-08-01T12:06:09.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbic0015ssv62xa7j0dc","content":"<h1 id=\"四月的清风\"><a href=\"#四月的清风\" class=\"headerlink\" title=\"四月的清风\"></a>四月的清风</h1><p>我忍不住地感叹时间的快速流逝，这已经又到了四月份了，啊，时间请慢点走。</p>\n<h2 id=\"压力\"><a href=\"#压力\" class=\"headerlink\" title=\"压力\"></a>压力</h2><p>做一个底层的<code>js</code>程序员，虽然表面上看起来没什么压力，可是我的内心总是被无形的压力给压迫着，像是一块重重的石头，压得喘不过气，我知道此时的我不能停下来，憋住气努力去学习。学习是一件持久的事，急躁不得，急躁不得，急躁不得。</p>\n<h2 id=\"4-9总结\"><a href=\"#4-9总结\" class=\"headerlink\" title=\"4.9总结\"></a>4.9总结</h2><p>过完清明节，玩了三天后，整个人好像有点零散了，注意力很难集中去做一件事，也可能是最近没什么项目可以做，有点无头苍蝇一般，不知道去做什么，心里也是因此有点烦躁啊，没有进步就是退步，希望找到一个点，平衡下，潜下心，去做一些事情。</p>\n<hr>\n<p><img src=\"/2018/08/01/四月的清风/1132638050.jpg\" alt=\"Vincent van Gogh – Old Man in Sorrow\"></p>\n<blockquote>\n<p>Vincent van Gogh – Old Man in Sorrow 1890</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"四月的清风\"><a href=\"#四月的清风\" class=\"headerlink\" title=\"四月的清风\"></a>四月的清风</h1><p>我忍不住地感叹时间的快速流逝，这已经又到了四月份了，啊，时间请慢点走。</p>\n<h2 id=\"压力\"><a href=\"#压力\" class=\"headerlink\" title=\"压力\"></a>压力</h2><p>做一个底层的<code>js</code>程序员，虽然表面上看起来没什么压力，可是我的内心总是被无形的压力给压迫着，像是一块重重的石头，压得喘不过气，我知道此时的我不能停下来，憋住气努力去学习。学习是一件持久的事，急躁不得，急躁不得，急躁不得。</p>\n<h2 id=\"4-9总结\"><a href=\"#4-9总结\" class=\"headerlink\" title=\"4.9总结\"></a>4.9总结</h2><p>过完清明节，玩了三天后，整个人好像有点零散了，注意力很难集中去做一件事，也可能是最近没什么项目可以做，有点无头苍蝇一般，不知道去做什么，心里也是因此有点烦躁啊，没有进步就是退步，希望找到一个点，平衡下，潜下心，去做一些事情。</p>\n<hr>\n<p><img src=\"/2018/08/01/四月的清风/1132638050.jpg\" alt=\"Vincent van Gogh – Old Man in Sorrow\"></p>\n<blockquote>\n<p>Vincent van Gogh – Old Man in Sorrow 1890</p>\n</blockquote>\n"},{"title":"前端部署nginx配置","date":"2018-08-03T04:56:43.000Z","_content":"\n# 前端部署nginx配置\n\n之前很少接触前端项目的部署，这次为了更全面的学习就在本机上装了一个虚拟机上，在虚拟机上练习了如何把一个 `react` 写的 `spa` 项目部署到这个虚拟机的服务器上。由于 `linux` 也是刚接触不久，所以整个过程还是遇到了很多坑，这里记录下。\n\n## 目标\n\n我有一个用 `react` 写的单页面应用，然后希望部署到服务器上，通过 `ip` 如 `192.168.1.240/config` 这种路径下访问到我的应用。这个 `react` 项目依赖一个 `node.js` 的一个 `api` 服务，我需要在 `nginx` 上配置代理使得我的 `react` 应用能够访问到我的 `api` 服务。\n\n## 准备\n\n首先要准备的就是打包好的的 `react` 应用，然后在服务器上装一个 `nginx` 和一个 `node.js`。\n\n针对我这个项目, 我把 `react` 打包好的项目全部放到了 `/root/html/pageConfig` 这个路径下。\n\n## nginx配置\n\n修改 `nginx` 安装目录下的 `./conf/nginx.conf` 文件：\n\n``` conf\n#user nodody;\n# 1. 由于我的 react 项目打包出来放在 root 目录下，需要设置user 为 root 时内容才能够被访问\nuser root;\n\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        # 2. 对我的/api请求转发到8989端口下node.js服务\n        location /api {\n            proxy_pass  http://127.0.0.1:8989;\n        }\n        # 3. 在/config下的请求都指向到我放在root下的configPage里的内容\n         location /config {\n            alias /root/html/configPage;\n            index index.html index.htm;\n            #rewrite /config  /root/html/configPage/index.html;\n            try_files $uri $uri/ /config/index.html;\n         }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n```\n\n这里就是只修改了默认配置文件的三个地方，来满足我的要求：\n\n1. 修改 `user` 为 `root`，使得 `root` 下的内容能够被访问\n2. 新增 `location /api` 设置 `proxy_pass` 使得 `/api`下的请求都被转发到 `proxy_pass` 设置的 `node.js` 服务处,满足我的前端页面 `api` 接口代理的问题\n3. 新增 `location /config` 的配置，使得 `/config` 下请求都转发至我 `react` 打包文件所在的路径。这样我访问 `192.168.1.240/config`就能看到我的页面。*这里我当初是复制的`location /` 的配置，用的也是 `root` 指向路径，结果一直不行，查了资料，发现应该要写成 `alias` 才行*\n\n这里的配置文件可能需要更改多次，才能成功，需要注意的是，每次修改完 `nginx` 配置，需要重启下 `nginx`:\n\n```bash\nnginx -s reload\n```\n\n## 静态资源路径问题\n\n把打包好的文件传到服务器上的时候，可能出现静态资源文件找不到的情况。\n\n### 资源路径找不到的原因\n\n可能的原因是当 `react` 应用打包的时候，生成 `index.html` 文件中插入 `style` 和 `script` 标签的路径不对，从而找不到静态资源。\n\n### 静态资源找不到的解决方法\n\n需要在 `webpack` 的配置文件中去修改一下 `publicPath` 这个属性，这个属性会影响你的静态资源文件插入到 `index.html` 中的路径。像我这个项目设置 `publicPath: './'`就可以了，具体可以多修改几次多打包几次试试就行了。\n\n## 前端路由\n\n### 前端路由分类\n\n前端路由分为两种实现，一种就是 `hashRouter`，另一种就是用 `H5` 新的 `History API` 实现的 `browserRouter`。由于 `hashRouter` 的路径带一个 `#` 不是特别好看，一般还是用 `browserRouter` 较多。\n\n### 前端路由的问题\n\n前端路由说白了就是路径变了，不去请求服务器，而是用 `js` 去改变页面的方式。这样的话，用 `browserRouter` 的话这里就存在一个问题，我用前端路由跳转到某一个路径下 `/xxx`，这是我刷新页面，这时候就会去服务器上拿资源，这个前端路由路径下肯定找不到资源，所以就会出现 `404` 报错。\n\n### 解决方案\n\n解决页面刷新 `404` 这个问题，只需要把所有的请求全部返回 `index.html`，可以搜索 `history fallback` 这个关键词查看相关资料。\n\n针对我的这个 `nginx` 配置而言，只需要加入 `try_files $uri $uri/ /config/index.html;`,就能把前端路由路径发送给服务器时全部返回 `index.html`，这样就解决了 `404`问题。\n\n## Route路径匹配问题\n\n配置好上述的 `nginx` 以及把打包好的文件放到对应的目录，再把我的 `api` 服务启动，再访问 `192.168.1.240/config` 时，已经能够正常的显示页面，并且接口也能正常代理请求到了。但是涉及到路由的页面却没有被渲染出来。\n\n### Route路径匹配的原因\n\n回想一下，在 `react-router-dom` 的 `Route` 标签里传递一个 `path={'/xx'}` 的属性时，前端路由会根据这个 `path` 来渲染对应的 `Route` 上传递过去的 `Component` 组件。那么在我的 `nginx` 的设置中，我设置的是 `location /config`，也就是说我实际访问路径都是加上了前缀 `/config`，所以每个 `Route` 标签中传过去的路径都因为缺少了 `/config` 前缀导致所以的匹配都不成立，所以 `Route` 的页面都没有办法渲染。\n\n### Route路径匹配修改方法\n\n方法很简单，在 `BrowserRouter` 上加一个 `basename` 的属性，给这属性传递 `config` (*具体是什么值，依据你给 `nginx`设置 `location` 时的前缀，我的例子中是 `config`*)，这样 `Route` 在匹配路径的时候会加上 `basename`，这样就能和对应路径匹配上，然后渲染对应页面。\n\n## 总结\n\n对 `linux` 不熟悉，`nginx` 也不熟悉，依靠着百度，摸爬滚打尝试修改了好多次 `nginx` 配置，终于能够 `react` 打包好的文件部署上去了， `vue` 项目的部署也是没什么区别的。\n\n---\n\n![Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon](前端部署nginx配置/4282315052.jpg)\n\n> Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon 1503-05","source":"_posts/前端部署nginx配置.md","raw":"---\ntitle: 前端部署nginx配置\ndate: 2018-08-03 12:56:43\ntags:\n  - nginx\n  - 部署\ncategories: 前端\n---\n\n# 前端部署nginx配置\n\n之前很少接触前端项目的部署，这次为了更全面的学习就在本机上装了一个虚拟机上，在虚拟机上练习了如何把一个 `react` 写的 `spa` 项目部署到这个虚拟机的服务器上。由于 `linux` 也是刚接触不久，所以整个过程还是遇到了很多坑，这里记录下。\n\n## 目标\n\n我有一个用 `react` 写的单页面应用，然后希望部署到服务器上，通过 `ip` 如 `192.168.1.240/config` 这种路径下访问到我的应用。这个 `react` 项目依赖一个 `node.js` 的一个 `api` 服务，我需要在 `nginx` 上配置代理使得我的 `react` 应用能够访问到我的 `api` 服务。\n\n## 准备\n\n首先要准备的就是打包好的的 `react` 应用，然后在服务器上装一个 `nginx` 和一个 `node.js`。\n\n针对我这个项目, 我把 `react` 打包好的项目全部放到了 `/root/html/pageConfig` 这个路径下。\n\n## nginx配置\n\n修改 `nginx` 安装目录下的 `./conf/nginx.conf` 文件：\n\n``` conf\n#user nodody;\n# 1. 由于我的 react 项目打包出来放在 root 目录下，需要设置user 为 root 时内容才能够被访问\nuser root;\n\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        # 2. 对我的/api请求转发到8989端口下node.js服务\n        location /api {\n            proxy_pass  http://127.0.0.1:8989;\n        }\n        # 3. 在/config下的请求都指向到我放在root下的configPage里的内容\n         location /config {\n            alias /root/html/configPage;\n            index index.html index.htm;\n            #rewrite /config  /root/html/configPage/index.html;\n            try_files $uri $uri/ /config/index.html;\n         }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n```\n\n这里就是只修改了默认配置文件的三个地方，来满足我的要求：\n\n1. 修改 `user` 为 `root`，使得 `root` 下的内容能够被访问\n2. 新增 `location /api` 设置 `proxy_pass` 使得 `/api`下的请求都被转发到 `proxy_pass` 设置的 `node.js` 服务处,满足我的前端页面 `api` 接口代理的问题\n3. 新增 `location /config` 的配置，使得 `/config` 下请求都转发至我 `react` 打包文件所在的路径。这样我访问 `192.168.1.240/config`就能看到我的页面。*这里我当初是复制的`location /` 的配置，用的也是 `root` 指向路径，结果一直不行，查了资料，发现应该要写成 `alias` 才行*\n\n这里的配置文件可能需要更改多次，才能成功，需要注意的是，每次修改完 `nginx` 配置，需要重启下 `nginx`:\n\n```bash\nnginx -s reload\n```\n\n## 静态资源路径问题\n\n把打包好的文件传到服务器上的时候，可能出现静态资源文件找不到的情况。\n\n### 资源路径找不到的原因\n\n可能的原因是当 `react` 应用打包的时候，生成 `index.html` 文件中插入 `style` 和 `script` 标签的路径不对，从而找不到静态资源。\n\n### 静态资源找不到的解决方法\n\n需要在 `webpack` 的配置文件中去修改一下 `publicPath` 这个属性，这个属性会影响你的静态资源文件插入到 `index.html` 中的路径。像我这个项目设置 `publicPath: './'`就可以了，具体可以多修改几次多打包几次试试就行了。\n\n## 前端路由\n\n### 前端路由分类\n\n前端路由分为两种实现，一种就是 `hashRouter`，另一种就是用 `H5` 新的 `History API` 实现的 `browserRouter`。由于 `hashRouter` 的路径带一个 `#` 不是特别好看，一般还是用 `browserRouter` 较多。\n\n### 前端路由的问题\n\n前端路由说白了就是路径变了，不去请求服务器，而是用 `js` 去改变页面的方式。这样的话，用 `browserRouter` 的话这里就存在一个问题，我用前端路由跳转到某一个路径下 `/xxx`，这是我刷新页面，这时候就会去服务器上拿资源，这个前端路由路径下肯定找不到资源，所以就会出现 `404` 报错。\n\n### 解决方案\n\n解决页面刷新 `404` 这个问题，只需要把所有的请求全部返回 `index.html`，可以搜索 `history fallback` 这个关键词查看相关资料。\n\n针对我的这个 `nginx` 配置而言，只需要加入 `try_files $uri $uri/ /config/index.html;`,就能把前端路由路径发送给服务器时全部返回 `index.html`，这样就解决了 `404`问题。\n\n## Route路径匹配问题\n\n配置好上述的 `nginx` 以及把打包好的文件放到对应的目录，再把我的 `api` 服务启动，再访问 `192.168.1.240/config` 时，已经能够正常的显示页面，并且接口也能正常代理请求到了。但是涉及到路由的页面却没有被渲染出来。\n\n### Route路径匹配的原因\n\n回想一下，在 `react-router-dom` 的 `Route` 标签里传递一个 `path={'/xx'}` 的属性时，前端路由会根据这个 `path` 来渲染对应的 `Route` 上传递过去的 `Component` 组件。那么在我的 `nginx` 的设置中，我设置的是 `location /config`，也就是说我实际访问路径都是加上了前缀 `/config`，所以每个 `Route` 标签中传过去的路径都因为缺少了 `/config` 前缀导致所以的匹配都不成立，所以 `Route` 的页面都没有办法渲染。\n\n### Route路径匹配修改方法\n\n方法很简单，在 `BrowserRouter` 上加一个 `basename` 的属性，给这属性传递 `config` (*具体是什么值，依据你给 `nginx`设置 `location` 时的前缀，我的例子中是 `config`*)，这样 `Route` 在匹配路径的时候会加上 `basename`，这样就能和对应路径匹配上，然后渲染对应页面。\n\n## 总结\n\n对 `linux` 不熟悉，`nginx` 也不熟悉，依靠着百度，摸爬滚打尝试修改了好多次 `nginx` 配置，终于能够 `react` 打包好的文件部署上去了， `vue` 项目的部署也是没什么区别的。\n\n---\n\n![Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon](前端部署nginx配置/4282315052.jpg)\n\n> Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon 1503-05","slug":"前端部署nginx配置","published":1,"updated":"2018-08-26T03:52:41.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbic0019ssv65wyd8fam","content":"<h1 id=\"前端部署nginx配置\"><a href=\"#前端部署nginx配置\" class=\"headerlink\" title=\"前端部署nginx配置\"></a>前端部署nginx配置</h1><p>之前很少接触前端项目的部署，这次为了更全面的学习就在本机上装了一个虚拟机上，在虚拟机上练习了如何把一个 <code>react</code> 写的 <code>spa</code> 项目部署到这个虚拟机的服务器上。由于 <code>linux</code> 也是刚接触不久，所以整个过程还是遇到了很多坑，这里记录下。</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>我有一个用 <code>react</code> 写的单页面应用，然后希望部署到服务器上，通过 <code>ip</code> 如 <code>192.168.1.240/config</code> 这种路径下访问到我的应用。这个 <code>react</code> 项目依赖一个 <code>node.js</code> 的一个 <code>api</code> 服务，我需要在 <code>nginx</code> 上配置代理使得我的 <code>react</code> 应用能够访问到我的 <code>api</code> 服务。</p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>首先要准备的就是打包好的的 <code>react</code> 应用，然后在服务器上装一个 <code>nginx</code> 和一个 <code>node.js</code>。</p>\n<p>针对我这个项目, 我把 <code>react</code> 打包好的项目全部放到了 <code>/root/html/pageConfig</code> 这个路径下。</p>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><p>修改 <code>nginx</code> 安装目录下的 <code>./conf/nginx.conf</code> 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#user nodody;</span><br><span class=\"line\"># 1. 由于我的 react 项目打包出来放在 root 目录下，需要设置user 为 root 时内容才能够被访问</span><br><span class=\"line\">user root;</span><br><span class=\"line\"></span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 2. 对我的/api请求转发到8989端口下node.js服务</span><br><span class=\"line\">        location /api &#123;</span><br><span class=\"line\">            proxy_pass  http://127.0.0.1:8989;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        # 3. 在/config下的请求都指向到我放在root下的configPage里的内容</span><br><span class=\"line\">         location /config &#123;</span><br><span class=\"line\">            alias /root/html/configPage;</span><br><span class=\"line\">            index index.html index.htm;</span><br><span class=\"line\">            #rewrite /config  /root/html/configPage/index.html;</span><br><span class=\"line\">            try_files $uri $uri/ /config/index.html;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br></pre></td></tr></table></figure>\n<p>这里就是只修改了默认配置文件的三个地方，来满足我的要求：</p>\n<ol>\n<li>修改 <code>user</code> 为 <code>root</code>，使得 <code>root</code> 下的内容能够被访问</li>\n<li>新增 <code>location /api</code> 设置 <code>proxy_pass</code> 使得 <code>/api</code>下的请求都被转发到 <code>proxy_pass</code> 设置的 <code>node.js</code> 服务处,满足我的前端页面 <code>api</code> 接口代理的问题</li>\n<li>新增 <code>location /config</code> 的配置，使得 <code>/config</code> 下请求都转发至我 <code>react</code> 打包文件所在的路径。这样我访问 <code>192.168.1.240/config</code>就能看到我的页面。<em>这里我当初是复制的<code>location /</code> 的配置，用的也是 <code>root</code> 指向路径，结果一直不行，查了资料，发现应该要写成 <code>alias</code> 才行</em></li>\n</ol>\n<p>这里的配置文件可能需要更改多次，才能成功，需要注意的是，每次修改完 <code>nginx</code> 配置，需要重启下 <code>nginx</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<h2 id=\"静态资源路径问题\"><a href=\"#静态资源路径问题\" class=\"headerlink\" title=\"静态资源路径问题\"></a>静态资源路径问题</h2><p>把打包好的文件传到服务器上的时候，可能出现静态资源文件找不到的情况。</p>\n<h3 id=\"资源路径找不到的原因\"><a href=\"#资源路径找不到的原因\" class=\"headerlink\" title=\"资源路径找不到的原因\"></a>资源路径找不到的原因</h3><p>可能的原因是当 <code>react</code> 应用打包的时候，生成 <code>index.html</code> 文件中插入 <code>style</code> 和 <code>script</code> 标签的路径不对，从而找不到静态资源。</p>\n<h3 id=\"静态资源找不到的解决方法\"><a href=\"#静态资源找不到的解决方法\" class=\"headerlink\" title=\"静态资源找不到的解决方法\"></a>静态资源找不到的解决方法</h3><p>需要在 <code>webpack</code> 的配置文件中去修改一下 <code>publicPath</code> 这个属性，这个属性会影响你的静态资源文件插入到 <code>index.html</code> 中的路径。像我这个项目设置 <code>publicPath: &#39;./&#39;</code>就可以了，具体可以多修改几次多打包几次试试就行了。</p>\n<h2 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h2><h3 id=\"前端路由分类\"><a href=\"#前端路由分类\" class=\"headerlink\" title=\"前端路由分类\"></a>前端路由分类</h3><p>前端路由分为两种实现，一种就是 <code>hashRouter</code>，另一种就是用 <code>H5</code> 新的 <code>History API</code> 实现的 <code>browserRouter</code>。由于 <code>hashRouter</code> 的路径带一个 <code>#</code> 不是特别好看，一般还是用 <code>browserRouter</code> 较多。</p>\n<h3 id=\"前端路由的问题\"><a href=\"#前端路由的问题\" class=\"headerlink\" title=\"前端路由的问题\"></a>前端路由的问题</h3><p>前端路由说白了就是路径变了，不去请求服务器，而是用 <code>js</code> 去改变页面的方式。这样的话，用 <code>browserRouter</code> 的话这里就存在一个问题，我用前端路由跳转到某一个路径下 <code>/xxx</code>，这是我刷新页面，这时候就会去服务器上拿资源，这个前端路由路径下肯定找不到资源，所以就会出现 <code>404</code> 报错。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>解决页面刷新 <code>404</code> 这个问题，只需要把所有的请求全部返回 <code>index.html</code>，可以搜索 <code>history fallback</code> 这个关键词查看相关资料。</p>\n<p>针对我的这个 <code>nginx</code> 配置而言，只需要加入 <code>try_files $uri $uri/ /config/index.html;</code>,就能把前端路由路径发送给服务器时全部返回 <code>index.html</code>，这样就解决了 <code>404</code>问题。</p>\n<h2 id=\"Route路径匹配问题\"><a href=\"#Route路径匹配问题\" class=\"headerlink\" title=\"Route路径匹配问题\"></a>Route路径匹配问题</h2><p>配置好上述的 <code>nginx</code> 以及把打包好的文件放到对应的目录，再把我的 <code>api</code> 服务启动，再访问 <code>192.168.1.240/config</code> 时，已经能够正常的显示页面，并且接口也能正常代理请求到了。但是涉及到路由的页面却没有被渲染出来。</p>\n<h3 id=\"Route路径匹配的原因\"><a href=\"#Route路径匹配的原因\" class=\"headerlink\" title=\"Route路径匹配的原因\"></a>Route路径匹配的原因</h3><p>回想一下，在 <code>react-router-dom</code> 的 <code>Route</code> 标签里传递一个 <code>path={&#39;/xx&#39;}</code> 的属性时，前端路由会根据这个 <code>path</code> 来渲染对应的 <code>Route</code> 上传递过去的 <code>Component</code> 组件。那么在我的 <code>nginx</code> 的设置中，我设置的是 <code>location /config</code>，也就是说我实际访问路径都是加上了前缀 <code>/config</code>，所以每个 <code>Route</code> 标签中传过去的路径都因为缺少了 <code>/config</code> 前缀导致所以的匹配都不成立，所以 <code>Route</code> 的页面都没有办法渲染。</p>\n<h3 id=\"Route路径匹配修改方法\"><a href=\"#Route路径匹配修改方法\" class=\"headerlink\" title=\"Route路径匹配修改方法\"></a>Route路径匹配修改方法</h3><p>方法很简单，在 <code>BrowserRouter</code> 上加一个 <code>basename</code> 的属性，给这属性传递 <code>config</code> (<em>具体是什么值，依据你给 <code>nginx</code>设置 <code>location</code> 时的前缀，我的例子中是 <code>config</code></em>)，这样 <code>Route</code> 在匹配路径的时候会加上 <code>basename</code>，这样就能和对应路径匹配上，然后渲染对应页面。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>对 <code>linux</code> 不熟悉，<code>nginx</code> 也不熟悉，依靠着百度，摸爬滚打尝试修改了好多次 <code>nginx</code> 配置，终于能够 <code>react</code> 打包好的文件部署上去了， <code>vue</code> 项目的部署也是没什么区别的。</p>\n<hr>\n<p><img src=\"/2018/08/03/前端部署nginx配置/4282315052.jpg\" alt=\"Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon\"></p>\n<blockquote>\n<p>Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon 1503-05</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前端部署nginx配置\"><a href=\"#前端部署nginx配置\" class=\"headerlink\" title=\"前端部署nginx配置\"></a>前端部署nginx配置</h1><p>之前很少接触前端项目的部署，这次为了更全面的学习就在本机上装了一个虚拟机上，在虚拟机上练习了如何把一个 <code>react</code> 写的 <code>spa</code> 项目部署到这个虚拟机的服务器上。由于 <code>linux</code> 也是刚接触不久，所以整个过程还是遇到了很多坑，这里记录下。</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>我有一个用 <code>react</code> 写的单页面应用，然后希望部署到服务器上，通过 <code>ip</code> 如 <code>192.168.1.240/config</code> 这种路径下访问到我的应用。这个 <code>react</code> 项目依赖一个 <code>node.js</code> 的一个 <code>api</code> 服务，我需要在 <code>nginx</code> 上配置代理使得我的 <code>react</code> 应用能够访问到我的 <code>api</code> 服务。</p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>首先要准备的就是打包好的的 <code>react</code> 应用，然后在服务器上装一个 <code>nginx</code> 和一个 <code>node.js</code>。</p>\n<p>针对我这个项目, 我把 <code>react</code> 打包好的项目全部放到了 <code>/root/html/pageConfig</code> 这个路径下。</p>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><p>修改 <code>nginx</code> 安装目录下的 <code>./conf/nginx.conf</code> 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#user nodody;</span><br><span class=\"line\"># 1. 由于我的 react 项目打包出来放在 root 目录下，需要设置user 为 root 时内容才能够被访问</span><br><span class=\"line\">user root;</span><br><span class=\"line\"></span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 2. 对我的/api请求转发到8989端口下node.js服务</span><br><span class=\"line\">        location /api &#123;</span><br><span class=\"line\">            proxy_pass  http://127.0.0.1:8989;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        # 3. 在/config下的请求都指向到我放在root下的configPage里的内容</span><br><span class=\"line\">         location /config &#123;</span><br><span class=\"line\">            alias /root/html/configPage;</span><br><span class=\"line\">            index index.html index.htm;</span><br><span class=\"line\">            #rewrite /config  /root/html/configPage/index.html;</span><br><span class=\"line\">            try_files $uri $uri/ /config/index.html;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br></pre></td></tr></table></figure>\n<p>这里就是只修改了默认配置文件的三个地方，来满足我的要求：</p>\n<ol>\n<li>修改 <code>user</code> 为 <code>root</code>，使得 <code>root</code> 下的内容能够被访问</li>\n<li>新增 <code>location /api</code> 设置 <code>proxy_pass</code> 使得 <code>/api</code>下的请求都被转发到 <code>proxy_pass</code> 设置的 <code>node.js</code> 服务处,满足我的前端页面 <code>api</code> 接口代理的问题</li>\n<li>新增 <code>location /config</code> 的配置，使得 <code>/config</code> 下请求都转发至我 <code>react</code> 打包文件所在的路径。这样我访问 <code>192.168.1.240/config</code>就能看到我的页面。<em>这里我当初是复制的<code>location /</code> 的配置，用的也是 <code>root</code> 指向路径，结果一直不行，查了资料，发现应该要写成 <code>alias</code> 才行</em></li>\n</ol>\n<p>这里的配置文件可能需要更改多次，才能成功，需要注意的是，每次修改完 <code>nginx</code> 配置，需要重启下 <code>nginx</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<h2 id=\"静态资源路径问题\"><a href=\"#静态资源路径问题\" class=\"headerlink\" title=\"静态资源路径问题\"></a>静态资源路径问题</h2><p>把打包好的文件传到服务器上的时候，可能出现静态资源文件找不到的情况。</p>\n<h3 id=\"资源路径找不到的原因\"><a href=\"#资源路径找不到的原因\" class=\"headerlink\" title=\"资源路径找不到的原因\"></a>资源路径找不到的原因</h3><p>可能的原因是当 <code>react</code> 应用打包的时候，生成 <code>index.html</code> 文件中插入 <code>style</code> 和 <code>script</code> 标签的路径不对，从而找不到静态资源。</p>\n<h3 id=\"静态资源找不到的解决方法\"><a href=\"#静态资源找不到的解决方法\" class=\"headerlink\" title=\"静态资源找不到的解决方法\"></a>静态资源找不到的解决方法</h3><p>需要在 <code>webpack</code> 的配置文件中去修改一下 <code>publicPath</code> 这个属性，这个属性会影响你的静态资源文件插入到 <code>index.html</code> 中的路径。像我这个项目设置 <code>publicPath: &#39;./&#39;</code>就可以了，具体可以多修改几次多打包几次试试就行了。</p>\n<h2 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h2><h3 id=\"前端路由分类\"><a href=\"#前端路由分类\" class=\"headerlink\" title=\"前端路由分类\"></a>前端路由分类</h3><p>前端路由分为两种实现，一种就是 <code>hashRouter</code>，另一种就是用 <code>H5</code> 新的 <code>History API</code> 实现的 <code>browserRouter</code>。由于 <code>hashRouter</code> 的路径带一个 <code>#</code> 不是特别好看，一般还是用 <code>browserRouter</code> 较多。</p>\n<h3 id=\"前端路由的问题\"><a href=\"#前端路由的问题\" class=\"headerlink\" title=\"前端路由的问题\"></a>前端路由的问题</h3><p>前端路由说白了就是路径变了，不去请求服务器，而是用 <code>js</code> 去改变页面的方式。这样的话，用 <code>browserRouter</code> 的话这里就存在一个问题，我用前端路由跳转到某一个路径下 <code>/xxx</code>，这是我刷新页面，这时候就会去服务器上拿资源，这个前端路由路径下肯定找不到资源，所以就会出现 <code>404</code> 报错。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>解决页面刷新 <code>404</code> 这个问题，只需要把所有的请求全部返回 <code>index.html</code>，可以搜索 <code>history fallback</code> 这个关键词查看相关资料。</p>\n<p>针对我的这个 <code>nginx</code> 配置而言，只需要加入 <code>try_files $uri $uri/ /config/index.html;</code>,就能把前端路由路径发送给服务器时全部返回 <code>index.html</code>，这样就解决了 <code>404</code>问题。</p>\n<h2 id=\"Route路径匹配问题\"><a href=\"#Route路径匹配问题\" class=\"headerlink\" title=\"Route路径匹配问题\"></a>Route路径匹配问题</h2><p>配置好上述的 <code>nginx</code> 以及把打包好的文件放到对应的目录，再把我的 <code>api</code> 服务启动，再访问 <code>192.168.1.240/config</code> 时，已经能够正常的显示页面，并且接口也能正常代理请求到了。但是涉及到路由的页面却没有被渲染出来。</p>\n<h3 id=\"Route路径匹配的原因\"><a href=\"#Route路径匹配的原因\" class=\"headerlink\" title=\"Route路径匹配的原因\"></a>Route路径匹配的原因</h3><p>回想一下，在 <code>react-router-dom</code> 的 <code>Route</code> 标签里传递一个 <code>path={&#39;/xx&#39;}</code> 的属性时，前端路由会根据这个 <code>path</code> 来渲染对应的 <code>Route</code> 上传递过去的 <code>Component</code> 组件。那么在我的 <code>nginx</code> 的设置中，我设置的是 <code>location /config</code>，也就是说我实际访问路径都是加上了前缀 <code>/config</code>，所以每个 <code>Route</code> 标签中传过去的路径都因为缺少了 <code>/config</code> 前缀导致所以的匹配都不成立，所以 <code>Route</code> 的页面都没有办法渲染。</p>\n<h3 id=\"Route路径匹配修改方法\"><a href=\"#Route路径匹配修改方法\" class=\"headerlink\" title=\"Route路径匹配修改方法\"></a>Route路径匹配修改方法</h3><p>方法很简单，在 <code>BrowserRouter</code> 上加一个 <code>basename</code> 的属性，给这属性传递 <code>config</code> (<em>具体是什么值，依据你给 <code>nginx</code>设置 <code>location</code> 时的前缀，我的例子中是 <code>config</code></em>)，这样 <code>Route</code> 在匹配路径的时候会加上 <code>basename</code>，这样就能和对应路径匹配上，然后渲染对应页面。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>对 <code>linux</code> 不熟悉，<code>nginx</code> 也不熟悉，依靠着百度，摸爬滚打尝试修改了好多次 <code>nginx</code> 配置，终于能够 <code>react</code> 打包好的文件部署上去了， <code>vue</code> 项目的部署也是没什么区别的。</p>\n<hr>\n<p><img src=\"/2018/08/03/前端部署nginx配置/4282315052.jpg\" alt=\"Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon\"></p>\n<blockquote>\n<p>Raffaello Sanzio da Urbino) Raphael (Raffaello Santi – Saint George and the Dragon 1503-05</p>\n</blockquote>\n"},{"title":"小时候吃的","date":"2018-08-01T12:08:13.000Z","_content":"\n# 小时候吃的\n\n今天在公交车上回家的路上，看着车窗外城市慢慢被黑夜蒙住，街上下班的人来来往往，匆匆忙忙地，大大小小的店铺也都亮起了灯。每一天几乎同样的生活，同样的城市，好\n像什么都没有改变，只有我的年纪不断不断地在增长，有那么一瞬间，我恍惚地想起了小时候吃过的猪脏面。\n\n哈哈，我也不知道为什么突然想起了这个，小时候没什么钱，有太多太多想吃而不舍得吃的东西，长大了，也开始自己打工上班了，虽然钱不多，多少也还是积存了一小部分的钱，但小时候的味道好像很久没吃过了，垃圾街的小吃一条街也吃过几回，真的没有什么好吃的。但是小时候一碗早餐的糯米饭是真的棒啊，还有一碗紫菜汤，我在杭州打工的这段时间也吃过几次，嗯，差得远了。这么简单的糯米饭竟然做的还没有小时候的好吃，我觉得可能不是这家店没做好的原因，也可能人老了，味蕾也退化了，再也没有小时候那种的感觉了，那是种什么感觉呢，碗上的米粒全部吃干净，一粒都不剩，真是喜欢吃啊那个时候。\n\n那个时候竟然隔了那么久了，我现在依然还记得走路去小学时候的样子，在学校拐角的地方，棚子的下面，就是那家常吃的早饭店。我每天都要犹豫犹豫到底是吃糯米饭呢还是炒粉干呢，毕竟都很好吃啊，我的兜里就那么一两块，吃完早饭最多也就剩个五毛钱，那时候的物价真是让人无比的怀念啊！\n\n初中的时候，最喜欢吃的是学校出门左转一百来米的路边，都是卖的垃圾食品，大家也都喜欢中午跑那边吃吃东西，还蛮有想法，来一条两块的饭团，哎，真便宜啊，两块一条的饭团量还挺多啊，我都吃不完，旁边还有炸鸡柳，这个炸鸡柳是真的无敌好吃，我现在有点怀疑是不是加了什么罂粟壳之类的东西，怎么能那么好吃，我偶尔吃一次，，一块五一小杯，有钱人家小孩就会买个两三块钱那个装鸡柳的杯子被压的满满的看的羡慕死了，自己加料，一般也就孜然粉再来点醋，有的人喜欢加半杯醋，真的太可怕啦。\n\n高中，被关着，老实说，很少吃到好吃的东西，这几年基本没有什么特别喜欢吃的东西。\n\n大学，没有被关着，家里不是每个月固定给钱，钱不够就可以用，我没好意思向家里多要，所以也不怎么花钱，所以徐州也没留下什么特别喜欢吃的，前几天烤面筋突然火起来了，烤面筋勉强算的上还不错的廉价小食。\n\n开始打工了，自由了，也有自己的钱了，依然穷人想法，能省则省，攒钱很快乐，偶尔吃吃，和小时候的物价比起来，总感觉好多东西都消失了再也回不来了，就算同样是吃糯米饭好像带给我的感受已经完全没有小时候期待的那种感觉了，毕竟这价格和小时候的一比，根本就是对过去的回忆是一个冲击嘛！\n\n找个什么放假的时候，想找个猪脏粉的店吃一吃。在公交车上的时候查了一下，哟，这价格果然挺高啊，再考虑考虑。\n\n真想带上现在的钱，回到过去对小学拐角处棚子下的早饭店的老板说：\n\n“糯米饭和炒粉干都来一份！”\n\n---\n\n![Vincent van Gogh – Noon Rest from (after Millet)](小时候吃的/1997264555.jpg)\n\n> Vincent van Gogh – Noon Rest from (after Millet) 1890\n","source":"_posts/小时候吃的.md","raw":"---\ntitle: 小时候吃的\ndate: 2018-08-01 20:08:13\ntags:\ncategories: 生活\n---\n\n# 小时候吃的\n\n今天在公交车上回家的路上，看着车窗外城市慢慢被黑夜蒙住，街上下班的人来来往往，匆匆忙忙地，大大小小的店铺也都亮起了灯。每一天几乎同样的生活，同样的城市，好\n像什么都没有改变，只有我的年纪不断不断地在增长，有那么一瞬间，我恍惚地想起了小时候吃过的猪脏面。\n\n哈哈，我也不知道为什么突然想起了这个，小时候没什么钱，有太多太多想吃而不舍得吃的东西，长大了，也开始自己打工上班了，虽然钱不多，多少也还是积存了一小部分的钱，但小时候的味道好像很久没吃过了，垃圾街的小吃一条街也吃过几回，真的没有什么好吃的。但是小时候一碗早餐的糯米饭是真的棒啊，还有一碗紫菜汤，我在杭州打工的这段时间也吃过几次，嗯，差得远了。这么简单的糯米饭竟然做的还没有小时候的好吃，我觉得可能不是这家店没做好的原因，也可能人老了，味蕾也退化了，再也没有小时候那种的感觉了，那是种什么感觉呢，碗上的米粒全部吃干净，一粒都不剩，真是喜欢吃啊那个时候。\n\n那个时候竟然隔了那么久了，我现在依然还记得走路去小学时候的样子，在学校拐角的地方，棚子的下面，就是那家常吃的早饭店。我每天都要犹豫犹豫到底是吃糯米饭呢还是炒粉干呢，毕竟都很好吃啊，我的兜里就那么一两块，吃完早饭最多也就剩个五毛钱，那时候的物价真是让人无比的怀念啊！\n\n初中的时候，最喜欢吃的是学校出门左转一百来米的路边，都是卖的垃圾食品，大家也都喜欢中午跑那边吃吃东西，还蛮有想法，来一条两块的饭团，哎，真便宜啊，两块一条的饭团量还挺多啊，我都吃不完，旁边还有炸鸡柳，这个炸鸡柳是真的无敌好吃，我现在有点怀疑是不是加了什么罂粟壳之类的东西，怎么能那么好吃，我偶尔吃一次，，一块五一小杯，有钱人家小孩就会买个两三块钱那个装鸡柳的杯子被压的满满的看的羡慕死了，自己加料，一般也就孜然粉再来点醋，有的人喜欢加半杯醋，真的太可怕啦。\n\n高中，被关着，老实说，很少吃到好吃的东西，这几年基本没有什么特别喜欢吃的东西。\n\n大学，没有被关着，家里不是每个月固定给钱，钱不够就可以用，我没好意思向家里多要，所以也不怎么花钱，所以徐州也没留下什么特别喜欢吃的，前几天烤面筋突然火起来了，烤面筋勉强算的上还不错的廉价小食。\n\n开始打工了，自由了，也有自己的钱了，依然穷人想法，能省则省，攒钱很快乐，偶尔吃吃，和小时候的物价比起来，总感觉好多东西都消失了再也回不来了，就算同样是吃糯米饭好像带给我的感受已经完全没有小时候期待的那种感觉了，毕竟这价格和小时候的一比，根本就是对过去的回忆是一个冲击嘛！\n\n找个什么放假的时候，想找个猪脏粉的店吃一吃。在公交车上的时候查了一下，哟，这价格果然挺高啊，再考虑考虑。\n\n真想带上现在的钱，回到过去对小学拐角处棚子下的早饭店的老板说：\n\n“糯米饭和炒粉干都来一份！”\n\n---\n\n![Vincent van Gogh – Noon Rest from (after Millet)](小时候吃的/1997264555.jpg)\n\n> Vincent van Gogh – Noon Rest from (after Millet) 1890\n","slug":"小时候吃的","published":1,"updated":"2018-08-01T12:08:56.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbig001cssv61gcv2uya","content":"<h1 id=\"小时候吃的\"><a href=\"#小时候吃的\" class=\"headerlink\" title=\"小时候吃的\"></a>小时候吃的</h1><p>今天在公交车上回家的路上，看着车窗外城市慢慢被黑夜蒙住，街上下班的人来来往往，匆匆忙忙地，大大小小的店铺也都亮起了灯。每一天几乎同样的生活，同样的城市，好<br>像什么都没有改变，只有我的年纪不断不断地在增长，有那么一瞬间，我恍惚地想起了小时候吃过的猪脏面。</p>\n<p>哈哈，我也不知道为什么突然想起了这个，小时候没什么钱，有太多太多想吃而不舍得吃的东西，长大了，也开始自己打工上班了，虽然钱不多，多少也还是积存了一小部分的钱，但小时候的味道好像很久没吃过了，垃圾街的小吃一条街也吃过几回，真的没有什么好吃的。但是小时候一碗早餐的糯米饭是真的棒啊，还有一碗紫菜汤，我在杭州打工的这段时间也吃过几次，嗯，差得远了。这么简单的糯米饭竟然做的还没有小时候的好吃，我觉得可能不是这家店没做好的原因，也可能人老了，味蕾也退化了，再也没有小时候那种的感觉了，那是种什么感觉呢，碗上的米粒全部吃干净，一粒都不剩，真是喜欢吃啊那个时候。</p>\n<p>那个时候竟然隔了那么久了，我现在依然还记得走路去小学时候的样子，在学校拐角的地方，棚子的下面，就是那家常吃的早饭店。我每天都要犹豫犹豫到底是吃糯米饭呢还是炒粉干呢，毕竟都很好吃啊，我的兜里就那么一两块，吃完早饭最多也就剩个五毛钱，那时候的物价真是让人无比的怀念啊！</p>\n<p>初中的时候，最喜欢吃的是学校出门左转一百来米的路边，都是卖的垃圾食品，大家也都喜欢中午跑那边吃吃东西，还蛮有想法，来一条两块的饭团，哎，真便宜啊，两块一条的饭团量还挺多啊，我都吃不完，旁边还有炸鸡柳，这个炸鸡柳是真的无敌好吃，我现在有点怀疑是不是加了什么罂粟壳之类的东西，怎么能那么好吃，我偶尔吃一次，，一块五一小杯，有钱人家小孩就会买个两三块钱那个装鸡柳的杯子被压的满满的看的羡慕死了，自己加料，一般也就孜然粉再来点醋，有的人喜欢加半杯醋，真的太可怕啦。</p>\n<p>高中，被关着，老实说，很少吃到好吃的东西，这几年基本没有什么特别喜欢吃的东西。</p>\n<p>大学，没有被关着，家里不是每个月固定给钱，钱不够就可以用，我没好意思向家里多要，所以也不怎么花钱，所以徐州也没留下什么特别喜欢吃的，前几天烤面筋突然火起来了，烤面筋勉强算的上还不错的廉价小食。</p>\n<p>开始打工了，自由了，也有自己的钱了，依然穷人想法，能省则省，攒钱很快乐，偶尔吃吃，和小时候的物价比起来，总感觉好多东西都消失了再也回不来了，就算同样是吃糯米饭好像带给我的感受已经完全没有小时候期待的那种感觉了，毕竟这价格和小时候的一比，根本就是对过去的回忆是一个冲击嘛！</p>\n<p>找个什么放假的时候，想找个猪脏粉的店吃一吃。在公交车上的时候查了一下，哟，这价格果然挺高啊，再考虑考虑。</p>\n<p>真想带上现在的钱，回到过去对小学拐角处棚子下的早饭店的老板说：</p>\n<p>“糯米饭和炒粉干都来一份！”</p>\n<hr>\n<p><img src=\"/2018/08/01/小时候吃的/1997264555.jpg\" alt=\"Vincent van Gogh – Noon Rest from (after Millet)\"></p>\n<blockquote>\n<p>Vincent van Gogh – Noon Rest from (after Millet) 1890</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"小时候吃的\"><a href=\"#小时候吃的\" class=\"headerlink\" title=\"小时候吃的\"></a>小时候吃的</h1><p>今天在公交车上回家的路上，看着车窗外城市慢慢被黑夜蒙住，街上下班的人来来往往，匆匆忙忙地，大大小小的店铺也都亮起了灯。每一天几乎同样的生活，同样的城市，好<br>像什么都没有改变，只有我的年纪不断不断地在增长，有那么一瞬间，我恍惚地想起了小时候吃过的猪脏面。</p>\n<p>哈哈，我也不知道为什么突然想起了这个，小时候没什么钱，有太多太多想吃而不舍得吃的东西，长大了，也开始自己打工上班了，虽然钱不多，多少也还是积存了一小部分的钱，但小时候的味道好像很久没吃过了，垃圾街的小吃一条街也吃过几回，真的没有什么好吃的。但是小时候一碗早餐的糯米饭是真的棒啊，还有一碗紫菜汤，我在杭州打工的这段时间也吃过几次，嗯，差得远了。这么简单的糯米饭竟然做的还没有小时候的好吃，我觉得可能不是这家店没做好的原因，也可能人老了，味蕾也退化了，再也没有小时候那种的感觉了，那是种什么感觉呢，碗上的米粒全部吃干净，一粒都不剩，真是喜欢吃啊那个时候。</p>\n<p>那个时候竟然隔了那么久了，我现在依然还记得走路去小学时候的样子，在学校拐角的地方，棚子的下面，就是那家常吃的早饭店。我每天都要犹豫犹豫到底是吃糯米饭呢还是炒粉干呢，毕竟都很好吃啊，我的兜里就那么一两块，吃完早饭最多也就剩个五毛钱，那时候的物价真是让人无比的怀念啊！</p>\n<p>初中的时候，最喜欢吃的是学校出门左转一百来米的路边，都是卖的垃圾食品，大家也都喜欢中午跑那边吃吃东西，还蛮有想法，来一条两块的饭团，哎，真便宜啊，两块一条的饭团量还挺多啊，我都吃不完，旁边还有炸鸡柳，这个炸鸡柳是真的无敌好吃，我现在有点怀疑是不是加了什么罂粟壳之类的东西，怎么能那么好吃，我偶尔吃一次，，一块五一小杯，有钱人家小孩就会买个两三块钱那个装鸡柳的杯子被压的满满的看的羡慕死了，自己加料，一般也就孜然粉再来点醋，有的人喜欢加半杯醋，真的太可怕啦。</p>\n<p>高中，被关着，老实说，很少吃到好吃的东西，这几年基本没有什么特别喜欢吃的东西。</p>\n<p>大学，没有被关着，家里不是每个月固定给钱，钱不够就可以用，我没好意思向家里多要，所以也不怎么花钱，所以徐州也没留下什么特别喜欢吃的，前几天烤面筋突然火起来了，烤面筋勉强算的上还不错的廉价小食。</p>\n<p>开始打工了，自由了，也有自己的钱了，依然穷人想法，能省则省，攒钱很快乐，偶尔吃吃，和小时候的物价比起来，总感觉好多东西都消失了再也回不来了，就算同样是吃糯米饭好像带给我的感受已经完全没有小时候期待的那种感觉了，毕竟这价格和小时候的一比，根本就是对过去的回忆是一个冲击嘛！</p>\n<p>找个什么放假的时候，想找个猪脏粉的店吃一吃。在公交车上的时候查了一下，哟，这价格果然挺高啊，再考虑考虑。</p>\n<p>真想带上现在的钱，回到过去对小学拐角处棚子下的早饭店的老板说：</p>\n<p>“糯米饭和炒粉干都来一份！”</p>\n<hr>\n<p><img src=\"/2018/08/01/小时候吃的/1997264555.jpg\" alt=\"Vincent van Gogh – Noon Rest from (after Millet)\"></p>\n<blockquote>\n<p>Vincent van Gogh – Noon Rest from (after Millet) 1890</p>\n</blockquote>\n"},{"title":"家乡","date":"2018-08-02T01:18:15.000Z","_content":"\n# 家乡\n\n四月的最后两天，五月的前夕，我回到了老家。同样是在外地，上学的时候身边有很多的同学，每个寒暑假也基本都能回家，所以基本上端午、五一这种三天小假我是不会回家的，甚至十一的小长假我也是从来没有回去过。正式上班以后，虽然上班的地方离家乡更近了，可能少了同学陪伴，也可能是人成长了，当然也可能是父母也老了，总之，温州我回来了。\n\n下了高铁，坐上了回家的公交车，窗外的变化的城市给我的感觉是那么的熟悉又特别的陌生，这两年拆迁很疯狂，沿途看到太多处被推平留下大量建筑残渣的空地，也有很多工地开着挖掘机不停的建设着，我知道这座小城在慢慢地改变，以后我可能就认不出来这就是我的家乡了。我的家也在去年的年底被拆除了，在四月的最后一天我去了曾经生活了二十余年的地方，原本高高矮矮建筑丛生的城中村，已经基本全部被推平了，我曾经住着的房子已经没了，道路也被石头砖头杂乱的放置，认不出来了，哎，真的认不出来了。而此刻的我，已经没有了家。曾经许诺给我迎接新娘的房子已经不在了。想起了*雷子*的[家乡](http://www.kugou.com/song/#hash=CA4FB3923F4F1DD4F369B9FBA9D145C7&album_id=8439437):\n\n---\n\n我的家乡 越来越年轻\n\n就像一件俗气的衣裳\n\n越来越老的不止 爸爸的脸庞\n\n擦干那扇\n\n蒙着雾的车窗\n\n我清晰地望着陌生的家乡\n\n流失的岁月被冲抹\n\n一切都变了\n\n---\n\n回去看了住在老人房的爷爷奶奶，他们老一本的人生活很艰苦，本该退休享受生活却依然在打着给着很少钱的小零工。生活一直很艰难，我知道，平时一顿吃饭的钱可以够他们生活很久。生活不易，生活真的不容易啊。\n\n城市越来越年轻，而人却慢慢地开始变老了。\n\n---\n\n![Johannes Vermeer – View of Delft](家乡/1762221382.jpg)\n\n> Johannes Vermeer – View of Delft 1660-61\n","source":"_posts/家乡.md","raw":"---\ntitle: 家乡\ndate: 2018-08-02 09:18:15\ntags:\ncategories: 生活\n---\n\n# 家乡\n\n四月的最后两天，五月的前夕，我回到了老家。同样是在外地，上学的时候身边有很多的同学，每个寒暑假也基本都能回家，所以基本上端午、五一这种三天小假我是不会回家的，甚至十一的小长假我也是从来没有回去过。正式上班以后，虽然上班的地方离家乡更近了，可能少了同学陪伴，也可能是人成长了，当然也可能是父母也老了，总之，温州我回来了。\n\n下了高铁，坐上了回家的公交车，窗外的变化的城市给我的感觉是那么的熟悉又特别的陌生，这两年拆迁很疯狂，沿途看到太多处被推平留下大量建筑残渣的空地，也有很多工地开着挖掘机不停的建设着，我知道这座小城在慢慢地改变，以后我可能就认不出来这就是我的家乡了。我的家也在去年的年底被拆除了，在四月的最后一天我去了曾经生活了二十余年的地方，原本高高矮矮建筑丛生的城中村，已经基本全部被推平了，我曾经住着的房子已经没了，道路也被石头砖头杂乱的放置，认不出来了，哎，真的认不出来了。而此刻的我，已经没有了家。曾经许诺给我迎接新娘的房子已经不在了。想起了*雷子*的[家乡](http://www.kugou.com/song/#hash=CA4FB3923F4F1DD4F369B9FBA9D145C7&album_id=8439437):\n\n---\n\n我的家乡 越来越年轻\n\n就像一件俗气的衣裳\n\n越来越老的不止 爸爸的脸庞\n\n擦干那扇\n\n蒙着雾的车窗\n\n我清晰地望着陌生的家乡\n\n流失的岁月被冲抹\n\n一切都变了\n\n---\n\n回去看了住在老人房的爷爷奶奶，他们老一本的人生活很艰苦，本该退休享受生活却依然在打着给着很少钱的小零工。生活一直很艰难，我知道，平时一顿吃饭的钱可以够他们生活很久。生活不易，生活真的不容易啊。\n\n城市越来越年轻，而人却慢慢地开始变老了。\n\n---\n\n![Johannes Vermeer – View of Delft](家乡/1762221382.jpg)\n\n> Johannes Vermeer – View of Delft 1660-61\n","slug":"家乡","published":1,"updated":"2018-08-02T13:17:52.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbix001gssv6i9gr0mk8","content":"<h1 id=\"家乡\"><a href=\"#家乡\" class=\"headerlink\" title=\"家乡\"></a>家乡</h1><p>四月的最后两天，五月的前夕，我回到了老家。同样是在外地，上学的时候身边有很多的同学，每个寒暑假也基本都能回家，所以基本上端午、五一这种三天小假我是不会回家的，甚至十一的小长假我也是从来没有回去过。正式上班以后，虽然上班的地方离家乡更近了，可能少了同学陪伴，也可能是人成长了，当然也可能是父母也老了，总之，温州我回来了。</p>\n<p>下了高铁，坐上了回家的公交车，窗外的变化的城市给我的感觉是那么的熟悉又特别的陌生，这两年拆迁很疯狂，沿途看到太多处被推平留下大量建筑残渣的空地，也有很多工地开着挖掘机不停的建设着，我知道这座小城在慢慢地改变，以后我可能就认不出来这就是我的家乡了。我的家也在去年的年底被拆除了，在四月的最后一天我去了曾经生活了二十余年的地方，原本高高矮矮建筑丛生的城中村，已经基本全部被推平了，我曾经住着的房子已经没了，道路也被石头砖头杂乱的放置，认不出来了，哎，真的认不出来了。而此刻的我，已经没有了家。曾经许诺给我迎接新娘的房子已经不在了。想起了<em>雷子</em>的<a href=\"http://www.kugou.com/song/#hash=CA4FB3923F4F1DD4F369B9FBA9D145C7&amp;album_id=8439437\" target=\"_blank\" rel=\"noopener\">家乡</a>:</p>\n<hr>\n<p>我的家乡 越来越年轻</p>\n<p>就像一件俗气的衣裳</p>\n<p>越来越老的不止 爸爸的脸庞</p>\n<p>擦干那扇</p>\n<p>蒙着雾的车窗</p>\n<p>我清晰地望着陌生的家乡</p>\n<p>流失的岁月被冲抹</p>\n<p>一切都变了</p>\n<hr>\n<p>回去看了住在老人房的爷爷奶奶，他们老一本的人生活很艰苦，本该退休享受生活却依然在打着给着很少钱的小零工。生活一直很艰难，我知道，平时一顿吃饭的钱可以够他们生活很久。生活不易，生活真的不容易啊。</p>\n<p>城市越来越年轻，而人却慢慢地开始变老了。</p>\n<hr>\n<p><img src=\"/2018/08/02/家乡/1762221382.jpg\" alt=\"Johannes Vermeer – View of Delft\"></p>\n<blockquote>\n<p>Johannes Vermeer – View of Delft 1660-61</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"家乡\"><a href=\"#家乡\" class=\"headerlink\" title=\"家乡\"></a>家乡</h1><p>四月的最后两天，五月的前夕，我回到了老家。同样是在外地，上学的时候身边有很多的同学，每个寒暑假也基本都能回家，所以基本上端午、五一这种三天小假我是不会回家的，甚至十一的小长假我也是从来没有回去过。正式上班以后，虽然上班的地方离家乡更近了，可能少了同学陪伴，也可能是人成长了，当然也可能是父母也老了，总之，温州我回来了。</p>\n<p>下了高铁，坐上了回家的公交车，窗外的变化的城市给我的感觉是那么的熟悉又特别的陌生，这两年拆迁很疯狂，沿途看到太多处被推平留下大量建筑残渣的空地，也有很多工地开着挖掘机不停的建设着，我知道这座小城在慢慢地改变，以后我可能就认不出来这就是我的家乡了。我的家也在去年的年底被拆除了，在四月的最后一天我去了曾经生活了二十余年的地方，原本高高矮矮建筑丛生的城中村，已经基本全部被推平了，我曾经住着的房子已经没了，道路也被石头砖头杂乱的放置，认不出来了，哎，真的认不出来了。而此刻的我，已经没有了家。曾经许诺给我迎接新娘的房子已经不在了。想起了<em>雷子</em>的<a href=\"http://www.kugou.com/song/#hash=CA4FB3923F4F1DD4F369B9FBA9D145C7&amp;album_id=8439437\" target=\"_blank\" rel=\"noopener\">家乡</a>:</p>\n<hr>\n<p>我的家乡 越来越年轻</p>\n<p>就像一件俗气的衣裳</p>\n<p>越来越老的不止 爸爸的脸庞</p>\n<p>擦干那扇</p>\n<p>蒙着雾的车窗</p>\n<p>我清晰地望着陌生的家乡</p>\n<p>流失的岁月被冲抹</p>\n<p>一切都变了</p>\n<hr>\n<p>回去看了住在老人房的爷爷奶奶，他们老一本的人生活很艰苦，本该退休享受生活却依然在打着给着很少钱的小零工。生活一直很艰难，我知道，平时一顿吃饭的钱可以够他们生活很久。生活不易，生活真的不容易啊。</p>\n<p>城市越来越年轻，而人却慢慢地开始变老了。</p>\n<hr>\n<p><img src=\"/2018/08/02/家乡/1762221382.jpg\" alt=\"Johannes Vermeer – View of Delft\"></p>\n<blockquote>\n<p>Johannes Vermeer – View of Delft 1660-61</p>\n</blockquote>\n"},{"title":"牢骚","date":"2018-08-02T01:19:49.000Z","_content":"\n# 牢骚\n\n最近筹备挺久的一场面试，在昨天2018/6/4晚上终于结束了，虽然结果目前不清楚，但是自己感觉面试过程不太顺利，大概率是失败了。面完出来，外面下着小雨，狼狈地跑向公交站台，心里想法也很多，有一些失落。从一开始准备到真正面试其实时间挺长的，前后大概经过了一个来月，这一个月挺有压迫感的，虽然结果可能不如意。\n\n其实回想起来，我的一路走来虽然不是特别的坎坎坷坷波折起伏，但总归不是特别顺利。成长其实是在不断地在选择中继续选择，我也很多次试图去回想如果当初没有做出这样的选择，现在的我应该是个什么样的境地。想多了也没有什么用，只是会不断地让自己变得消极不乐观。有时候我也会去想我是幸运的，我应该承认，大学同学室友们毕业出来工作也都是坎坷满满，所以大部分的人都不是一帆风顺的，我也没必要自怨自艾。\n\n>这个世界会好吗？\n\n我想会的。\n\n---\n\n![Johannes Vermeer – Officer and Laughing Girl](牢骚/431359834.jpg)\n\n> Johannes Vermeer – Officer and Laughing Girl 1655-60\n","source":"_posts/牢骚.md","raw":"---\ntitle: 牢骚\ndate: 2018-08-02 09:19:49\ntags:\ncategories: 生活\n---\n\n# 牢骚\n\n最近筹备挺久的一场面试，在昨天2018/6/4晚上终于结束了，虽然结果目前不清楚，但是自己感觉面试过程不太顺利，大概率是失败了。面完出来，外面下着小雨，狼狈地跑向公交站台，心里想法也很多，有一些失落。从一开始准备到真正面试其实时间挺长的，前后大概经过了一个来月，这一个月挺有压迫感的，虽然结果可能不如意。\n\n其实回想起来，我的一路走来虽然不是特别的坎坎坷坷波折起伏，但总归不是特别顺利。成长其实是在不断地在选择中继续选择，我也很多次试图去回想如果当初没有做出这样的选择，现在的我应该是个什么样的境地。想多了也没有什么用，只是会不断地让自己变得消极不乐观。有时候我也会去想我是幸运的，我应该承认，大学同学室友们毕业出来工作也都是坎坷满满，所以大部分的人都不是一帆风顺的，我也没必要自怨自艾。\n\n>这个世界会好吗？\n\n我想会的。\n\n---\n\n![Johannes Vermeer – Officer and Laughing Girl](牢骚/431359834.jpg)\n\n> Johannes Vermeer – Officer and Laughing Girl 1655-60\n","slug":"牢骚","published":1,"updated":"2018-08-02T13:17:52.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbj1001jssv6tvr235fj","content":"<h1 id=\"牢骚\"><a href=\"#牢骚\" class=\"headerlink\" title=\"牢骚\"></a>牢骚</h1><p>最近筹备挺久的一场面试，在昨天2018/6/4晚上终于结束了，虽然结果目前不清楚，但是自己感觉面试过程不太顺利，大概率是失败了。面完出来，外面下着小雨，狼狈地跑向公交站台，心里想法也很多，有一些失落。从一开始准备到真正面试其实时间挺长的，前后大概经过了一个来月，这一个月挺有压迫感的，虽然结果可能不如意。</p>\n<p>其实回想起来，我的一路走来虽然不是特别的坎坎坷坷波折起伏，但总归不是特别顺利。成长其实是在不断地在选择中继续选择，我也很多次试图去回想如果当初没有做出这样的选择，现在的我应该是个什么样的境地。想多了也没有什么用，只是会不断地让自己变得消极不乐观。有时候我也会去想我是幸运的，我应该承认，大学同学室友们毕业出来工作也都是坎坷满满，所以大部分的人都不是一帆风顺的，我也没必要自怨自艾。</p>\n<blockquote>\n<p>这个世界会好吗？</p>\n</blockquote>\n<p>我想会的。</p>\n<hr>\n<p><img src=\"/2018/08/02/牢骚/431359834.jpg\" alt=\"Johannes Vermeer – Officer and Laughing Girl\"></p>\n<blockquote>\n<p>Johannes Vermeer – Officer and Laughing Girl 1655-60</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"牢骚\"><a href=\"#牢骚\" class=\"headerlink\" title=\"牢骚\"></a>牢骚</h1><p>最近筹备挺久的一场面试，在昨天2018/6/4晚上终于结束了，虽然结果目前不清楚，但是自己感觉面试过程不太顺利，大概率是失败了。面完出来，外面下着小雨，狼狈地跑向公交站台，心里想法也很多，有一些失落。从一开始准备到真正面试其实时间挺长的，前后大概经过了一个来月，这一个月挺有压迫感的，虽然结果可能不如意。</p>\n<p>其实回想起来，我的一路走来虽然不是特别的坎坎坷坷波折起伏，但总归不是特别顺利。成长其实是在不断地在选择中继续选择，我也很多次试图去回想如果当初没有做出这样的选择，现在的我应该是个什么样的境地。想多了也没有什么用，只是会不断地让自己变得消极不乐观。有时候我也会去想我是幸运的，我应该承认，大学同学室友们毕业出来工作也都是坎坷满满，所以大部分的人都不是一帆风顺的，我也没必要自怨自艾。</p>\n<blockquote>\n<p>这个世界会好吗？</p>\n</blockquote>\n<p>我想会的。</p>\n<hr>\n<p><img src=\"/2018/08/02/牢骚/431359834.jpg\" alt=\"Johannes Vermeer – Officer and Laughing Girl\"></p>\n<blockquote>\n<p>Johannes Vermeer – Officer and Laughing Girl 1655-60</p>\n</blockquote>\n"},{"title":"几个题目","date":"2018-08-16T09:18:23.000Z","_content":"\n# 记录一些题目\n\n## 2018/8/16\n\n实现一个 `transform` 方法把一个对象的 `key` 从驼峰的形式转换成 `_` 的形式。举个例子：\n\n```js\nlet obj = {\n  newUserInfo: {\n    newBook: [\n      1,\n      2,\n      {\n        userInfo: 2\n      }\n    ],\n    w: 2\n  },\n  isURL: {\n    heyTTT: \"dhsajk\"\n  }\n}\n\ntransform(obj)\n\n/**\n * {\n *   new_user_info: {\n *      new_book:[\n *        1,\n *        2,\n *        {\n *          user_info: 2\n *        }\n *      ],\n *      w:2\n *   },\n *   is_url: {\n *     hey_ttt: \"dhsajk\"\n *   }\n * }\n *\n*/\n\n```\n\n需要注意一下，递归对象、和数组都要考虑，同时出现 `isURL` 这种连续大写的也要考虑。当时在纸上手写了大概五六分钟，还行，不太难：\n\n```js\nconst transformKey = key => {\n  const reg = /([A-Z]+)/g\n  return key.replace(reg, (_, a) => {\n    return `_${a.toLowerCase()}`\n  })\n}\n\nconst isObject = obj => {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\nconst transform = obj => {\n  return Object.keys(obj).reduce((accu, current) => {\n    let value = obj[current]\n    if (isObject(value)) value = transform(value)\n    if (Array.isArray(value)) value = transformArray(value)\n    current = transformKey(current)\n    accu[current] = value\n    return accu\n  }, {})\n}\n\nconst transformArray = arr => {\n  return arr.reduce((accu, current) => {\n    if (isObject(current)) current = transform(current)\n    if (Array.isArray(current)) current = transformArray(current)\n    accu.push(current)\n    return accu\n  }, [])\n}\n```\n\n---\n\n解析 `url` 参数，出场率还挺高，和上面差不多：\n\n```js\nconst getParams = function (url) {\n    let [url, paramsString] = url.split('?')\n    return paramsString.split('&').reduce((accu, current) => {\n        let [key, value] = current.split('=')\n        if(accu[key]) {\n            if(Array.isArray(accu[key])) {\n                accu[key].push(value)\n            } else {\n                let temp = accu[key]\n                accu[key] = [temp, value]\n            }\n        } else {\n            accu[key] = value\n        }\n        return accu\n    }, {})\n}\n```\n\n---\n\n![Vincent van Gogh – The Drinkers](几个题目/1301854874.jpg)\n\n> Vincent van Gogh – The Drinkers 1890","source":"_posts/几个题目.md","raw":"---\ntitle: 几个题目\ndate: 2018-08-16 17:18:23\ntags: \n  - 面试\n  - 题目\ncategories: 前端\n---\n\n# 记录一些题目\n\n## 2018/8/16\n\n实现一个 `transform` 方法把一个对象的 `key` 从驼峰的形式转换成 `_` 的形式。举个例子：\n\n```js\nlet obj = {\n  newUserInfo: {\n    newBook: [\n      1,\n      2,\n      {\n        userInfo: 2\n      }\n    ],\n    w: 2\n  },\n  isURL: {\n    heyTTT: \"dhsajk\"\n  }\n}\n\ntransform(obj)\n\n/**\n * {\n *   new_user_info: {\n *      new_book:[\n *        1,\n *        2,\n *        {\n *          user_info: 2\n *        }\n *      ],\n *      w:2\n *   },\n *   is_url: {\n *     hey_ttt: \"dhsajk\"\n *   }\n * }\n *\n*/\n\n```\n\n需要注意一下，递归对象、和数组都要考虑，同时出现 `isURL` 这种连续大写的也要考虑。当时在纸上手写了大概五六分钟，还行，不太难：\n\n```js\nconst transformKey = key => {\n  const reg = /([A-Z]+)/g\n  return key.replace(reg, (_, a) => {\n    return `_${a.toLowerCase()}`\n  })\n}\n\nconst isObject = obj => {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\nconst transform = obj => {\n  return Object.keys(obj).reduce((accu, current) => {\n    let value = obj[current]\n    if (isObject(value)) value = transform(value)\n    if (Array.isArray(value)) value = transformArray(value)\n    current = transformKey(current)\n    accu[current] = value\n    return accu\n  }, {})\n}\n\nconst transformArray = arr => {\n  return arr.reduce((accu, current) => {\n    if (isObject(current)) current = transform(current)\n    if (Array.isArray(current)) current = transformArray(current)\n    accu.push(current)\n    return accu\n  }, [])\n}\n```\n\n---\n\n解析 `url` 参数，出场率还挺高，和上面差不多：\n\n```js\nconst getParams = function (url) {\n    let [url, paramsString] = url.split('?')\n    return paramsString.split('&').reduce((accu, current) => {\n        let [key, value] = current.split('=')\n        if(accu[key]) {\n            if(Array.isArray(accu[key])) {\n                accu[key].push(value)\n            } else {\n                let temp = accu[key]\n                accu[key] = [temp, value]\n            }\n        } else {\n            accu[key] = value\n        }\n        return accu\n    }, {})\n}\n```\n\n---\n\n![Vincent van Gogh – The Drinkers](几个题目/1301854874.jpg)\n\n> Vincent van Gogh – The Drinkers 1890","slug":"几个题目","published":1,"updated":"2018-08-26T03:52:41.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbj5001mssv6t5ictwln","content":"<h1 id=\"记录一些题目\"><a href=\"#记录一些题目\" class=\"headerlink\" title=\"记录一些题目\"></a>记录一些题目</h1><h2 id=\"2018-8-16\"><a href=\"#2018-8-16\" class=\"headerlink\" title=\"2018/8/16\"></a>2018/8/16</h2><p>实现一个 <code>transform</code> 方法把一个对象的 <code>key</code> 从驼峰的形式转换成 <code>_</code> 的形式。举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  newUserInfo: &#123;</span><br><span class=\"line\">    newBook: [</span><br><span class=\"line\">      <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"number\">2</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        userInfo: <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    w: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  isURL: &#123;</span><br><span class=\"line\">    heyTTT: <span class=\"string\">\"dhsajk\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">transform(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *   new_user_info: &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *      new_book:[</span></span><br><span class=\"line\"><span class=\"comment\"> *        1,</span></span><br><span class=\"line\"><span class=\"comment\"> *        2,</span></span><br><span class=\"line\"><span class=\"comment\"> *        &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *          user_info: 2</span></span><br><span class=\"line\"><span class=\"comment\"> *        &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *      ],</span></span><br><span class=\"line\"><span class=\"comment\"> *      w:2</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> *   is_url: &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     hey_ttt: \"dhsajk\"</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>需要注意一下，递归对象、和数组都要考虑，同时出现 <code>isURL</code> 这种连续大写的也要考虑。当时在纸上手写了大概五六分钟，还行，不太难：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> transformKey = <span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/([A-Z]+)/g</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> key.replace(reg, (_, a) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`_<span class=\"subst\">$&#123;a.toLowerCase()&#125;</span>`</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isObject = <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">'[object Object]'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> transform = <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(obj).reduce(<span class=\"function\">(<span class=\"params\">accu, current</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = obj[current]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isObject(value)) value = transform(value)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) value = transformArray(value)</span><br><span class=\"line\">    current = transformKey(current)</span><br><span class=\"line\">    accu[current] = value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accu</span><br><span class=\"line\">  &#125;, &#123;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> transformArray = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">accu, current</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isObject(current)) current = transform(current)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(current)) current = transformArray(current)</span><br><span class=\"line\">    accu.push(current)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accu</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>解析 <code>url</code> 参数，出场率还挺高，和上面差不多：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getParams = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [url, paramsString] = url.split(<span class=\"string\">'?'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> paramsString.split(<span class=\"string\">'&amp;'</span>).reduce(<span class=\"function\">(<span class=\"params\">accu, current</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> [key, value] = current.split(<span class=\"string\">'='</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(accu[key]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(accu[key])) &#123;</span><br><span class=\"line\">                accu[key].push(value)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> temp = accu[key]</span><br><span class=\"line\">                accu[key] = [temp, value]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            accu[key] = value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> accu</span><br><span class=\"line\">    &#125;, &#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><img src=\"/2018/08/16/几个题目/1301854874.jpg\" alt=\"Vincent van Gogh – The Drinkers\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Drinkers 1890</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"记录一些题目\"><a href=\"#记录一些题目\" class=\"headerlink\" title=\"记录一些题目\"></a>记录一些题目</h1><h2 id=\"2018-8-16\"><a href=\"#2018-8-16\" class=\"headerlink\" title=\"2018/8/16\"></a>2018/8/16</h2><p>实现一个 <code>transform</code> 方法把一个对象的 <code>key</code> 从驼峰的形式转换成 <code>_</code> 的形式。举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  newUserInfo: &#123;</span><br><span class=\"line\">    newBook: [</span><br><span class=\"line\">      <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"number\">2</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        userInfo: <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    w: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  isURL: &#123;</span><br><span class=\"line\">    heyTTT: <span class=\"string\">\"dhsajk\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">transform(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *   new_user_info: &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *      new_book:[</span></span><br><span class=\"line\"><span class=\"comment\"> *        1,</span></span><br><span class=\"line\"><span class=\"comment\"> *        2,</span></span><br><span class=\"line\"><span class=\"comment\"> *        &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *          user_info: 2</span></span><br><span class=\"line\"><span class=\"comment\"> *        &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *      ],</span></span><br><span class=\"line\"><span class=\"comment\"> *      w:2</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> *   is_url: &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     hey_ttt: \"dhsajk\"</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>需要注意一下，递归对象、和数组都要考虑，同时出现 <code>isURL</code> 这种连续大写的也要考虑。当时在纸上手写了大概五六分钟，还行，不太难：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> transformKey = <span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/([A-Z]+)/g</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> key.replace(reg, (_, a) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`_<span class=\"subst\">$&#123;a.toLowerCase()&#125;</span>`</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isObject = <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">'[object Object]'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> transform = <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(obj).reduce(<span class=\"function\">(<span class=\"params\">accu, current</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = obj[current]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isObject(value)) value = transform(value)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) value = transformArray(value)</span><br><span class=\"line\">    current = transformKey(current)</span><br><span class=\"line\">    accu[current] = value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accu</span><br><span class=\"line\">  &#125;, &#123;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> transformArray = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">accu, current</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isObject(current)) current = transform(current)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(current)) current = transformArray(current)</span><br><span class=\"line\">    accu.push(current)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accu</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>解析 <code>url</code> 参数，出场率还挺高，和上面差不多：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getParams = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [url, paramsString] = url.split(<span class=\"string\">'?'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> paramsString.split(<span class=\"string\">'&amp;'</span>).reduce(<span class=\"function\">(<span class=\"params\">accu, current</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> [key, value] = current.split(<span class=\"string\">'='</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(accu[key]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(accu[key])) &#123;</span><br><span class=\"line\">                accu[key].push(value)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> temp = accu[key]</span><br><span class=\"line\">                accu[key] = [temp, value]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            accu[key] = value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> accu</span><br><span class=\"line\">    &#125;, &#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><img src=\"/2018/08/16/几个题目/1301854874.jpg\" alt=\"Vincent van Gogh – The Drinkers\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Drinkers 1890</p>\n</blockquote>\n"},{"title":"看到的面试题","date":"2018-08-03T01:35:15.000Z","_content":"\n# 看到的面试题\n\n## 1. 一个函数a接受一个整数参数b，返回[1,4,6,14,26,54...],长度为b\n\n规律：`currentValue`为当前值，`index`为当前索引值,`nextValue`为下一个值，`nextValue`为`currentValue * 2 然后根据index奇偶性加减2`\n\n```js\nconst a = (b) => {\n    const arr = new Array(b).fill(0)\n    arr.reduce((accu,val,index,arr) => {\n        arr[index] = accu\n        accu = arr[index] * 2 + (index % 2 === 0 ? 2 : -2)\n        return accu\n    },1)\n    return arr\n}\n```\n\n以为简单，依然还是有坑，稍微总结一下，`reduce`方法是数组操作比较万能的方法，也比较简洁，中途遇到最大的一个问题是`new Array()`出来的数组是空的，空数组进不到`reduce`里面\n\n## 2. 设计一个函数a，可以让a这样执行：`a(() => console.log(1)).a(() => {console.log(2)})(() => {console.log(3)})`;输出213，如果这样执行`a(() => {console.log(1)})(() => {console.log(2)}).a(() => {console.log(3)})`;输出321；（考察**函数返回值**、**队列**、**构造函数**的理解）\n\n```js\na(() => {\n    console.log(1)\n}).a(() => {\n    console.log(2)\n})(() => {\n    console.log(3)\n})\n\n// a(1).a(2)(3)\n//output 213\n```\n\n```js\na(() => {\n    console.log(1)\n    })(() => {\n        console.log(2)\n        }).a(() => {\n            console.log(3)\n            })\n// a(1)(2).a(3)\n// output 321\n```\n\n* `a函数`可以接受一个`function`做为参数\n\n```js\n//这是大概想像a可能是这样的\nfunction a(func){\n    func()\n}\n```\n\n* 执行完`a`函数可以继续调用`a`函数\n\n```js\n//假想可能返回了this\nfunction a(func){\n    func()\n    return this\n}\n```\n\n* 返回值能够继续传入参数，说明返回值是个`方法`，返回`this`应该不对,并且这个方法上有自身的引用\n\n```js\nfunction a(func){\n    a.a = a\n    func()\n    return a\n}\n```\n\n* 这样子就有问题了，虽然能满足不报错，但是输出值的顺序不对，全是顺序输出,并且`a.a = a`这种方式不好，所以加入`b函数`\n\n```js\nfunction a(func){\n    var b = function(){\n\n    }\n\n    func()\n\n    b.a = a\n\n    return b\n}\n```\n\n* 这样还是没有解决数序的问题，但是从`a`本身剥离出一个`b`\n\n```js\n//a(1)._a(2)(3)  -> 213\n//a(1)(2)._a(3)  -> 321\nfunction a(func){\n    var b = function(b_func){\n        b_func()\n        return b\n    }\n\n    b._a = function(_func){\n        _func()\n        b(func)\n        return b\n    }\n\n    return b\n}\n```\n\n结果不对，还得再看看\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Ninth Wave](看到的面试题/713080393.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Ninth Wave 1850","source":"_posts/看到的面试题.md","raw":"---\ntitle: 看到的面试题\ndate: 2018-08-03 09:35:15\ntags:\n  - 面试\n  - 题目\ncategories: 前端\n---\n\n# 看到的面试题\n\n## 1. 一个函数a接受一个整数参数b，返回[1,4,6,14,26,54...],长度为b\n\n规律：`currentValue`为当前值，`index`为当前索引值,`nextValue`为下一个值，`nextValue`为`currentValue * 2 然后根据index奇偶性加减2`\n\n```js\nconst a = (b) => {\n    const arr = new Array(b).fill(0)\n    arr.reduce((accu,val,index,arr) => {\n        arr[index] = accu\n        accu = arr[index] * 2 + (index % 2 === 0 ? 2 : -2)\n        return accu\n    },1)\n    return arr\n}\n```\n\n以为简单，依然还是有坑，稍微总结一下，`reduce`方法是数组操作比较万能的方法，也比较简洁，中途遇到最大的一个问题是`new Array()`出来的数组是空的，空数组进不到`reduce`里面\n\n## 2. 设计一个函数a，可以让a这样执行：`a(() => console.log(1)).a(() => {console.log(2)})(() => {console.log(3)})`;输出213，如果这样执行`a(() => {console.log(1)})(() => {console.log(2)}).a(() => {console.log(3)})`;输出321；（考察**函数返回值**、**队列**、**构造函数**的理解）\n\n```js\na(() => {\n    console.log(1)\n}).a(() => {\n    console.log(2)\n})(() => {\n    console.log(3)\n})\n\n// a(1).a(2)(3)\n//output 213\n```\n\n```js\na(() => {\n    console.log(1)\n    })(() => {\n        console.log(2)\n        }).a(() => {\n            console.log(3)\n            })\n// a(1)(2).a(3)\n// output 321\n```\n\n* `a函数`可以接受一个`function`做为参数\n\n```js\n//这是大概想像a可能是这样的\nfunction a(func){\n    func()\n}\n```\n\n* 执行完`a`函数可以继续调用`a`函数\n\n```js\n//假想可能返回了this\nfunction a(func){\n    func()\n    return this\n}\n```\n\n* 返回值能够继续传入参数，说明返回值是个`方法`，返回`this`应该不对,并且这个方法上有自身的引用\n\n```js\nfunction a(func){\n    a.a = a\n    func()\n    return a\n}\n```\n\n* 这样子就有问题了，虽然能满足不报错，但是输出值的顺序不对，全是顺序输出,并且`a.a = a`这种方式不好，所以加入`b函数`\n\n```js\nfunction a(func){\n    var b = function(){\n\n    }\n\n    func()\n\n    b.a = a\n\n    return b\n}\n```\n\n* 这样还是没有解决数序的问题，但是从`a`本身剥离出一个`b`\n\n```js\n//a(1)._a(2)(3)  -> 213\n//a(1)(2)._a(3)  -> 321\nfunction a(func){\n    var b = function(b_func){\n        b_func()\n        return b\n    }\n\n    b._a = function(_func){\n        _func()\n        b(func)\n        return b\n    }\n\n    return b\n}\n```\n\n结果不对，还得再看看\n\n---\n\n![Ivan Konstantinovich Aivazovsky – Ninth Wave](看到的面试题/713080393.jpg)\n\n> Ivan Konstantinovich Aivazovsky – Ninth Wave 1850","slug":"看到的面试题","published":1,"updated":"2018-08-03T11:48:58.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbj9001qssv6yctlr7j1","content":"<h1 id=\"看到的面试题\"><a href=\"#看到的面试题\" class=\"headerlink\" title=\"看到的面试题\"></a>看到的面试题</h1><h2 id=\"1-一个函数a接受一个整数参数b，返回-1-4-6-14-26-54…-长度为b\"><a href=\"#1-一个函数a接受一个整数参数b，返回-1-4-6-14-26-54…-长度为b\" class=\"headerlink\" title=\"1. 一个函数a接受一个整数参数b，返回[1,4,6,14,26,54…],长度为b\"></a>1. 一个函数a接受一个整数参数b，返回[1,4,6,14,26,54…],长度为b</h2><p>规律：<code>currentValue</code>为当前值，<code>index</code>为当前索引值,<code>nextValue</code>为下一个值，<code>nextValue</code>为<code>currentValue * 2 然后根据index奇偶性加减2</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"function\">(<span class=\"params\">b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(b).fill(<span class=\"number\">0</span>)</span><br><span class=\"line\">    arr.reduce(<span class=\"function\">(<span class=\"params\">accu,val,index,arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        arr[index] = accu</span><br><span class=\"line\">        accu = arr[index] * <span class=\"number\">2</span> + (index % <span class=\"number\">2</span> === <span class=\"number\">0</span> ? <span class=\"number\">2</span> : <span class=\"number\">-2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> accu</span><br><span class=\"line\">    &#125;,<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以为简单，依然还是有坑，稍微总结一下，<code>reduce</code>方法是数组操作比较万能的方法，也比较简洁，中途遇到最大的一个问题是<code>new Array()</code>出来的数组是空的，空数组进不到<code>reduce</code>里面</p>\n<h2 id=\"2-设计一个函数a，可以让a这样执行：a-gt-console-log-1-a-gt-console-log-2-gt-console-log-3-输出213，如果这样执行a-gt-console-log-1-gt-console-log-2-a-gt-console-log-3-输出321；（考察函数返回值、队列、构造函数的理解）\"><a href=\"#2-设计一个函数a，可以让a这样执行：a-gt-console-log-1-a-gt-console-log-2-gt-console-log-3-输出213，如果这样执行a-gt-console-log-1-gt-console-log-2-a-gt-console-log-3-输出321；（考察函数返回值、队列、构造函数的理解）\" class=\"headerlink\" title=\"2. 设计一个函数a，可以让a这样执行：a(() =&gt; console.log(1)).a(() =&gt; {console.log(2)})(() =&gt; {console.log(3)});输出213，如果这样执行a(() =&gt; {console.log(1)})(() =&gt; {console.log(2)}).a(() =&gt; {console.log(3)});输出321；（考察函数返回值、队列、构造函数的理解）\"></a>2. 设计一个函数a，可以让a这样执行：<code>a(() =&gt; console.log(1)).a(() =&gt; {console.log(2)})(() =&gt; {console.log(3)})</code>;输出213，如果这样执行<code>a(() =&gt; {console.log(1)})(() =&gt; {console.log(2)}).a(() =&gt; {console.log(3)})</code>;输出321；（考察<strong>函数返回值</strong>、<strong>队列</strong>、<strong>构造函数</strong>的理解）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;).a(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a(1).a(2)(3)</span></span><br><span class=\"line\"><span class=\"comment\">//output 213</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;)(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">        &#125;).a(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"><span class=\"comment\">// a(1)(2).a(3)</span></span><br><span class=\"line\"><span class=\"comment\">// output 321</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>a函数</code>可以接受一个<code>function</code>做为参数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这是大概想像a可能是这样的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">func</span>)</span>&#123;</span><br><span class=\"line\">    func()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行完<code>a</code>函数可以继续调用<code>a</code>函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假想可能返回了this</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">func</span>)</span>&#123;</span><br><span class=\"line\">    func()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>返回值能够继续传入参数，说明返回值是个<code>方法</code>，返回<code>this</code>应该不对,并且这个方法上有自身的引用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">func</span>)</span>&#123;</span><br><span class=\"line\">    a.a = a</span><br><span class=\"line\">    func()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这样子就有问题了，虽然能满足不报错，但是输出值的顺序不对，全是顺序输出,并且<code>a.a = a</code>这种方式不好，所以加入<code>b函数</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">func</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    func()</span><br><span class=\"line\"></span><br><span class=\"line\">    b.a = a</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这样还是没有解决数序的问题，但是从<code>a</code>本身剥离出一个<code>b</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a(1)._a(2)(3)  -&gt; 213</span></span><br><span class=\"line\"><span class=\"comment\">//a(1)(2)._a(3)  -&gt; 321</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">func</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b_func</span>)</span>&#123;</span><br><span class=\"line\">        b_func()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    b._a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_func</span>)</span>&#123;</span><br><span class=\"line\">        _func()</span><br><span class=\"line\">        b(func)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果不对，还得再看看</p>\n<hr>\n<p><img src=\"/2018/08/03/看到的面试题/713080393.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Ninth Wave\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Ninth Wave 1850</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"看到的面试题\"><a href=\"#看到的面试题\" class=\"headerlink\" title=\"看到的面试题\"></a>看到的面试题</h1><h2 id=\"1-一个函数a接受一个整数参数b，返回-1-4-6-14-26-54…-长度为b\"><a href=\"#1-一个函数a接受一个整数参数b，返回-1-4-6-14-26-54…-长度为b\" class=\"headerlink\" title=\"1. 一个函数a接受一个整数参数b，返回[1,4,6,14,26,54…],长度为b\"></a>1. 一个函数a接受一个整数参数b，返回[1,4,6,14,26,54…],长度为b</h2><p>规律：<code>currentValue</code>为当前值，<code>index</code>为当前索引值,<code>nextValue</code>为下一个值，<code>nextValue</code>为<code>currentValue * 2 然后根据index奇偶性加减2</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"function\">(<span class=\"params\">b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(b).fill(<span class=\"number\">0</span>)</span><br><span class=\"line\">    arr.reduce(<span class=\"function\">(<span class=\"params\">accu,val,index,arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        arr[index] = accu</span><br><span class=\"line\">        accu = arr[index] * <span class=\"number\">2</span> + (index % <span class=\"number\">2</span> === <span class=\"number\">0</span> ? <span class=\"number\">2</span> : <span class=\"number\">-2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> accu</span><br><span class=\"line\">    &#125;,<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以为简单，依然还是有坑，稍微总结一下，<code>reduce</code>方法是数组操作比较万能的方法，也比较简洁，中途遇到最大的一个问题是<code>new Array()</code>出来的数组是空的，空数组进不到<code>reduce</code>里面</p>\n<h2 id=\"2-设计一个函数a，可以让a这样执行：a-gt-console-log-1-a-gt-console-log-2-gt-console-log-3-输出213，如果这样执行a-gt-console-log-1-gt-console-log-2-a-gt-console-log-3-输出321；（考察函数返回值、队列、构造函数的理解）\"><a href=\"#2-设计一个函数a，可以让a这样执行：a-gt-console-log-1-a-gt-console-log-2-gt-console-log-3-输出213，如果这样执行a-gt-console-log-1-gt-console-log-2-a-gt-console-log-3-输出321；（考察函数返回值、队列、构造函数的理解）\" class=\"headerlink\" title=\"2. 设计一个函数a，可以让a这样执行：a(() =&gt; console.log(1)).a(() =&gt; {console.log(2)})(() =&gt; {console.log(3)});输出213，如果这样执行a(() =&gt; {console.log(1)})(() =&gt; {console.log(2)}).a(() =&gt; {console.log(3)});输出321；（考察函数返回值、队列、构造函数的理解）\"></a>2. 设计一个函数a，可以让a这样执行：<code>a(() =&gt; console.log(1)).a(() =&gt; {console.log(2)})(() =&gt; {console.log(3)})</code>;输出213，如果这样执行<code>a(() =&gt; {console.log(1)})(() =&gt; {console.log(2)}).a(() =&gt; {console.log(3)})</code>;输出321；（考察<strong>函数返回值</strong>、<strong>队列</strong>、<strong>构造函数</strong>的理解）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;).a(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;)(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a(1).a(2)(3)</span></span><br><span class=\"line\"><span class=\"comment\">//output 213</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;)(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">        &#125;).a(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"><span class=\"comment\">// a(1)(2).a(3)</span></span><br><span class=\"line\"><span class=\"comment\">// output 321</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>a函数</code>可以接受一个<code>function</code>做为参数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这是大概想像a可能是这样的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">func</span>)</span>&#123;</span><br><span class=\"line\">    func()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行完<code>a</code>函数可以继续调用<code>a</code>函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假想可能返回了this</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">func</span>)</span>&#123;</span><br><span class=\"line\">    func()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>返回值能够继续传入参数，说明返回值是个<code>方法</code>，返回<code>this</code>应该不对,并且这个方法上有自身的引用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">func</span>)</span>&#123;</span><br><span class=\"line\">    a.a = a</span><br><span class=\"line\">    func()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这样子就有问题了，虽然能满足不报错，但是输出值的顺序不对，全是顺序输出,并且<code>a.a = a</code>这种方式不好，所以加入<code>b函数</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">func</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    func()</span><br><span class=\"line\"></span><br><span class=\"line\">    b.a = a</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这样还是没有解决数序的问题，但是从<code>a</code>本身剥离出一个<code>b</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a(1)._a(2)(3)  -&gt; 213</span></span><br><span class=\"line\"><span class=\"comment\">//a(1)(2)._a(3)  -&gt; 321</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">func</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b_func</span>)</span>&#123;</span><br><span class=\"line\">        b_func()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    b._a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_func</span>)</span>&#123;</span><br><span class=\"line\">        _func()</span><br><span class=\"line\">        b(func)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果不对，还得再看看</p>\n<hr>\n<p><img src=\"/2018/08/03/看到的面试题/713080393.jpg\" alt=\"Ivan Konstantinovich Aivazovsky – Ninth Wave\"></p>\n<blockquote>\n<p>Ivan Konstantinovich Aivazovsky – Ninth Wave 1850</p>\n</blockquote>\n"},{"title":"神奇的reduce","date":"2018-08-01T04:06:23.000Z","_content":"\n# 神奇的reduce\n\n这是一个用得好就很装逼的方法，简约而强大。\n\n## 干什么用的\n\n> reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。\n说的挺复杂，看个mdn例子先：\n\n```js\nconst arrary1 = [1, 2, 3, 4]\nconst reducer = (accumulator, currentValue) => accumulator + currentValue\n//1+2+3+4\nconsole.log(array1.reduce(reducer))\n\n//5+1+2+3+4\nconsole.log(array1.reduce(reducer, 5))\n```\n\n## 语法\n\n```js\narr.reduce(callback[,initalValue])\n```\n\n### 参数\n\n* callback 回调函数\n  * accumulator **累加器累加回调的返回值**\n  * currentValue **数组中正在处理的元素**\n  * currentIndex(optional) 数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。\n  * array(optional) 调用reduce的数组\n\n* initalValue(optional) 用作第一个调用 callback的第一个参数的值\n\n### 返回值\n\n函数累计处理的结果\n\n## 描述\n\n`reduce`为数组中的每一个元素依次执行`callback`函数，不包括数组中被删除或从未被赋值的元素，接受四个参数。\n\n回调函数第一次执行时，`accumulator`和`currentValue`的取值有两种情况：调用`reduce`时提供`initialValue`，`accumulator`取值为`initialValue`，`currentValue`取数组中的第一个值；没有提供 `initialValue`，`accumulator`取数组中的第一个值，`currentValue`取数组中的第二个值。\n\n> 如果没有提供`initialValue`，`reduce` 会从索引1的地方开始执行 `callback` 方法，跳过第一个索引。如果提供`initialValue`，从索引0开始。\n\n如果数组为空且没有提供`initialValue`，会抛出`TypeError` 。如果数组仅有一个元素（无论位置如何）并且没有提供`initialValue`， 或者有提供`initialValue`但是数组为空，那么此唯一值将被返回并且`callback`不会被执行。\n\n提供初始值通常更安全，正如下面的例子，如果没有提供initialValue，则可能有三种输出：\n\n```js\nvar maxCallback = ( pre, cur ) => Math.max( pre.x, cur.x );\nvar maxCallback2 = ( max, cur ) => Math.max( max, cur );\n\n// reduce() without initialValue\n[ { x: 22 }, { x: 42 } ].reduce( maxCallback ); // 42\n[ { x: 22 }            ].reduce( maxCallback ); // { x: 22 }\n[                      ].reduce( maxCallback ); // TypeError\n\n// map/reduce; better solution, also works for empty arrays\n[ { x: 22 }, { x: 42 } ].map( el => el.x )\n                        .reduce( maxCallback2, -Infinity );\n```\n\n### reduce如何运行\n\n假如运行下段代码：\n\n```js\n[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array){\n  return accumulator + currentValue;\n});\n```\n\n| callback    | accumulator | currentValue | currentIndex | array           | return value |\n| ----------- | ----------- | ------------ | ------------ | --------------- | ------------ |\n| first call  | 0           | 1            | 1            | [0, 1, 2, 3, 4] | 1            |\n| second call | 1           | 2            | 2            | [0, 1, 2, 3, 4] | 3            |\n| third call  | 3           | 3            | 3            | [0, 1, 2, 3, 4] | 6            |\n| fourth call | 6           | 4            | 4            | [0, 1, 2, 3, 4] | 10           |\n由`reduce`返回的值将是上次回调调用的值`（10）`。\n\n你同样可以使用箭头函数的形式，下面的代码会输出跟前面一样的结果\n\n您还可以提供[Arrow Function](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions) 代替完整功能。 下面的代码将产生与上面的代码中相同的输出：\n\n```js\n[0, 1, 2, 3, 4].reduce((prev, curr) => prev + curr );\n```\n\n如果你打算提供一个初始值作为`reduce`方法的第二个参数，以下是运行过程及结果：\n\n```js\n[0, 1, 2, 3, 4].reduce((accumulator, currentValue, currentIndex, array) => { return accumulator + currentValue; }, 10 )\n```\n\n| callback    | accumulator | currentValue | currentIndex | array           | return value |\n| ----------- | ----------- | ------------ | ------------ | --------------- | ------------ |\n| first call  | 10          | 0            | 0            | [0, 1, 2, 3, 4] | 10           |\n| second call | 10          | 1            | 1            | [0, 1, 2, 3, 4] | 11           |\n| third call  | 11          | 2            | 2            | [0, 1, 2, 3, 4] | 13           |\n| fourth call | 13          | 3            | 3            | [0, 1, 2, 3, 4] | 16           |\n| fourth call | 16          | 4            | 4            | [0, 1, 2, 3, 4] | 20           |\n这种情况下reduce返回的值是`20`。\n\n## 例子\n\n数组里所有值的和\n\n```js\nvar sum = [0, 1, 2, 3].reduce(function (a, b) {\n  return a + b;\n}, 0);\n// sum is 6\n```\n\n你也可以写成箭头函数的形式：\n\n```js\nvar total = [ 0, 1, 2, 3 ].reduce(\n  ( acc, cur ) => acc + cur,\n  0\n);\n```\n\n### 将二维数组转化为一维\n\n```js\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  function(a, b) {\n    return a.concat(b);\n  },\n  []\n);\n// flattened is [0, 1, 2, 3, 4, 5]\n```\n\n你也可以写成箭头函数的形式：\n\n```js\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n ( acc, cur ) => acc.concat(cur),\n []\n);\n```\n\n### 计算数组中每个元素出现的次数\n\n```js\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nvar countedNames = names.reduce(function (allNames, name) { \n  if (name in allNames) {\n    allNames[name]++;\n  }\n  else {\n    allNames[name] = 1;\n  }\n  return allNames;\n}, {});\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n\n### 使用扩展运算符和initialValue绑定包含在对象数组中的数组\n\n```js\n// friends - an array of objects \n// where object field \"books\" - list of favorite books \nvar friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}];\n\n// allbooks - list which will contain all friends' books +  \n// additional list contained in initialValue\nvar allbooks = friends.reduce(function(prev, curr) {\n  return [...prev, ...curr.books];\n}, ['Alphabet']);\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', \n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n```\n\n### 数组去重\n\n```js\nlet arr = [1,2,1,2,3,5,4,5,3,4,4,4,4];\nlet result = arr.sort().reduce((init, current)=>{\n    if(init.length===0 || init[init.length-1]!==current){\n        init.push(current);\n    }\n    return init;\n}, []);\nconsole.log(result); //[1,2,3,4,5]\n```\n\n### 同时实现map和filter\n\n```js\nconst numbers = [10, 20, 30, 40];\nconst doubledOver50 = numbers.reduce((finalList, num) => {\n  \n  num = num * 2; \n  \n  if (num > 50) {\n    finalList.push(num);\n  }\n  return finalList;\n}, []);\ndoubledOver50; // [60, 80]\n```\n\n### 匹配圆括号\n\nreduce的另外一个用途是能够匹配给定字符串中的圆括号。对于一个含有圆括号的字符串，我们需要知道(和)的数量是否一致，并且(是否出现在)之前。\n\n下面的代码中我们使用reduce可以轻松地解决这个问题。我们只需要先声明一个counter变量，初值为0。在遇到(时counter加一，遇到)时counter减一。如果左右括号数目匹配，那最终结果为0。\n\n```js\n//Returns 0 if balanced.\nconst isParensBalanced = (str) => {\n  return str.split('').reduce((counter, char) => {\n    if(counter < 0) { //matched \")\" before \"(\"\n      return counter;\n    } else if(char === '(') {\n      return ++counter;\n    } else if(char === ')') {\n      return --counter;\n    }  else { //matched some other char\n      return counter;\n    }\n    \n  }, 0); //<-- starting value of the counter\n}\nisParensBalanced('(())') // 0 <-- balanced\nisParensBalanced('(asdfds)') //0 <-- balanced\nisParensBalanced('(()') // 1 <-- not balanced\nisParensBalanced(')(') // -1 <-- not balanced\n```\n\n## Polyfill\n\n```js\n// Production steps of ECMA-262, Edition 5, 15.4.4.21\n// Reference: http://es5.github.io/#x15.4.4.21\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\nif (!Array.prototype.reduce) {\n  Object.defineProperty(Array.prototype, 'reduce', {\n    value: function(callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError( 'Array.prototype.reduce ' + \n          'called on null or undefined' );\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError( callback +\n          ' is not a function');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0; \n\n      // Steps 3, 4, 5, 6, 7      \n      var k = 0; \n      var value;\n\n      if (arguments.length >= 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in o)) {\n          k++; \n        }\n\n        // 3. If len is 0 and initialValue is not present,\n        //    throw a TypeError exception.\n        if (k >= len) {\n          throw new TypeError( 'Reduce of empty array ' +\n            'with no initial value' );\n        }\n        value = o[k++];\n      }\n\n      // 8. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        // c. If kPresent is true, then\n        //    i.  Let kValue be ? Get(O, Pk).\n        //    ii. Let accumulator be ? Call(\n        //          callbackfn, undefined,\n        //          « accumulator, kValue, k, O »).\n        if (k in o) {\n          value = callback(value, o[k], k, o);\n        }\n\n        // d. Increase k by 1.      \n        k++;\n      }\n\n      // 9. Return accumulator.\n      return value;\n    }\n  });\n}\n```\n\n[参考链接](https://segmentfault.com/a/1190000013972464?utm_source=feed-content)\n\n---\n\n![Vincent van Gogh – The Parsonage at Nuenen](神奇的reduce/1917180847.jpg)\n\n> Vincent van Gogh – The Parsonage at Nuenen 1885\n","source":"_posts/神奇的reduce.md","raw":"---\ntitle: 神奇的reduce\ndate: 2018-08-01 12:06:23\ntags:\n  - reduce\n  - 数组\ncategories: 前端\n---\n\n# 神奇的reduce\n\n这是一个用得好就很装逼的方法，简约而强大。\n\n## 干什么用的\n\n> reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。\n说的挺复杂，看个mdn例子先：\n\n```js\nconst arrary1 = [1, 2, 3, 4]\nconst reducer = (accumulator, currentValue) => accumulator + currentValue\n//1+2+3+4\nconsole.log(array1.reduce(reducer))\n\n//5+1+2+3+4\nconsole.log(array1.reduce(reducer, 5))\n```\n\n## 语法\n\n```js\narr.reduce(callback[,initalValue])\n```\n\n### 参数\n\n* callback 回调函数\n  * accumulator **累加器累加回调的返回值**\n  * currentValue **数组中正在处理的元素**\n  * currentIndex(optional) 数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。\n  * array(optional) 调用reduce的数组\n\n* initalValue(optional) 用作第一个调用 callback的第一个参数的值\n\n### 返回值\n\n函数累计处理的结果\n\n## 描述\n\n`reduce`为数组中的每一个元素依次执行`callback`函数，不包括数组中被删除或从未被赋值的元素，接受四个参数。\n\n回调函数第一次执行时，`accumulator`和`currentValue`的取值有两种情况：调用`reduce`时提供`initialValue`，`accumulator`取值为`initialValue`，`currentValue`取数组中的第一个值；没有提供 `initialValue`，`accumulator`取数组中的第一个值，`currentValue`取数组中的第二个值。\n\n> 如果没有提供`initialValue`，`reduce` 会从索引1的地方开始执行 `callback` 方法，跳过第一个索引。如果提供`initialValue`，从索引0开始。\n\n如果数组为空且没有提供`initialValue`，会抛出`TypeError` 。如果数组仅有一个元素（无论位置如何）并且没有提供`initialValue`， 或者有提供`initialValue`但是数组为空，那么此唯一值将被返回并且`callback`不会被执行。\n\n提供初始值通常更安全，正如下面的例子，如果没有提供initialValue，则可能有三种输出：\n\n```js\nvar maxCallback = ( pre, cur ) => Math.max( pre.x, cur.x );\nvar maxCallback2 = ( max, cur ) => Math.max( max, cur );\n\n// reduce() without initialValue\n[ { x: 22 }, { x: 42 } ].reduce( maxCallback ); // 42\n[ { x: 22 }            ].reduce( maxCallback ); // { x: 22 }\n[                      ].reduce( maxCallback ); // TypeError\n\n// map/reduce; better solution, also works for empty arrays\n[ { x: 22 }, { x: 42 } ].map( el => el.x )\n                        .reduce( maxCallback2, -Infinity );\n```\n\n### reduce如何运行\n\n假如运行下段代码：\n\n```js\n[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array){\n  return accumulator + currentValue;\n});\n```\n\n| callback    | accumulator | currentValue | currentIndex | array           | return value |\n| ----------- | ----------- | ------------ | ------------ | --------------- | ------------ |\n| first call  | 0           | 1            | 1            | [0, 1, 2, 3, 4] | 1            |\n| second call | 1           | 2            | 2            | [0, 1, 2, 3, 4] | 3            |\n| third call  | 3           | 3            | 3            | [0, 1, 2, 3, 4] | 6            |\n| fourth call | 6           | 4            | 4            | [0, 1, 2, 3, 4] | 10           |\n由`reduce`返回的值将是上次回调调用的值`（10）`。\n\n你同样可以使用箭头函数的形式，下面的代码会输出跟前面一样的结果\n\n您还可以提供[Arrow Function](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions) 代替完整功能。 下面的代码将产生与上面的代码中相同的输出：\n\n```js\n[0, 1, 2, 3, 4].reduce((prev, curr) => prev + curr );\n```\n\n如果你打算提供一个初始值作为`reduce`方法的第二个参数，以下是运行过程及结果：\n\n```js\n[0, 1, 2, 3, 4].reduce((accumulator, currentValue, currentIndex, array) => { return accumulator + currentValue; }, 10 )\n```\n\n| callback    | accumulator | currentValue | currentIndex | array           | return value |\n| ----------- | ----------- | ------------ | ------------ | --------------- | ------------ |\n| first call  | 10          | 0            | 0            | [0, 1, 2, 3, 4] | 10           |\n| second call | 10          | 1            | 1            | [0, 1, 2, 3, 4] | 11           |\n| third call  | 11          | 2            | 2            | [0, 1, 2, 3, 4] | 13           |\n| fourth call | 13          | 3            | 3            | [0, 1, 2, 3, 4] | 16           |\n| fourth call | 16          | 4            | 4            | [0, 1, 2, 3, 4] | 20           |\n这种情况下reduce返回的值是`20`。\n\n## 例子\n\n数组里所有值的和\n\n```js\nvar sum = [0, 1, 2, 3].reduce(function (a, b) {\n  return a + b;\n}, 0);\n// sum is 6\n```\n\n你也可以写成箭头函数的形式：\n\n```js\nvar total = [ 0, 1, 2, 3 ].reduce(\n  ( acc, cur ) => acc + cur,\n  0\n);\n```\n\n### 将二维数组转化为一维\n\n```js\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  function(a, b) {\n    return a.concat(b);\n  },\n  []\n);\n// flattened is [0, 1, 2, 3, 4, 5]\n```\n\n你也可以写成箭头函数的形式：\n\n```js\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n ( acc, cur ) => acc.concat(cur),\n []\n);\n```\n\n### 计算数组中每个元素出现的次数\n\n```js\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nvar countedNames = names.reduce(function (allNames, name) { \n  if (name in allNames) {\n    allNames[name]++;\n  }\n  else {\n    allNames[name] = 1;\n  }\n  return allNames;\n}, {});\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n\n### 使用扩展运算符和initialValue绑定包含在对象数组中的数组\n\n```js\n// friends - an array of objects \n// where object field \"books\" - list of favorite books \nvar friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}];\n\n// allbooks - list which will contain all friends' books +  \n// additional list contained in initialValue\nvar allbooks = friends.reduce(function(prev, curr) {\n  return [...prev, ...curr.books];\n}, ['Alphabet']);\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', \n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n```\n\n### 数组去重\n\n```js\nlet arr = [1,2,1,2,3,5,4,5,3,4,4,4,4];\nlet result = arr.sort().reduce((init, current)=>{\n    if(init.length===0 || init[init.length-1]!==current){\n        init.push(current);\n    }\n    return init;\n}, []);\nconsole.log(result); //[1,2,3,4,5]\n```\n\n### 同时实现map和filter\n\n```js\nconst numbers = [10, 20, 30, 40];\nconst doubledOver50 = numbers.reduce((finalList, num) => {\n  \n  num = num * 2; \n  \n  if (num > 50) {\n    finalList.push(num);\n  }\n  return finalList;\n}, []);\ndoubledOver50; // [60, 80]\n```\n\n### 匹配圆括号\n\nreduce的另外一个用途是能够匹配给定字符串中的圆括号。对于一个含有圆括号的字符串，我们需要知道(和)的数量是否一致，并且(是否出现在)之前。\n\n下面的代码中我们使用reduce可以轻松地解决这个问题。我们只需要先声明一个counter变量，初值为0。在遇到(时counter加一，遇到)时counter减一。如果左右括号数目匹配，那最终结果为0。\n\n```js\n//Returns 0 if balanced.\nconst isParensBalanced = (str) => {\n  return str.split('').reduce((counter, char) => {\n    if(counter < 0) { //matched \")\" before \"(\"\n      return counter;\n    } else if(char === '(') {\n      return ++counter;\n    } else if(char === ')') {\n      return --counter;\n    }  else { //matched some other char\n      return counter;\n    }\n    \n  }, 0); //<-- starting value of the counter\n}\nisParensBalanced('(())') // 0 <-- balanced\nisParensBalanced('(asdfds)') //0 <-- balanced\nisParensBalanced('(()') // 1 <-- not balanced\nisParensBalanced(')(') // -1 <-- not balanced\n```\n\n## Polyfill\n\n```js\n// Production steps of ECMA-262, Edition 5, 15.4.4.21\n// Reference: http://es5.github.io/#x15.4.4.21\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\nif (!Array.prototype.reduce) {\n  Object.defineProperty(Array.prototype, 'reduce', {\n    value: function(callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError( 'Array.prototype.reduce ' + \n          'called on null or undefined' );\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError( callback +\n          ' is not a function');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0; \n\n      // Steps 3, 4, 5, 6, 7      \n      var k = 0; \n      var value;\n\n      if (arguments.length >= 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in o)) {\n          k++; \n        }\n\n        // 3. If len is 0 and initialValue is not present,\n        //    throw a TypeError exception.\n        if (k >= len) {\n          throw new TypeError( 'Reduce of empty array ' +\n            'with no initial value' );\n        }\n        value = o[k++];\n      }\n\n      // 8. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        // c. If kPresent is true, then\n        //    i.  Let kValue be ? Get(O, Pk).\n        //    ii. Let accumulator be ? Call(\n        //          callbackfn, undefined,\n        //          « accumulator, kValue, k, O »).\n        if (k in o) {\n          value = callback(value, o[k], k, o);\n        }\n\n        // d. Increase k by 1.      \n        k++;\n      }\n\n      // 9. Return accumulator.\n      return value;\n    }\n  });\n}\n```\n\n[参考链接](https://segmentfault.com/a/1190000013972464?utm_source=feed-content)\n\n---\n\n![Vincent van Gogh – The Parsonage at Nuenen](神奇的reduce/1917180847.jpg)\n\n> Vincent van Gogh – The Parsonage at Nuenen 1885\n","slug":"神奇的reduce","published":1,"updated":"2018-08-01T11:28:24.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbjh001tssv6e1jxhga2","content":"<h1 id=\"神奇的reduce\"><a href=\"#神奇的reduce\" class=\"headerlink\" title=\"神奇的reduce\"></a>神奇的reduce</h1><p>这是一个用得好就很装逼的方法，简约而强大。</p>\n<h2 id=\"干什么用的\"><a href=\"#干什么用的\" class=\"headerlink\" title=\"干什么用的\"></a>干什么用的</h2><blockquote>\n<p>reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。<br>说的挺复杂，看个mdn例子先：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue</span><br><span class=\"line\"><span class=\"comment\">//1+2+3+4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//5+1+2+3+4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer, <span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback[,initalValue])</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li><p>callback 回调函数</p>\n<ul>\n<li>accumulator <strong>累加器累加回调的返回值</strong></li>\n<li>currentValue <strong>数组中正在处理的元素</strong></li>\n<li>currentIndex(optional) 数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。</li>\n<li>array(optional) 调用reduce的数组</li>\n</ul>\n</li>\n<li><p>initalValue(optional) 用作第一个调用 callback的第一个参数的值</p>\n</li>\n</ul>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>函数累计处理的结果</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p><code>reduce</code>为数组中的每一个元素依次执行<code>callback</code>函数，不包括数组中被删除或从未被赋值的元素，接受四个参数。</p>\n<p>回调函数第一次执行时，<code>accumulator</code>和<code>currentValue</code>的取值有两种情况：调用<code>reduce</code>时提供<code>initialValue</code>，<code>accumulator</code>取值为<code>initialValue</code>，<code>currentValue</code>取数组中的第一个值；没有提供 <code>initialValue</code>，<code>accumulator</code>取数组中的第一个值，<code>currentValue</code>取数组中的第二个值。</p>\n<blockquote>\n<p>如果没有提供<code>initialValue</code>，<code>reduce</code> 会从索引1的地方开始执行 <code>callback</code> 方法，跳过第一个索引。如果提供<code>initialValue</code>，从索引0开始。</p>\n</blockquote>\n<p>如果数组为空且没有提供<code>initialValue</code>，会抛出<code>TypeError</code> 。如果数组仅有一个元素（无论位置如何）并且没有提供<code>initialValue</code>， 或者有提供<code>initialValue</code>但是数组为空，那么此唯一值将被返回并且<code>callback</code>不会被执行。</p>\n<p>提供初始值通常更安全，正如下面的例子，如果没有提供initialValue，则可能有三种输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxCallback = <span class=\"function\">(<span class=\"params\"> pre, cur </span>) =&gt;</span> <span class=\"built_in\">Math</span>.max( pre.x, cur.x );</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxCallback2 = <span class=\"function\">(<span class=\"params\"> max, cur </span>) =&gt;</span> <span class=\"built_in\">Math</span>.max( max, cur );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reduce() without initialValue</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">42</span> &#125; ].reduce( maxCallback ); <span class=\"comment\">// 42</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;            ].reduce( maxCallback ); <span class=\"comment\">// &#123; x: 22 &#125;</span></span><br><span class=\"line\">[                      ].reduce( maxCallback ); <span class=\"comment\">// TypeError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map/reduce; better solution, also works for empty arrays</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">42</span> &#125; ].map( <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el.x )</span><br><span class=\"line\">                        .reduce( maxCallback2, -<span class=\"literal\">Infinity</span> );</span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce如何运行\"><a href=\"#reduce如何运行\" class=\"headerlink\" title=\"reduce如何运行\"></a>reduce如何运行</h3><p>假如运行下段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">accumulator, currentValue, currentIndex, array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> accumulator + currentValue;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>accumulator</th>\n<th>currentValue</th>\n<th>currentIndex</th>\n<th>array</th>\n<th>return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>first call</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>1</td>\n</tr>\n<tr>\n<td>second call</td>\n<td>1</td>\n<td>2</td>\n<td>2</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>3</td>\n</tr>\n<tr>\n<td>third call</td>\n<td>3</td>\n<td>3</td>\n<td>3</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>6</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>6</td>\n<td>4</td>\n<td>4</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<p>由<code>reduce</code>返回的值将是上次回调调用的值<code>（10）</code>。</p>\n<p>你同样可以使用箭头函数的形式，下面的代码会输出跟前面一样的结果</p>\n<p>您还可以提供<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">Arrow Function</a> 代替完整功能。 下面的代码将产生与上面的代码中相同的输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\">(<span class=\"params\">prev, curr</span>) =&gt;</span> prev + curr );</span><br></pre></td></tr></table></figure>\n<p>如果你打算提供一个初始值作为<code>reduce</code>方法的第二个参数，以下是运行过程及结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\">(<span class=\"params\">accumulator, currentValue, currentIndex, array</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> accumulator + currentValue; &#125;, <span class=\"number\">10</span> )</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>accumulator</th>\n<th>currentValue</th>\n<th>currentIndex</th>\n<th>array</th>\n<th>return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>first call</td>\n<td>10</td>\n<td>0</td>\n<td>0</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>10</td>\n</tr>\n<tr>\n<td>second call</td>\n<td>10</td>\n<td>1</td>\n<td>1</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>11</td>\n</tr>\n<tr>\n<td>third call</td>\n<td>11</td>\n<td>2</td>\n<td>2</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>13</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>13</td>\n<td>3</td>\n<td>3</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>16</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>16</td>\n<td>4</td>\n<td>4</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<p>这种情况下reduce返回的值是<code>20</code>。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>数组里所有值的和</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// sum is 6</span></span><br></pre></td></tr></table></figure>\n<p>你也可以写成箭头函数的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> total = [ <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ].reduce(</span><br><span class=\"line\">  ( acc, cur ) =&gt; acc + cur,</span><br><span class=\"line\">  <span class=\"number\">0</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"将二维数组转化为一维\"><a href=\"#将二维数组转化为一维\" class=\"headerlink\" title=\"将二维数组转化为一维\"></a>将二维数组转化为一维</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flattened = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].reduce(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.concat(b);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  []</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<p>你也可以写成箭头函数的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flattened = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].reduce(</span><br><span class=\"line\"> ( acc, cur ) =&gt; acc.concat(cur),</span><br><span class=\"line\"> []</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"计算数组中每个元素出现的次数\"><a href=\"#计算数组中每个元素出现的次数\" class=\"headerlink\" title=\"计算数组中每个元素出现的次数\"></a>计算数组中每个元素出现的次数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = [<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tiff'</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'Alice'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> countedNames = names.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">allNames, name</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> allNames) &#123;</span><br><span class=\"line\">    allNames[name]++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    allNames[name] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> allNames;</span><br><span class=\"line\">&#125;, &#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// countedNames is:</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用扩展运算符和initialValue绑定包含在对象数组中的数组\"><a href=\"#使用扩展运算符和initialValue绑定包含在对象数组中的数组\" class=\"headerlink\" title=\"使用扩展运算符和initialValue绑定包含在对象数组中的数组\"></a>使用扩展运算符和initialValue绑定包含在对象数组中的数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// friends - an array of objects </span></span><br><span class=\"line\"><span class=\"comment\">// where object field \"books\" - list of favorite books </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> friends = [&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Anna'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'Bible'</span>, <span class=\"string\">'Harry Potter'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">21</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bob'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'War and peace'</span>, <span class=\"string\">'Romeo and Juliet'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">26</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Alice'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'The Lord of the Rings'</span>, <span class=\"string\">'The Shining'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allbooks - list which will contain all friends' books +  </span></span><br><span class=\"line\"><span class=\"comment\">// additional list contained in initialValue</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> allbooks = friends.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, curr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...prev, ...curr.books];</span><br><span class=\"line\">&#125;, [<span class=\"string\">'Alphabet'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allbooks = [</span></span><br><span class=\"line\"><span class=\"comment\">//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', </span></span><br><span class=\"line\"><span class=\"comment\">//   'Romeo and Juliet', 'The Lord of the Rings',</span></span><br><span class=\"line\"><span class=\"comment\">//   'The Shining'</span></span><br><span class=\"line\"><span class=\"comment\">// ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.sort().reduce(<span class=\"function\">(<span class=\"params\">init, current</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(init.length===<span class=\"number\">0</span> || init[init.length<span class=\"number\">-1</span>]!==current)&#123;</span><br><span class=\"line\">        init.push(current);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> init;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"同时实现map和filter\"><a href=\"#同时实现map和filter\" class=\"headerlink\" title=\"同时实现map和filter\"></a>同时实现map和filter</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> doubledOver50 = numbers.reduce(<span class=\"function\">(<span class=\"params\">finalList, num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  num = num * <span class=\"number\">2</span>; </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &gt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">    finalList.push(num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> finalList;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\">doubledOver50; <span class=\"comment\">// [60, 80]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"匹配圆括号\"><a href=\"#匹配圆括号\" class=\"headerlink\" title=\"匹配圆括号\"></a>匹配圆括号</h3><p>reduce的另外一个用途是能够匹配给定字符串中的圆括号。对于一个含有圆括号的字符串，我们需要知道(和)的数量是否一致，并且(是否出现在)之前。</p>\n<p>下面的代码中我们使用reduce可以轻松地解决这个问题。我们只需要先声明一个counter变量，初值为0。在遇到(时counter加一，遇到)时counter减一。如果左右括号数目匹配，那最终结果为0。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Returns 0 if balanced.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isParensBalanced = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.split(<span class=\"string\">''</span>).reduce(<span class=\"function\">(<span class=\"params\">counter, char</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(counter &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">//matched \")\" before \"(\"</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char === <span class=\"string\">'('</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ++counter;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char === <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> --counter;</span><br><span class=\"line\">    &#125;  <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//matched some other char</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>); <span class=\"comment\">//&lt;-- starting value of the counter</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(())'</span>) <span class=\"comment\">// 0 &lt;-- balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(asdfds)'</span>) <span class=\"comment\">//0 &lt;-- balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(()'</span>) <span class=\"comment\">// 1 &lt;-- not balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">')('</span>) <span class=\"comment\">// -1 &lt;-- not balanced</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Polyfill\"><a href=\"#Polyfill\" class=\"headerlink\" title=\"Polyfill\"></a>Polyfill</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Production steps of ECMA-262, Edition 5, 15.4.4.21</span></span><br><span class=\"line\"><span class=\"comment\">// Reference: http://es5.github.io/#x15.4.4.21</span></span><br><span class=\"line\"><span class=\"comment\">// https://tc39.github.io/ecma262/#sec-array.prototype.reduce</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.reduce) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'reduce'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback <span class=\"regexp\">/*, initialValue*/</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">'Array.prototype.reduce '</span> + </span><br><span class=\"line\">          <span class=\"string\">'called on null or undefined'</span> );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( callback +</span><br><span class=\"line\">          <span class=\"string\">' is not a function'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 1. Let O be ? ToObject(this value).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 2. Let len be ? ToLength(? Get(O, \"length\")).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = o.length &gt;&gt;&gt; <span class=\"number\">0</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Steps 3, 4, 5, 6, 7      </span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; </span><br><span class=\"line\">      <span class=\"keyword\">var</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        value = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt; len &amp;&amp; !(k <span class=\"keyword\">in</span> o)) &#123;</span><br><span class=\"line\">          k++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. If len is 0 and initialValue is not present,</span></span><br><span class=\"line\">        <span class=\"comment\">//    throw a TypeError exception.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &gt;= len) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">'Reduce of empty array '</span> +</span><br><span class=\"line\">            <span class=\"string\">'with no initial value'</span> );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        value = o[k++];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 8. Repeat, while k &lt; len</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a. Let Pk be ! ToString(k).</span></span><br><span class=\"line\">        <span class=\"comment\">// b. Let kPresent be ? HasProperty(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">// c. If kPresent is true, then</span></span><br><span class=\"line\">        <span class=\"comment\">//    i.  Let kValue be ? Get(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">//    ii. Let accumulator be ? Call(</span></span><br><span class=\"line\">        <span class=\"comment\">//          callbackfn, undefined,</span></span><br><span class=\"line\">        <span class=\"comment\">//          « accumulator, kValue, k, O »).</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">          value = callback(value, o[k], k, o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// d. Increase k by 1.      </span></span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 9. Return accumulator.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://segmentfault.com/a/1190000013972464?utm_source=feed-content\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<hr>\n<p><img src=\"/2018/08/01/神奇的reduce/1917180847.jpg\" alt=\"Vincent van Gogh – The Parsonage at Nuenen\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Parsonage at Nuenen 1885</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"神奇的reduce\"><a href=\"#神奇的reduce\" class=\"headerlink\" title=\"神奇的reduce\"></a>神奇的reduce</h1><p>这是一个用得好就很装逼的方法，简约而强大。</p>\n<h2 id=\"干什么用的\"><a href=\"#干什么用的\" class=\"headerlink\" title=\"干什么用的\"></a>干什么用的</h2><blockquote>\n<p>reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。<br>说的挺复杂，看个mdn例子先：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue</span><br><span class=\"line\"><span class=\"comment\">//1+2+3+4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//5+1+2+3+4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer, <span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback[,initalValue])</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li><p>callback 回调函数</p>\n<ul>\n<li>accumulator <strong>累加器累加回调的返回值</strong></li>\n<li>currentValue <strong>数组中正在处理的元素</strong></li>\n<li>currentIndex(optional) 数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。</li>\n<li>array(optional) 调用reduce的数组</li>\n</ul>\n</li>\n<li><p>initalValue(optional) 用作第一个调用 callback的第一个参数的值</p>\n</li>\n</ul>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>函数累计处理的结果</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p><code>reduce</code>为数组中的每一个元素依次执行<code>callback</code>函数，不包括数组中被删除或从未被赋值的元素，接受四个参数。</p>\n<p>回调函数第一次执行时，<code>accumulator</code>和<code>currentValue</code>的取值有两种情况：调用<code>reduce</code>时提供<code>initialValue</code>，<code>accumulator</code>取值为<code>initialValue</code>，<code>currentValue</code>取数组中的第一个值；没有提供 <code>initialValue</code>，<code>accumulator</code>取数组中的第一个值，<code>currentValue</code>取数组中的第二个值。</p>\n<blockquote>\n<p>如果没有提供<code>initialValue</code>，<code>reduce</code> 会从索引1的地方开始执行 <code>callback</code> 方法，跳过第一个索引。如果提供<code>initialValue</code>，从索引0开始。</p>\n</blockquote>\n<p>如果数组为空且没有提供<code>initialValue</code>，会抛出<code>TypeError</code> 。如果数组仅有一个元素（无论位置如何）并且没有提供<code>initialValue</code>， 或者有提供<code>initialValue</code>但是数组为空，那么此唯一值将被返回并且<code>callback</code>不会被执行。</p>\n<p>提供初始值通常更安全，正如下面的例子，如果没有提供initialValue，则可能有三种输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> maxCallback = <span class=\"function\">(<span class=\"params\"> pre, cur </span>) =&gt;</span> <span class=\"built_in\">Math</span>.max( pre.x, cur.x );</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxCallback2 = <span class=\"function\">(<span class=\"params\"> max, cur </span>) =&gt;</span> <span class=\"built_in\">Math</span>.max( max, cur );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reduce() without initialValue</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">42</span> &#125; ].reduce( maxCallback ); <span class=\"comment\">// 42</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;            ].reduce( maxCallback ); <span class=\"comment\">// &#123; x: 22 &#125;</span></span><br><span class=\"line\">[                      ].reduce( maxCallback ); <span class=\"comment\">// TypeError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map/reduce; better solution, also works for empty arrays</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">x</span>: <span class=\"number\">22</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">42</span> &#125; ].map( <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el.x )</span><br><span class=\"line\">                        .reduce( maxCallback2, -<span class=\"literal\">Infinity</span> );</span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce如何运行\"><a href=\"#reduce如何运行\" class=\"headerlink\" title=\"reduce如何运行\"></a>reduce如何运行</h3><p>假如运行下段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">accumulator, currentValue, currentIndex, array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> accumulator + currentValue;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>accumulator</th>\n<th>currentValue</th>\n<th>currentIndex</th>\n<th>array</th>\n<th>return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>first call</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>1</td>\n</tr>\n<tr>\n<td>second call</td>\n<td>1</td>\n<td>2</td>\n<td>2</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>3</td>\n</tr>\n<tr>\n<td>third call</td>\n<td>3</td>\n<td>3</td>\n<td>3</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>6</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>6</td>\n<td>4</td>\n<td>4</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<p>由<code>reduce</code>返回的值将是上次回调调用的值<code>（10）</code>。</p>\n<p>你同样可以使用箭头函数的形式，下面的代码会输出跟前面一样的结果</p>\n<p>您还可以提供<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">Arrow Function</a> 代替完整功能。 下面的代码将产生与上面的代码中相同的输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\">(<span class=\"params\">prev, curr</span>) =&gt;</span> prev + curr );</span><br></pre></td></tr></table></figure>\n<p>如果你打算提供一个初始值作为<code>reduce</code>方法的第二个参数，以下是运行过程及结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].reduce(<span class=\"function\">(<span class=\"params\">accumulator, currentValue, currentIndex, array</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> accumulator + currentValue; &#125;, <span class=\"number\">10</span> )</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>accumulator</th>\n<th>currentValue</th>\n<th>currentIndex</th>\n<th>array</th>\n<th>return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>first call</td>\n<td>10</td>\n<td>0</td>\n<td>0</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>10</td>\n</tr>\n<tr>\n<td>second call</td>\n<td>10</td>\n<td>1</td>\n<td>1</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>11</td>\n</tr>\n<tr>\n<td>third call</td>\n<td>11</td>\n<td>2</td>\n<td>2</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>13</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>13</td>\n<td>3</td>\n<td>3</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>16</td>\n</tr>\n<tr>\n<td>fourth call</td>\n<td>16</td>\n<td>4</td>\n<td>4</td>\n<td>[0, 1, 2, 3, 4]</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<p>这种情况下reduce返回的值是<code>20</code>。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>数组里所有值的和</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// sum is 6</span></span><br></pre></td></tr></table></figure>\n<p>你也可以写成箭头函数的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> total = [ <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ].reduce(</span><br><span class=\"line\">  ( acc, cur ) =&gt; acc + cur,</span><br><span class=\"line\">  <span class=\"number\">0</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"将二维数组转化为一维\"><a href=\"#将二维数组转化为一维\" class=\"headerlink\" title=\"将二维数组转化为一维\"></a>将二维数组转化为一维</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flattened = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].reduce(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.concat(b);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  []</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<p>你也可以写成箭头函数的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flattened = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].reduce(</span><br><span class=\"line\"> ( acc, cur ) =&gt; acc.concat(cur),</span><br><span class=\"line\"> []</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"计算数组中每个元素出现的次数\"><a href=\"#计算数组中每个元素出现的次数\" class=\"headerlink\" title=\"计算数组中每个元素出现的次数\"></a>计算数组中每个元素出现的次数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = [<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tiff'</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'Alice'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> countedNames = names.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">allNames, name</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> allNames) &#123;</span><br><span class=\"line\">    allNames[name]++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    allNames[name] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> allNames;</span><br><span class=\"line\">&#125;, &#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// countedNames is:</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用扩展运算符和initialValue绑定包含在对象数组中的数组\"><a href=\"#使用扩展运算符和initialValue绑定包含在对象数组中的数组\" class=\"headerlink\" title=\"使用扩展运算符和initialValue绑定包含在对象数组中的数组\"></a>使用扩展运算符和initialValue绑定包含在对象数组中的数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// friends - an array of objects </span></span><br><span class=\"line\"><span class=\"comment\">// where object field \"books\" - list of favorite books </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> friends = [&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Anna'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'Bible'</span>, <span class=\"string\">'Harry Potter'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">21</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bob'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'War and peace'</span>, <span class=\"string\">'Romeo and Juliet'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">26</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Alice'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'The Lord of the Rings'</span>, <span class=\"string\">'The Shining'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allbooks - list which will contain all friends' books +  </span></span><br><span class=\"line\"><span class=\"comment\">// additional list contained in initialValue</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> allbooks = friends.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, curr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...prev, ...curr.books];</span><br><span class=\"line\">&#125;, [<span class=\"string\">'Alphabet'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allbooks = [</span></span><br><span class=\"line\"><span class=\"comment\">//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', </span></span><br><span class=\"line\"><span class=\"comment\">//   'Romeo and Juliet', 'The Lord of the Rings',</span></span><br><span class=\"line\"><span class=\"comment\">//   'The Shining'</span></span><br><span class=\"line\"><span class=\"comment\">// ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.sort().reduce(<span class=\"function\">(<span class=\"params\">init, current</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(init.length===<span class=\"number\">0</span> || init[init.length<span class=\"number\">-1</span>]!==current)&#123;</span><br><span class=\"line\">        init.push(current);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> init;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"同时实现map和filter\"><a href=\"#同时实现map和filter\" class=\"headerlink\" title=\"同时实现map和filter\"></a>同时实现map和filter</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> doubledOver50 = numbers.reduce(<span class=\"function\">(<span class=\"params\">finalList, num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  num = num * <span class=\"number\">2</span>; </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &gt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">    finalList.push(num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> finalList;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\">doubledOver50; <span class=\"comment\">// [60, 80]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"匹配圆括号\"><a href=\"#匹配圆括号\" class=\"headerlink\" title=\"匹配圆括号\"></a>匹配圆括号</h3><p>reduce的另外一个用途是能够匹配给定字符串中的圆括号。对于一个含有圆括号的字符串，我们需要知道(和)的数量是否一致，并且(是否出现在)之前。</p>\n<p>下面的代码中我们使用reduce可以轻松地解决这个问题。我们只需要先声明一个counter变量，初值为0。在遇到(时counter加一，遇到)时counter减一。如果左右括号数目匹配，那最终结果为0。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Returns 0 if balanced.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isParensBalanced = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.split(<span class=\"string\">''</span>).reduce(<span class=\"function\">(<span class=\"params\">counter, char</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(counter &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">//matched \")\" before \"(\"</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char === <span class=\"string\">'('</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ++counter;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char === <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> --counter;</span><br><span class=\"line\">    &#125;  <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//matched some other char</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>); <span class=\"comment\">//&lt;-- starting value of the counter</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(())'</span>) <span class=\"comment\">// 0 &lt;-- balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(asdfds)'</span>) <span class=\"comment\">//0 &lt;-- balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">'(()'</span>) <span class=\"comment\">// 1 &lt;-- not balanced</span></span><br><span class=\"line\">isParensBalanced(<span class=\"string\">')('</span>) <span class=\"comment\">// -1 &lt;-- not balanced</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Polyfill\"><a href=\"#Polyfill\" class=\"headerlink\" title=\"Polyfill\"></a>Polyfill</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Production steps of ECMA-262, Edition 5, 15.4.4.21</span></span><br><span class=\"line\"><span class=\"comment\">// Reference: http://es5.github.io/#x15.4.4.21</span></span><br><span class=\"line\"><span class=\"comment\">// https://tc39.github.io/ecma262/#sec-array.prototype.reduce</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.reduce) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'reduce'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback <span class=\"regexp\">/*, initialValue*/</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">'Array.prototype.reduce '</span> + </span><br><span class=\"line\">          <span class=\"string\">'called on null or undefined'</span> );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( callback +</span><br><span class=\"line\">          <span class=\"string\">' is not a function'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 1. Let O be ? ToObject(this value).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 2. Let len be ? ToLength(? Get(O, \"length\")).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = o.length &gt;&gt;&gt; <span class=\"number\">0</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Steps 3, 4, 5, 6, 7      </span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; </span><br><span class=\"line\">      <span class=\"keyword\">var</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        value = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt; len &amp;&amp; !(k <span class=\"keyword\">in</span> o)) &#123;</span><br><span class=\"line\">          k++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. If len is 0 and initialValue is not present,</span></span><br><span class=\"line\">        <span class=\"comment\">//    throw a TypeError exception.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &gt;= len) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">'Reduce of empty array '</span> +</span><br><span class=\"line\">            <span class=\"string\">'with no initial value'</span> );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        value = o[k++];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 8. Repeat, while k &lt; len</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a. Let Pk be ! ToString(k).</span></span><br><span class=\"line\">        <span class=\"comment\">// b. Let kPresent be ? HasProperty(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">// c. If kPresent is true, then</span></span><br><span class=\"line\">        <span class=\"comment\">//    i.  Let kValue be ? Get(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">//    ii. Let accumulator be ? Call(</span></span><br><span class=\"line\">        <span class=\"comment\">//          callbackfn, undefined,</span></span><br><span class=\"line\">        <span class=\"comment\">//          « accumulator, kValue, k, O »).</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">          value = callback(value, o[k], k, o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// d. Increase k by 1.      </span></span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 9. Return accumulator.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://segmentfault.com/a/1190000013972464?utm_source=feed-content\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n<hr>\n<p><img src=\"/2018/08/01/神奇的reduce/1917180847.jpg\" alt=\"Vincent van Gogh – The Parsonage at Nuenen\"></p>\n<blockquote>\n<p>Vincent van Gogh – The Parsonage at Nuenen 1885</p>\n</blockquote>\n"},{"title":"维生素指北","date":"2018-08-26T04:58:45.000Z","_content":"\n# 维生素指北\n\n有很长一段时间没更新博文了，一个原因是比较忙，另一个原因就是最近的身体状态不太好。这个夏天竟然连续地感冒了两次，今天还有牙疼、口腔溃疡在折磨着。几次折腾下来，也花了不少钱，所以还是得找一些办法增强抵抗力。\n\n前段时间看到知乎一些关于维生素的介绍，便宜又有效，感觉还是比较符合我的心里预期。当然最好的健康养生方式是良好的作息以及均衡的饮食习惯。饮食习惯我倒没有非常挑食，最近泡面买来我也很少吃了，因为泡面这玩意儿*钠*含量是真的高，一包下来基本有个 *2000mg* 了，一个人一天建议摄入量也差不多是这么多。所以泡面、高盐量的食品还是要少吃，*钠*摄入太多了，对血压什么的影响都很大。另一个点，我倒是很少吃水果，一来不太喜欢出去买水果，二来现在的水果也不太便宜，同时我也没冰箱，很能储存水果。仔细想想，好像上一次吃水果的时候还是好几个月之前。\n\n这两天牙龈肿疼地我睡不着觉，买了药就花去了五十多。查了一些资料，以及结合自身的症状对比，感觉我可能因为是长期没吃水果，身体缺少了维生素C，所以本篇结合一些别的文章，总结下怎么补充维生素。\n\n## 维生素分类\n\n### 维生素A\n\n> 长期用眼。\n\n维生素A缺乏，会带来眼睛干涩，夜间视力下降等问题。\n\n![维生素A](维生素指北/a.jpg)\n\n### 维生素C\n\n> 果蔬没吃够的\n\n![维生素A](维生素指北/c.jpg)\n\n### 维生素D\n\n> 太阳晒的少，影响钙吸收\n\n### 维生素B\n\nB类的维生素有很多种。\n\n#### 硫胺素(维生素B1)\n\n运动越多，消耗能量（主要是碳水化合物）越多，硫胺素需要也越多。随着进食量增加，硫胺素摄入可能也会增加，**所以一般不必额外补充。**\n\n#### 核黄素（维生素B2）\n\n核黄素跟蛋白质、脂肪、碳水化合物的能量产生都有关系。我国目前是成年男性1.4毫克/天，女性1.2毫克/天。运动人群，增加到推荐量的1-2倍足矣。食物补充的话，平时可以多吃肉、蛋和奶制品。花椰菜、芦笋、菠菜这类绿色蔬菜核黄素含量也比较高。**这些东西吃的少的话，可以考虑补充剂。**\n\n#### 烟酸（维生素B3）\n\n烟酸跟蛋白质、碳水化合物、脂肪的能量产生都有关。含烟酸比较丰富的食物有肉类、谷类、豆类食物。因为色氨酸在体内能转化成烟酸，动物蛋白摄入比较多的人，**烟酸一般都不会缺乏**。所以，常吃较多肉的人，即便是运动人群，也基本不用额外补充烟酸。\n\n#### 维生素B6\n\n这种维生素主要跟糖原和蛋白质代谢有关。体内储存的糖原想变成葡萄糖，氨基酸想转换利用，都需要维生素B6，所以这东西跟运动关系密切。\n\n维生素B6跟别的B族维生素不一样，这玩意有毒性。但一般都要达到药物剂量才会中毒。比如治疗经期按综合症、哮喘有时会用到B6。维生素B6的最高耐受上限是100毫克/天。低于这个剂量一般没有太大问题。\n\n比较安全的补充方式还是食物，肉、蔬菜、坚果、香蕉、全谷物食品里含B6都很丰富。比如100克鸡胸肉里就有大约0.6毫克维生素B6。所以，这些东西吃的比较多的话，一般不用吃补充剂额外补充。\n\n## 选择\n\n考虑自身的一些条件，我最后还是考虑先买点维生素C和维生素B2以及维生素B6。","source":"_posts/维生素指北.md","raw":"---\ntitle: 维生素指北\ndate: 2018-08-26 12:58:45\ntags:\n  - 维生素\n  - 健康\ncategories: 生活\n---\n\n# 维生素指北\n\n有很长一段时间没更新博文了，一个原因是比较忙，另一个原因就是最近的身体状态不太好。这个夏天竟然连续地感冒了两次，今天还有牙疼、口腔溃疡在折磨着。几次折腾下来，也花了不少钱，所以还是得找一些办法增强抵抗力。\n\n前段时间看到知乎一些关于维生素的介绍，便宜又有效，感觉还是比较符合我的心里预期。当然最好的健康养生方式是良好的作息以及均衡的饮食习惯。饮食习惯我倒没有非常挑食，最近泡面买来我也很少吃了，因为泡面这玩意儿*钠*含量是真的高，一包下来基本有个 *2000mg* 了，一个人一天建议摄入量也差不多是这么多。所以泡面、高盐量的食品还是要少吃，*钠*摄入太多了，对血压什么的影响都很大。另一个点，我倒是很少吃水果，一来不太喜欢出去买水果，二来现在的水果也不太便宜，同时我也没冰箱，很能储存水果。仔细想想，好像上一次吃水果的时候还是好几个月之前。\n\n这两天牙龈肿疼地我睡不着觉，买了药就花去了五十多。查了一些资料，以及结合自身的症状对比，感觉我可能因为是长期没吃水果，身体缺少了维生素C，所以本篇结合一些别的文章，总结下怎么补充维生素。\n\n## 维生素分类\n\n### 维生素A\n\n> 长期用眼。\n\n维生素A缺乏，会带来眼睛干涩，夜间视力下降等问题。\n\n![维生素A](维生素指北/a.jpg)\n\n### 维生素C\n\n> 果蔬没吃够的\n\n![维生素A](维生素指北/c.jpg)\n\n### 维生素D\n\n> 太阳晒的少，影响钙吸收\n\n### 维生素B\n\nB类的维生素有很多种。\n\n#### 硫胺素(维生素B1)\n\n运动越多，消耗能量（主要是碳水化合物）越多，硫胺素需要也越多。随着进食量增加，硫胺素摄入可能也会增加，**所以一般不必额外补充。**\n\n#### 核黄素（维生素B2）\n\n核黄素跟蛋白质、脂肪、碳水化合物的能量产生都有关系。我国目前是成年男性1.4毫克/天，女性1.2毫克/天。运动人群，增加到推荐量的1-2倍足矣。食物补充的话，平时可以多吃肉、蛋和奶制品。花椰菜、芦笋、菠菜这类绿色蔬菜核黄素含量也比较高。**这些东西吃的少的话，可以考虑补充剂。**\n\n#### 烟酸（维生素B3）\n\n烟酸跟蛋白质、碳水化合物、脂肪的能量产生都有关。含烟酸比较丰富的食物有肉类、谷类、豆类食物。因为色氨酸在体内能转化成烟酸，动物蛋白摄入比较多的人，**烟酸一般都不会缺乏**。所以，常吃较多肉的人，即便是运动人群，也基本不用额外补充烟酸。\n\n#### 维生素B6\n\n这种维生素主要跟糖原和蛋白质代谢有关。体内储存的糖原想变成葡萄糖，氨基酸想转换利用，都需要维生素B6，所以这东西跟运动关系密切。\n\n维生素B6跟别的B族维生素不一样，这玩意有毒性。但一般都要达到药物剂量才会中毒。比如治疗经期按综合症、哮喘有时会用到B6。维生素B6的最高耐受上限是100毫克/天。低于这个剂量一般没有太大问题。\n\n比较安全的补充方式还是食物，肉、蔬菜、坚果、香蕉、全谷物食品里含B6都很丰富。比如100克鸡胸肉里就有大约0.6毫克维生素B6。所以，这些东西吃的比较多的话，一般不用吃补充剂额外补充。\n\n## 选择\n\n考虑自身的一些条件，我最后还是考虑先买点维生素C和维生素B2以及维生素B6。","slug":"维生素指北","published":1,"updated":"2018-08-26T05:54:26.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbjh001xssv60nzmocqz","content":"<h1 id=\"维生素指北\"><a href=\"#维生素指北\" class=\"headerlink\" title=\"维生素指北\"></a>维生素指北</h1><p>有很长一段时间没更新博文了，一个原因是比较忙，另一个原因就是最近的身体状态不太好。这个夏天竟然连续地感冒了两次，今天还有牙疼、口腔溃疡在折磨着。几次折腾下来，也花了不少钱，所以还是得找一些办法增强抵抗力。</p>\n<p>前段时间看到知乎一些关于维生素的介绍，便宜又有效，感觉还是比较符合我的心里预期。当然最好的健康养生方式是良好的作息以及均衡的饮食习惯。饮食习惯我倒没有非常挑食，最近泡面买来我也很少吃了，因为泡面这玩意儿<em>钠</em>含量是真的高，一包下来基本有个 <em>2000mg</em> 了，一个人一天建议摄入量也差不多是这么多。所以泡面、高盐量的食品还是要少吃，<em>钠</em>摄入太多了，对血压什么的影响都很大。另一个点，我倒是很少吃水果，一来不太喜欢出去买水果，二来现在的水果也不太便宜，同时我也没冰箱，很能储存水果。仔细想想，好像上一次吃水果的时候还是好几个月之前。</p>\n<p>这两天牙龈肿疼地我睡不着觉，买了药就花去了五十多。查了一些资料，以及结合自身的症状对比，感觉我可能因为是长期没吃水果，身体缺少了维生素C，所以本篇结合一些别的文章，总结下怎么补充维生素。</p>\n<h2 id=\"维生素分类\"><a href=\"#维生素分类\" class=\"headerlink\" title=\"维生素分类\"></a>维生素分类</h2><h3 id=\"维生素A\"><a href=\"#维生素A\" class=\"headerlink\" title=\"维生素A\"></a>维生素A</h3><blockquote>\n<p>长期用眼。</p>\n</blockquote>\n<p>维生素A缺乏，会带来眼睛干涩，夜间视力下降等问题。</p>\n<p><img src=\"/2018/08/26/维生素指北/a.jpg\" alt=\"维生素A\"></p>\n<h3 id=\"维生素C\"><a href=\"#维生素C\" class=\"headerlink\" title=\"维生素C\"></a>维生素C</h3><blockquote>\n<p>果蔬没吃够的</p>\n</blockquote>\n<p><img src=\"/2018/08/26/维生素指北/c.jpg\" alt=\"维生素A\"></p>\n<h3 id=\"维生素D\"><a href=\"#维生素D\" class=\"headerlink\" title=\"维生素D\"></a>维生素D</h3><blockquote>\n<p>太阳晒的少，影响钙吸收</p>\n</blockquote>\n<h3 id=\"维生素B\"><a href=\"#维生素B\" class=\"headerlink\" title=\"维生素B\"></a>维生素B</h3><p>B类的维生素有很多种。</p>\n<h4 id=\"硫胺素-维生素B1\"><a href=\"#硫胺素-维生素B1\" class=\"headerlink\" title=\"硫胺素(维生素B1)\"></a>硫胺素(维生素B1)</h4><p>运动越多，消耗能量（主要是碳水化合物）越多，硫胺素需要也越多。随着进食量增加，硫胺素摄入可能也会增加，<strong>所以一般不必额外补充。</strong></p>\n<h4 id=\"核黄素（维生素B2）\"><a href=\"#核黄素（维生素B2）\" class=\"headerlink\" title=\"核黄素（维生素B2）\"></a>核黄素（维生素B2）</h4><p>核黄素跟蛋白质、脂肪、碳水化合物的能量产生都有关系。我国目前是成年男性1.4毫克/天，女性1.2毫克/天。运动人群，增加到推荐量的1-2倍足矣。食物补充的话，平时可以多吃肉、蛋和奶制品。花椰菜、芦笋、菠菜这类绿色蔬菜核黄素含量也比较高。<strong>这些东西吃的少的话，可以考虑补充剂。</strong></p>\n<h4 id=\"烟酸（维生素B3）\"><a href=\"#烟酸（维生素B3）\" class=\"headerlink\" title=\"烟酸（维生素B3）\"></a>烟酸（维生素B3）</h4><p>烟酸跟蛋白质、碳水化合物、脂肪的能量产生都有关。含烟酸比较丰富的食物有肉类、谷类、豆类食物。因为色氨酸在体内能转化成烟酸，动物蛋白摄入比较多的人，<strong>烟酸一般都不会缺乏</strong>。所以，常吃较多肉的人，即便是运动人群，也基本不用额外补充烟酸。</p>\n<h4 id=\"维生素B6\"><a href=\"#维生素B6\" class=\"headerlink\" title=\"维生素B6\"></a>维生素B6</h4><p>这种维生素主要跟糖原和蛋白质代谢有关。体内储存的糖原想变成葡萄糖，氨基酸想转换利用，都需要维生素B6，所以这东西跟运动关系密切。</p>\n<p>维生素B6跟别的B族维生素不一样，这玩意有毒性。但一般都要达到药物剂量才会中毒。比如治疗经期按综合症、哮喘有时会用到B6。维生素B6的最高耐受上限是100毫克/天。低于这个剂量一般没有太大问题。</p>\n<p>比较安全的补充方式还是食物，肉、蔬菜、坚果、香蕉、全谷物食品里含B6都很丰富。比如100克鸡胸肉里就有大约0.6毫克维生素B6。所以，这些东西吃的比较多的话，一般不用吃补充剂额外补充。</p>\n<h2 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h2><p>考虑自身的一些条件，我最后还是考虑先买点维生素C和维生素B2以及维生素B6。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"维生素指北\"><a href=\"#维生素指北\" class=\"headerlink\" title=\"维生素指北\"></a>维生素指北</h1><p>有很长一段时间没更新博文了，一个原因是比较忙，另一个原因就是最近的身体状态不太好。这个夏天竟然连续地感冒了两次，今天还有牙疼、口腔溃疡在折磨着。几次折腾下来，也花了不少钱，所以还是得找一些办法增强抵抗力。</p>\n<p>前段时间看到知乎一些关于维生素的介绍，便宜又有效，感觉还是比较符合我的心里预期。当然最好的健康养生方式是良好的作息以及均衡的饮食习惯。饮食习惯我倒没有非常挑食，最近泡面买来我也很少吃了，因为泡面这玩意儿<em>钠</em>含量是真的高，一包下来基本有个 <em>2000mg</em> 了，一个人一天建议摄入量也差不多是这么多。所以泡面、高盐量的食品还是要少吃，<em>钠</em>摄入太多了，对血压什么的影响都很大。另一个点，我倒是很少吃水果，一来不太喜欢出去买水果，二来现在的水果也不太便宜，同时我也没冰箱，很能储存水果。仔细想想，好像上一次吃水果的时候还是好几个月之前。</p>\n<p>这两天牙龈肿疼地我睡不着觉，买了药就花去了五十多。查了一些资料，以及结合自身的症状对比，感觉我可能因为是长期没吃水果，身体缺少了维生素C，所以本篇结合一些别的文章，总结下怎么补充维生素。</p>\n<h2 id=\"维生素分类\"><a href=\"#维生素分类\" class=\"headerlink\" title=\"维生素分类\"></a>维生素分类</h2><h3 id=\"维生素A\"><a href=\"#维生素A\" class=\"headerlink\" title=\"维生素A\"></a>维生素A</h3><blockquote>\n<p>长期用眼。</p>\n</blockquote>\n<p>维生素A缺乏，会带来眼睛干涩，夜间视力下降等问题。</p>\n<p><img src=\"/2018/08/26/维生素指北/a.jpg\" alt=\"维生素A\"></p>\n<h3 id=\"维生素C\"><a href=\"#维生素C\" class=\"headerlink\" title=\"维生素C\"></a>维生素C</h3><blockquote>\n<p>果蔬没吃够的</p>\n</blockquote>\n<p><img src=\"/2018/08/26/维生素指北/c.jpg\" alt=\"维生素A\"></p>\n<h3 id=\"维生素D\"><a href=\"#维生素D\" class=\"headerlink\" title=\"维生素D\"></a>维生素D</h3><blockquote>\n<p>太阳晒的少，影响钙吸收</p>\n</blockquote>\n<h3 id=\"维生素B\"><a href=\"#维生素B\" class=\"headerlink\" title=\"维生素B\"></a>维生素B</h3><p>B类的维生素有很多种。</p>\n<h4 id=\"硫胺素-维生素B1\"><a href=\"#硫胺素-维生素B1\" class=\"headerlink\" title=\"硫胺素(维生素B1)\"></a>硫胺素(维生素B1)</h4><p>运动越多，消耗能量（主要是碳水化合物）越多，硫胺素需要也越多。随着进食量增加，硫胺素摄入可能也会增加，<strong>所以一般不必额外补充。</strong></p>\n<h4 id=\"核黄素（维生素B2）\"><a href=\"#核黄素（维生素B2）\" class=\"headerlink\" title=\"核黄素（维生素B2）\"></a>核黄素（维生素B2）</h4><p>核黄素跟蛋白质、脂肪、碳水化合物的能量产生都有关系。我国目前是成年男性1.4毫克/天，女性1.2毫克/天。运动人群，增加到推荐量的1-2倍足矣。食物补充的话，平时可以多吃肉、蛋和奶制品。花椰菜、芦笋、菠菜这类绿色蔬菜核黄素含量也比较高。<strong>这些东西吃的少的话，可以考虑补充剂。</strong></p>\n<h4 id=\"烟酸（维生素B3）\"><a href=\"#烟酸（维生素B3）\" class=\"headerlink\" title=\"烟酸（维生素B3）\"></a>烟酸（维生素B3）</h4><p>烟酸跟蛋白质、碳水化合物、脂肪的能量产生都有关。含烟酸比较丰富的食物有肉类、谷类、豆类食物。因为色氨酸在体内能转化成烟酸，动物蛋白摄入比较多的人，<strong>烟酸一般都不会缺乏</strong>。所以，常吃较多肉的人，即便是运动人群，也基本不用额外补充烟酸。</p>\n<h4 id=\"维生素B6\"><a href=\"#维生素B6\" class=\"headerlink\" title=\"维生素B6\"></a>维生素B6</h4><p>这种维生素主要跟糖原和蛋白质代谢有关。体内储存的糖原想变成葡萄糖，氨基酸想转换利用，都需要维生素B6，所以这东西跟运动关系密切。</p>\n<p>维生素B6跟别的B族维生素不一样，这玩意有毒性。但一般都要达到药物剂量才会中毒。比如治疗经期按综合症、哮喘有时会用到B6。维生素B6的最高耐受上限是100毫克/天。低于这个剂量一般没有太大问题。</p>\n<p>比较安全的补充方式还是食物，肉、蔬菜、坚果、香蕉、全谷物食品里含B6都很丰富。比如100克鸡胸肉里就有大约0.6毫克维生素B6。所以，这些东西吃的比较多的话，一般不用吃补充剂额外补充。</p>\n<h2 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h2><p>考虑自身的一些条件，我最后还是考虑先买点维生素C和维生素B2以及维生素B6。</p>\n"},{"title":"绕不开的promise","date":"2018-08-02T01:21:44.000Z","_content":"\n# 绕不开的promise\n\njs这玩意儿的异步处理真的是让人头疼的一个东西，回调函数这种处理方式写稍微多一点的逻辑就整个人都被绕进去了，所以嘛，业界也就搞出乱七八糟的方案，一套一套的，好在es6也接受业界的一些做法，比如就把promise、async这种异步的处理方案搞进规范了。async也离不开promise，所以深入理解promise对现代化处理异步编程很有帮助。\n\n> 所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。\n\nPromise在用起来的时候就是`new Promise((resolve,reject) => {})`,看到出来这个玩意就是一个构造函数嘛，哟，还挺奇怪，这个构造函数竟然还接受一个函数当作参数，传入的这个函数又有两个固定的参数`resolve`、`reject`，这两个参数也是两个方法。\n\nPromise的两个特点：\n\n1. 对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。\n\n2. 一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n\n## 怎么用\n\n就是`new`一个`Promise`实例出来，用这个实例的`then`方法搞。\n\n```js\nconst promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n```\n\n### Promise.prototype.then()\n\n> Promise 实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。\n\nthen方法很重要，甚至可以继续返回一个promise链式调用\n\n```js\ngetJSON(\"/post/1.json\").then(\n  post => getJSON(post.commentURL)\n).then(\n  comments => console.log(\"resolved: \", comments),\n  err => console.log(\"rejected: \", err)\n);\n```\n\n### Promise.prototype.catch()\n\n`promise`的异常捕获是个难点，重点掌握。\n\n> `Promise.prototype.catch`方法是`.then(null, rejection)`的别名，用于指定发生错误时的回调函数,这就说明catch也和then一样返回一个promise，可以继续then和catch。\n\n```js\np.then((val) => console.log('fulfilled:', val))\n  .catch((err) => console.log('rejected', err));\n\n// 等同于\np.then((val) => console.log('fulfilled:', val))\n  .then(null, (err) => console.log(\"rejected:\", err));\n```\n\n如果该对象状态变为`resolved`，则会调用`then`方法指定的回调函数；如果异步操作抛出错误，状态就会变为`rejected`，就会调用`catch`方法指定的回调函数，处理这个错误。**另外，then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获**\n\n```js\n// 写法一\nconst promise = new Promise(function(resolve, reject) {\n  try {\n    throw new Error('test');\n  } catch(e) {\n    reject(e);\n  }\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n\n// 写法二\nconst promise = new Promise(function(resolve, reject) {\n  reject(new Error('test'));\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n```\n\n这两种写法相同，reject相当于抛出异常，然后让catch捕获。\n**如果 Promise 状态已经变成resolved，再抛出错误是无效的。**\n\n```js\nconst promise = new Promise(function(resolve, reject) {\n  resolve('ok');\n  throw new Error('test');\n});\npromise\n  .then(function(value) { console.log(value) })\n  .catch(function(error) { console.log(error) });\n// ok\n```\n\n上面代码中，`Promise` 在`resolve`语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 `Promise` 的状态一旦改变，就永久保持该状态，不会再变了。\n\n`Promise`对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个`catch`语句捕获。\n**所以一般在最后面加上一个`catch`就够了，没必要在每个`then`方法里面传入第二个捕获错误的参数，`then就只要处理成功的情况就行**\n\n> **Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”**\n\n所以在`node`中`process`有个`unhandleRejection`专门来捕获这种`promise`中没有捕获的异常\n\n```js\nprocess.on('unhandledRejection', function (err, p) {\n  throw err;\n});\n```\n\n### Promise.prototype.finally()\n\n`finally`方法用于指定不管 `Promise` 对象最后状态如何，都会执行的操作。\nfinally本质上是then方法的特例，实际上就是简化了成功和失败共同要做的事情。\n\n```js\npromise\n.finally(() => {\n  // 语句\n});\n\n// 等同于\npromise\n.then(\n  result => {\n    // 语句\n    return result;\n  },\n  error => {\n    // 语句\n    throw error;\n  }\n);\n```\n\n### Promise.all()\n\n`Promise.all`方法用于将多个 `Promise` 实例，包装成一个新的 `Promise` 实例。\n\n```js\nconst p = Promise.all([p1, p2, p3]);\n```\n\n1. `p1`、`p2`、`p3`全部成功后，`p1`、`p2`、`p3`的返回值组成一个数组传给P的回调\n2. 其中一个失败，就把失败的reject传给P的失败回调\n\n同样这里也存在异常的处理情况，**作为参数的promise自己定义了catch方法，则如果出现异常外层的promise不能捕获到**\n\n### Promise.race()\n\n和Promise.all差不多\n\n```js\nconst p = Promise.race([p1, p2, p3]);\n```\n\n上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。\n\n### Promise.resolve()\n\n有时需要将现有对象转为 Promise 对象，Promise.resolve方法就起到这个作用。\n\n```js\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n```\n\n需要注意的是，立即resolve的 Promise 对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。\n\n```js\nsetTimeout(function () {\n  console.log('three');\n}, 0);\n\nPromise.resolve().then(function () {\n  console.log('two');\n});\n\nconsole.log('one');\n\n// one\n// two\n// three\n```\n\n上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log('one')则是立即执行，因此最先输出。\n\n这种用处不多，倒是这种类型面试题不少。\n\n### Promise.reject()\n\n和Promise.resolve()差不多。\n\n### Promise.try()\n\n不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误\n\n[参考文献](https://juejin.im/post/5ab20c58f265da23a228fe0f?utm_source=gold_browser_extension)\n\n---\n\n![Johannes Vermeer – The Milkmaid](绕不开的promise/1012308194.jpg)\n\n> Johannes Vermeer – The Milkmaid 1658-61","source":"_posts/绕不开的promise.md","raw":"---\ntitle: 绕不开的promise\ndate: 2018-08-02 09:21:44\ntags:\n  - promise\ncategories: 前端\n---\n\n# 绕不开的promise\n\njs这玩意儿的异步处理真的是让人头疼的一个东西，回调函数这种处理方式写稍微多一点的逻辑就整个人都被绕进去了，所以嘛，业界也就搞出乱七八糟的方案，一套一套的，好在es6也接受业界的一些做法，比如就把promise、async这种异步的处理方案搞进规范了。async也离不开promise，所以深入理解promise对现代化处理异步编程很有帮助。\n\n> 所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。\n\nPromise在用起来的时候就是`new Promise((resolve,reject) => {})`,看到出来这个玩意就是一个构造函数嘛，哟，还挺奇怪，这个构造函数竟然还接受一个函数当作参数，传入的这个函数又有两个固定的参数`resolve`、`reject`，这两个参数也是两个方法。\n\nPromise的两个特点：\n\n1. 对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。\n\n2. 一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n\n## 怎么用\n\n就是`new`一个`Promise`实例出来，用这个实例的`then`方法搞。\n\n```js\nconst promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n```\n\n### Promise.prototype.then()\n\n> Promise 实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。\n\nthen方法很重要，甚至可以继续返回一个promise链式调用\n\n```js\ngetJSON(\"/post/1.json\").then(\n  post => getJSON(post.commentURL)\n).then(\n  comments => console.log(\"resolved: \", comments),\n  err => console.log(\"rejected: \", err)\n);\n```\n\n### Promise.prototype.catch()\n\n`promise`的异常捕获是个难点，重点掌握。\n\n> `Promise.prototype.catch`方法是`.then(null, rejection)`的别名，用于指定发生错误时的回调函数,这就说明catch也和then一样返回一个promise，可以继续then和catch。\n\n```js\np.then((val) => console.log('fulfilled:', val))\n  .catch((err) => console.log('rejected', err));\n\n// 等同于\np.then((val) => console.log('fulfilled:', val))\n  .then(null, (err) => console.log(\"rejected:\", err));\n```\n\n如果该对象状态变为`resolved`，则会调用`then`方法指定的回调函数；如果异步操作抛出错误，状态就会变为`rejected`，就会调用`catch`方法指定的回调函数，处理这个错误。**另外，then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获**\n\n```js\n// 写法一\nconst promise = new Promise(function(resolve, reject) {\n  try {\n    throw new Error('test');\n  } catch(e) {\n    reject(e);\n  }\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n\n// 写法二\nconst promise = new Promise(function(resolve, reject) {\n  reject(new Error('test'));\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n```\n\n这两种写法相同，reject相当于抛出异常，然后让catch捕获。\n**如果 Promise 状态已经变成resolved，再抛出错误是无效的。**\n\n```js\nconst promise = new Promise(function(resolve, reject) {\n  resolve('ok');\n  throw new Error('test');\n});\npromise\n  .then(function(value) { console.log(value) })\n  .catch(function(error) { console.log(error) });\n// ok\n```\n\n上面代码中，`Promise` 在`resolve`语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 `Promise` 的状态一旦改变，就永久保持该状态，不会再变了。\n\n`Promise`对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个`catch`语句捕获。\n**所以一般在最后面加上一个`catch`就够了，没必要在每个`then`方法里面传入第二个捕获错误的参数，`then就只要处理成功的情况就行**\n\n> **Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”**\n\n所以在`node`中`process`有个`unhandleRejection`专门来捕获这种`promise`中没有捕获的异常\n\n```js\nprocess.on('unhandledRejection', function (err, p) {\n  throw err;\n});\n```\n\n### Promise.prototype.finally()\n\n`finally`方法用于指定不管 `Promise` 对象最后状态如何，都会执行的操作。\nfinally本质上是then方法的特例，实际上就是简化了成功和失败共同要做的事情。\n\n```js\npromise\n.finally(() => {\n  // 语句\n});\n\n// 等同于\npromise\n.then(\n  result => {\n    // 语句\n    return result;\n  },\n  error => {\n    // 语句\n    throw error;\n  }\n);\n```\n\n### Promise.all()\n\n`Promise.all`方法用于将多个 `Promise` 实例，包装成一个新的 `Promise` 实例。\n\n```js\nconst p = Promise.all([p1, p2, p3]);\n```\n\n1. `p1`、`p2`、`p3`全部成功后，`p1`、`p2`、`p3`的返回值组成一个数组传给P的回调\n2. 其中一个失败，就把失败的reject传给P的失败回调\n\n同样这里也存在异常的处理情况，**作为参数的promise自己定义了catch方法，则如果出现异常外层的promise不能捕获到**\n\n### Promise.race()\n\n和Promise.all差不多\n\n```js\nconst p = Promise.race([p1, p2, p3]);\n```\n\n上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。\n\n### Promise.resolve()\n\n有时需要将现有对象转为 Promise 对象，Promise.resolve方法就起到这个作用。\n\n```js\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n```\n\n需要注意的是，立即resolve的 Promise 对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。\n\n```js\nsetTimeout(function () {\n  console.log('three');\n}, 0);\n\nPromise.resolve().then(function () {\n  console.log('two');\n});\n\nconsole.log('one');\n\n// one\n// two\n// three\n```\n\n上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log('one')则是立即执行，因此最先输出。\n\n这种用处不多，倒是这种类型面试题不少。\n\n### Promise.reject()\n\n和Promise.resolve()差不多。\n\n### Promise.try()\n\n不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误\n\n[参考文献](https://juejin.im/post/5ab20c58f265da23a228fe0f?utm_source=gold_browser_extension)\n\n---\n\n![Johannes Vermeer – The Milkmaid](绕不开的promise/1012308194.jpg)\n\n> Johannes Vermeer – The Milkmaid 1658-61","slug":"绕不开的promise","published":1,"updated":"2018-08-02T13:17:52.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbjl001zssv6t2ue71e4","content":"<h1 id=\"绕不开的promise\"><a href=\"#绕不开的promise\" class=\"headerlink\" title=\"绕不开的promise\"></a>绕不开的promise</h1><p>js这玩意儿的异步处理真的是让人头疼的一个东西，回调函数这种处理方式写稍微多一点的逻辑就整个人都被绕进去了，所以嘛，业界也就搞出乱七八糟的方案，一套一套的，好在es6也接受业界的一些做法，比如就把promise、async这种异步的处理方案搞进规范了。async也离不开promise，所以深入理解promise对现代化处理异步编程很有帮助。</p>\n<blockquote>\n<p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p>\n</blockquote>\n<p>Promise在用起来的时候就是<code>new Promise((resolve,reject) =&gt; {})</code>,看到出来这个玩意就是一个构造函数嘛，哟，还挺奇怪，这个构造函数竟然还接受一个函数当作参数，传入的这个函数又有两个固定的参数<code>resolve</code>、<code>reject</code>，这两个参数也是两个方法。</p>\n<p>Promise的两个特点：</p>\n<ol>\n<li><p>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p>\n</li>\n<li><p>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>\n</li>\n</ol>\n<h2 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h2><p>就是<code>new</code>一个<code>Promise</code>实例出来，用这个实例的<code>then</code>方法搞。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... some code</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</span><br><span class=\"line\">    resolve(value);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h3><blockquote>\n<p>Promise 实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。</p>\n</blockquote>\n<p>then方法很重要，甚至可以继续返回一个promise链式调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(</span><br><span class=\"line\">  post =&gt; getJSON(post.commentURL)</span><br><span class=\"line\">).then(</span><br><span class=\"line\">  comments =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"resolved: \"</span>, comments),</span><br><span class=\"line\">  err =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected: \"</span>, err)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch()\"></a>Promise.prototype.catch()</h3><p><code>promise</code>的异常捕获是个难点，重点掌握。</p>\n<blockquote>\n<p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数,这就说明catch也和then一样返回一个promise，可以继续then和catch。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'fulfilled:'</span>, val))</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'rejected'</span>, err));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'fulfilled:'</span>, val))</span><br><span class=\"line\">  .then(<span class=\"literal\">null</span>, (err) =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected:\"</span>, err));</span><br></pre></td></tr></table></figure>\n<p>如果该对象状态变为<code>resolved</code>，则会调用<code>then</code>方法指定的回调函数；如果异步操作抛出错误，状态就会变为<code>rejected</code>，就会调用<code>catch</code>方法指定的回调函数，处理这个错误。<strong>另外，then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    reject(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'test'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这两种写法相同，reject相当于抛出异常，然后让catch捕获。<br><strong>如果 Promise 状态已经变成resolved，再抛出错误是无效的。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"built_in\">console</span>.log(value) &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123; <span class=\"built_in\">console</span>.log(error) &#125;);</span><br><span class=\"line\"><span class=\"comment\">// ok</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>Promise</code> 在<code>resolve</code>语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 <code>Promise</code> 的状态一旦改变，就永久保持该状态，不会再变了。</p>\n<p><code>Promise</code>对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个<code>catch</code>语句捕获。<br><strong>所以一般在最后面加上一个<code>catch</code>就够了，没必要在每个<code>then</code>方法里面传入第二个捕获错误的参数，`then就只要处理成功的情况就行</strong></p>\n<blockquote>\n<p><strong>Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”</strong></p>\n</blockquote>\n<p>所以在<code>node</code>中<code>process</code>有个<code>unhandleRejection</code>专门来捕获这种<code>promise</code>中没有捕获的异常</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.on(<span class=\"string\">'unhandledRejection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, p</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-prototype-finally\"><a href=\"#Promise-prototype-finally\" class=\"headerlink\" title=\"Promise.prototype.finally()\"></a>Promise.prototype.finally()</h3><p><code>finally</code>方法用于指定不管 <code>Promise</code> 对象最后状态如何，都会执行的操作。<br>finally本质上是then方法的特例，实际上就是简化了成功和失败共同要做的事情。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise</span><br><span class=\"line\">.finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 语句</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">promise</span><br><span class=\"line\">.then(</span><br><span class=\"line\">  result =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 语句</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 语句</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h3><p><code>Promise.all</code>方法用于将多个 <code>Promise</code> 实例，包装成一个新的 <code>Promise</code> 实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>p1</code>、<code>p2</code>、<code>p3</code>全部成功后，<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组传给P的回调</li>\n<li>其中一个失败，就把失败的reject传给P的失败回调</li>\n</ol>\n<p>同样这里也存在异常的处理情况，<strong>作为参数的promise自己定义了catch方法，则如果出现异常外层的promise不能捕获到</strong></p>\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h3><p>和Promise.all差不多</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p>\n<h3 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h3><p>有时需要将现有对象转为 Promise 对象，Promise.resolve方法就起到这个作用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(<span class=\"string\">'foo'</span>))</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，立即resolve的 Promise 对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'three'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'two'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'one'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"comment\">// two</span></span><br><span class=\"line\"><span class=\"comment\">// three</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log(‘one’)则是立即执行，因此最先输出。</p>\n<p>这种用处不多，倒是这种类型面试题不少。</p>\n<h3 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject()\"></a>Promise.reject()</h3><p>和Promise.resolve()差不多。</p>\n<h3 id=\"Promise-try\"><a href=\"#Promise-try\" class=\"headerlink\" title=\"Promise.try()\"></a>Promise.try()</h3><p>不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误</p>\n<p><a href=\"https://juejin.im/post/5ab20c58f265da23a228fe0f?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">参考文献</a></p>\n<hr>\n<p><img src=\"/2018/08/02/绕不开的promise/1012308194.jpg\" alt=\"Johannes Vermeer – The Milkmaid\"></p>\n<blockquote>\n<p>Johannes Vermeer – The Milkmaid 1658-61</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"绕不开的promise\"><a href=\"#绕不开的promise\" class=\"headerlink\" title=\"绕不开的promise\"></a>绕不开的promise</h1><p>js这玩意儿的异步处理真的是让人头疼的一个东西，回调函数这种处理方式写稍微多一点的逻辑就整个人都被绕进去了，所以嘛，业界也就搞出乱七八糟的方案，一套一套的，好在es6也接受业界的一些做法，比如就把promise、async这种异步的处理方案搞进规范了。async也离不开promise，所以深入理解promise对现代化处理异步编程很有帮助。</p>\n<blockquote>\n<p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p>\n</blockquote>\n<p>Promise在用起来的时候就是<code>new Promise((resolve,reject) =&gt; {})</code>,看到出来这个玩意就是一个构造函数嘛，哟，还挺奇怪，这个构造函数竟然还接受一个函数当作参数，传入的这个函数又有两个固定的参数<code>resolve</code>、<code>reject</code>，这两个参数也是两个方法。</p>\n<p>Promise的两个特点：</p>\n<ol>\n<li><p>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p>\n</li>\n<li><p>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>\n</li>\n</ol>\n<h2 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h2><p>就是<code>new</code>一个<code>Promise</code>实例出来，用这个实例的<code>then</code>方法搞。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... some code</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</span><br><span class=\"line\">    resolve(value);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h3><blockquote>\n<p>Promise 实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。</p>\n</blockquote>\n<p>then方法很重要，甚至可以继续返回一个promise链式调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(</span><br><span class=\"line\">  post =&gt; getJSON(post.commentURL)</span><br><span class=\"line\">).then(</span><br><span class=\"line\">  comments =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"resolved: \"</span>, comments),</span><br><span class=\"line\">  err =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected: \"</span>, err)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch()\"></a>Promise.prototype.catch()</h3><p><code>promise</code>的异常捕获是个难点，重点掌握。</p>\n<blockquote>\n<p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数,这就说明catch也和then一样返回一个promise，可以继续then和catch。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'fulfilled:'</span>, val))</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'rejected'</span>, err));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'fulfilled:'</span>, val))</span><br><span class=\"line\">  .then(<span class=\"literal\">null</span>, (err) =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected:\"</span>, err));</span><br></pre></td></tr></table></figure>\n<p>如果该对象状态变为<code>resolved</code>，则会调用<code>then</code>方法指定的回调函数；如果异步操作抛出错误，状态就会变为<code>rejected</code>，就会调用<code>catch</code>方法指定的回调函数，处理这个错误。<strong>另外，then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    reject(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'test'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这两种写法相同，reject相当于抛出异常，然后让catch捕获。<br><strong>如果 Promise 状态已经变成resolved，再抛出错误是无效的。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"built_in\">console</span>.log(value) &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123; <span class=\"built_in\">console</span>.log(error) &#125;);</span><br><span class=\"line\"><span class=\"comment\">// ok</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>Promise</code> 在<code>resolve</code>语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 <code>Promise</code> 的状态一旦改变，就永久保持该状态，不会再变了。</p>\n<p><code>Promise</code>对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个<code>catch</code>语句捕获。<br><strong>所以一般在最后面加上一个<code>catch</code>就够了，没必要在每个<code>then</code>方法里面传入第二个捕获错误的参数，`then就只要处理成功的情况就行</strong></p>\n<blockquote>\n<p><strong>Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”</strong></p>\n</blockquote>\n<p>所以在<code>node</code>中<code>process</code>有个<code>unhandleRejection</code>专门来捕获这种<code>promise</code>中没有捕获的异常</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.on(<span class=\"string\">'unhandledRejection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, p</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-prototype-finally\"><a href=\"#Promise-prototype-finally\" class=\"headerlink\" title=\"Promise.prototype.finally()\"></a>Promise.prototype.finally()</h3><p><code>finally</code>方法用于指定不管 <code>Promise</code> 对象最后状态如何，都会执行的操作。<br>finally本质上是then方法的特例，实际上就是简化了成功和失败共同要做的事情。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise</span><br><span class=\"line\">.finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 语句</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">promise</span><br><span class=\"line\">.then(</span><br><span class=\"line\">  result =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 语句</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 语句</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h3><p><code>Promise.all</code>方法用于将多个 <code>Promise</code> 实例，包装成一个新的 <code>Promise</code> 实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>p1</code>、<code>p2</code>、<code>p3</code>全部成功后，<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组传给P的回调</li>\n<li>其中一个失败，就把失败的reject传给P的失败回调</li>\n</ol>\n<p>同样这里也存在异常的处理情况，<strong>作为参数的promise自己定义了catch方法，则如果出现异常外层的promise不能捕获到</strong></p>\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h3><p>和Promise.all差不多</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p>\n<h3 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h3><p>有时需要将现有对象转为 Promise 对象，Promise.resolve方法就起到这个作用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(<span class=\"string\">'foo'</span>))</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，立即resolve的 Promise 对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'three'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'two'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'one'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"comment\">// two</span></span><br><span class=\"line\"><span class=\"comment\">// three</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log(‘one’)则是立即执行，因此最先输出。</p>\n<p>这种用处不多，倒是这种类型面试题不少。</p>\n<h3 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject()\"></a>Promise.reject()</h3><p>和Promise.resolve()差不多。</p>\n<h3 id=\"Promise-try\"><a href=\"#Promise-try\" class=\"headerlink\" title=\"Promise.try()\"></a>Promise.try()</h3><p>不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误</p>\n<p><a href=\"https://juejin.im/post/5ab20c58f265da23a228fe0f?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">参考文献</a></p>\n<hr>\n<p><img src=\"/2018/08/02/绕不开的promise/1012308194.jpg\" alt=\"Johannes Vermeer – The Milkmaid\"></p>\n<blockquote>\n<p>Johannes Vermeer – The Milkmaid 1658-61</p>\n</blockquote>\n"},{"title":"懒加载","date":"2018-08-14T06:28:16.000Z","_content":"\n# react-lazy-load粗读\n\n近来没什么特别要做的事，下班回来的空闲时间也比较多，所以抽空看看懒加载是怎么实现的，特别是看了下 `react-lazy-load` 的库的实现。\n\n## 懒加载\n\n这里懒加载场景不是路由分割打包那种，而是单个页面中有一个很长的列表，列表中的图片进行懒加载的效果。\n\n在 `jquery` 时代，这种列表图片懒加载效果就已经有了，那么我们想一想这种在滚动的时候才去加载图片等资源的方式该如何去实现呢？\n\n## 大致原理\n\n浏览器解析 `html` 的时候，在遇到 `img` 标签以及发现 `src` 属性的时候，浏览器就会去发请求拿图片去了。这里就是切入点，根据这种现象，做下面几件事：\n\n1. 把列表中所有的图片的 `img` 标签的 `src` 设为空\n2. 把真实的图片路径存成一个 `dom` 属性，打个比方: `<img data-src='/xxxxx.jpg' />`\n3. 写一个检测列表某一项是否是可见状态\n4. 全局滚动事件做一个监听，检测当前列表的项是否是可见的，如果可见则给 `img` 标签上存着真实图片路径赋值给 `src` 属性\n\n## react-lazy-load\n\n知道懒加载的大概原理，来看一下 `react-lazy-load` 是怎么做的。\n\n大体看了下 `react-lazy-load` 的实现的总体思路就更加简单了，本质上就是让需要懒加载的组件包含在这个包提供的 `LazyLoad` 组件中，不渲染这个组件，然后去监听这个 `LazyLoad` 组件是否已经是可见了，如果是可见了那么就去强制渲染包含在 `LazyLoad` 组件内部需要懒加载的组件了。\n\n这种方式相较于手动去控制 `img` 标签来的实在是太方便了，完全以组件为单位，对组件进行懒加载。这样的话，完全就不需要感知组件内部的逻辑和渲染逻辑，无论这个需要懒加载的组件内部是有几个 `img` 标签，也完全不用去手动操控 `src` 属性的赋值。\n\n### react-lazy-load 之 render\n\n```js\nclass LazyLoad extends React.Component{\n    constructor(props) {\n        super(props)\n        this.visible = false\n    }\n    componentDidMount() {\n        // 主要是监听事件\n        // 省略此处代码\n    }\n    shouldComponentUpdate() {\n        return this.visible\n    }\n    componentWillUnmount() {\n        // 主要是移除监听事件\n        // 省略\n    }\n    render () {\n        return this.visible\n                ? this.props.children\n                : this.props.placeholder\n                    ? this.props.placeholder\n                    : <div style={{ height: this.props.height }} className=\"lazyload-placeholder\" />\n    }\n}\n```\n\n从 `render` 函数能够看出来，依据当前 `visible` 的值来确定是否渲染 `this.props.children`，如果为 `false` 则去渲染节点的占位符。如果外部传入一个占位节点，就用这个传入的占位节点，否则就用默认的占位符去占位。注意到：`shouldComponentUpdate` 依据 `this.visible` 的值去判断是否更新组件。剩下的，该去看看如何监听事件以及修改 `this.visible`、强制重新渲染组件的。\n\n### react-lazy-load 之 componentDidMount\n\n```js\n  componentDidMount() {\n    // It's unlikely to change delay type on the fly, this is mainly\n    // designed for tests\n    const needResetFinalLazyLoadHandler = (this.props.debounce !== undefined && delayType === 'throttle')\n      || (delayType === 'debounce' && this.props.debounce === undefined);\n\n    if (needResetFinalLazyLoadHandler) {\n      off(window, 'scroll', finalLazyLoadHandler, passiveEvent);\n      off(window, 'resize', finalLazyLoadHandler, passiveEvent);\n      finalLazyLoadHandler = null;\n    }\n\n    if (!finalLazyLoadHandler) {\n      if (this.props.debounce !== undefined) {\n        finalLazyLoadHandler = debounce(lazyLoadHandler, typeof this.props.debounce === 'number' ?\n                                                         this.props.debounce :\n                                                         300);\n        delayType = 'debounce';\n      } else if (this.props.throttle !== undefined) {\n        finalLazyLoadHandler = throttle(lazyLoadHandler, typeof this.props.throttle === 'number' ?\n                                                         this.props.throttle :\n                                                         300);\n        delayType = 'throttle';\n      } else {\n        finalLazyLoadHandler = lazyLoadHandler;\n      }\n    }\n\n    if (this.props.overflow) {\n      const parent = scrollParent(ReactDom.findDOMNode(this));\n      if (parent && typeof parent.getAttribute === 'function') {\n        const listenerCount = 1 + (+parent.getAttribute(LISTEN_FLAG));\n        if (listenerCount === 1) {\n          parent.addEventListener('scroll', finalLazyLoadHandler, passiveEvent);\n        }\n        parent.setAttribute(LISTEN_FLAG, listenerCount);\n      }\n    } else if (listeners.length === 0 || needResetFinalLazyLoadHandler) {\n      const { scroll, resize } = this.props;\n\n      if (scroll) {\n        on(window, 'scroll', finalLazyLoadHandler, passiveEvent);\n      }\n\n      if (resize) {\n        on(window, 'resize', finalLazyLoadHandler, passiveEvent);\n      }\n    }\n\n    listeners.push(this);\n    checkVisible(this);\n  }\n```\n\n`needResetFinalLazyLoadHandler` 先别关注，按他给注释说测试用。 `finalLazyLoadHandler` 依据外部 `debounce` 和 `throttle` 来选择是防抖还是节流还是都不用。根据外部传入的`overflow` 来确定是否是在某一个节点中 `overflow` 的下拉框的懒加载还是普通的整个 `window` 的懒加载。然后就是依据是 `scroll` 还是 `resize` 来给 `window` 增加监听事件 `finalLazyLoadHandler`。 最后就是把这个组件实例放到了 `listeners` 这个数组里，然后调用 `checkVisible` 检查是否可见。\n\n### react-lazy-load 之 checkVisible\n\n```js\n/**\n * Detect if element is visible in viewport, if so, set `visible` state to true.\n * If `once` prop is provided true, remove component as listener after checkVisible\n *\n * @param  {React} component   React component that respond to scroll and resize\n */\nconst checkVisible = function checkVisible(component) {\n  const node = ReactDom.findDOMNode(component);\n  if (!node) {\n    return;\n  }\n\n  const parent = scrollParent(node);\n  const isOverflow = component.props.overflow &&\n                     parent !== node.ownerDocument &&\n                     parent !== document &&\n                     parent !== document.documentElement;\n  const visible = isOverflow ?\n                  checkOverflowVisible(component, parent) :\n                  checkNormalVisible(component);\n  if (visible) {\n    // Avoid extra render if previously is visible\n    if (!component.visible) {\n      if (component.props.once) {\n        pending.push(component);\n      }\n\n      component.visible = true;\n      component.forceUpdate();\n    }\n  } else if (!(component.props.once && component.visible)) {\n    component.visible = false;\n    if (component.props.unmountIfInvisible) {\n      component.forceUpdate();\n    }\n  }\n};\n```\n\n`parent` 就是找到这个组件的上层组件的 `dom` 节点，通过 `checkOverflowVisible` 和 `checkNormalVisible`这两个函数拿到该节点是否在可视区域内得到 `visible`。然后依据 `visible`的值修改 `component` 的 `visible`的值，然后调用组件的 `forceUpdate` 方法，强制让组件重新渲染。主要到组件的 `visible` 并不是挂载到 `state` 上，所以这里不是用 `setState` 来重新渲染。\n\n### react-lazy-load 之 checkNormalVisible\n\n```js\n/**\n * Check if `component` is visible in document\n * @param  {node} component React component\n * @return {bool}\n */\nconst checkNormalVisible = function checkNormalVisible(component) {\n  const node = ReactDom.findDOMNode(component);\n\n  // If this element is hidden by css rules somehow, it's definitely invisible\n  if (!(node.offsetWidth || node.offsetHeight || node.getClientRects().length)) return false;\n\n  let top;\n  let elementHeight;\n\n  try {\n    ({ top, height: elementHeight } = node.getBoundingClientRect());\n  } catch (e) {\n    ({ top, height: elementHeight } = defaultBoundingClientRect);\n  }\n\n  const windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;\n\n  const offsets = Array.isArray(component.props.offset) ?\n                component.props.offset :\n                [component.props.offset, component.props.offset]; // Be compatible with previous API\n\n  return (top - offsets[0] <= windowInnerHeight) &&\n         (top + elementHeight + offsets[1] >= 0);\n};\n```\n\n主要逻辑就是拿到组件的 `dom` 节点的 `getBoundingClientRect` 返回值和 `window.innerHeight` 进行比较来判断是否是在可视范围内。这里在比较的时候还有个 `component.props.offset` 也参与了比较，说明设置了 `offset` 的时候，组件快要出现在可视范围的时候就会去重新渲染组件而不是出现在可视范围内才去重新渲染。\n\n### react-lazy-load 之 lazyLoadHandler\n\n`lazyLoadHandler` 是组件绑定事件时会触发的函数。\n\n```js\nconst lazyLoadHandler = () => {\n  for (let i = 0; i < listeners.length; ++i) {\n    const listener = listeners[i];\n    checkVisible(listener);\n  }\n  // Remove `once` component in listeners\n  purgePending();\n};\n```\n\n每次监听事件执行的时候，都去检查一下组件，如果满足条件就去强制渲染组件。\n\n### react-lazy-load 之 componentWillUnmount\n\n```js\n componentWillUnmount() {\n    if (this.props.overflow) {\n      const parent = scrollParent(ReactDom.findDOMNode(this));\n      if (parent && typeof parent.getAttribute === 'function') {\n        const listenerCount = (+parent.getAttribute(LISTEN_FLAG)) - 1;\n        if (listenerCount === 0) {\n          parent.removeEventListener('scroll', finalLazyLoadHandler, passiveEvent);\n          parent.removeAttribute(LISTEN_FLAG);\n        } else {\n          parent.setAttribute(LISTEN_FLAG, listenerCount);\n        }\n      }\n    }\n\n    const index = listeners.indexOf(this);\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n\n    if (listeners.length === 0) {\n      off(window, 'resize', finalLazyLoadHandler, passiveEvent);\n      off(window, 'scroll', finalLazyLoadHandler, passiveEvent);\n    }\n  }\n```\n\n组件卸载的时候，把一些绑定事件解绑一下，细节也不说了。\n\n## 总结\n\n抛开 `react-lazy-load` 一些实现细节，从总体把握整个懒加载的过程，其实懒加载的原理并不难。当时我也看了一下 `vue` 那边的 `vue-lazyLoad` 这个库想写一个对比的文章，我以为这个 `vue` 库的内容会写的和 `react-lazy-load` 差不多，结果发现 `vue-lazyLoad` 代码很长而且好像比较复杂，所以也就没看了。\n\n---\n\n![Vincent van Gogh – Blossoming Almond Branch in a Glass with a Book](懒加载/433381594.jpg)\n\n> Vincent van Gogh – Blossoming Almond Branch in a Glass with a Book 1888","source":"_posts/懒加载.md","raw":"---\ntitle: 懒加载\ndate: 2018-08-14 14:28:16\ntags:\n  - 懒加载\n  - react\n  - 源码\ncategories: 前端\n---\n\n# react-lazy-load粗读\n\n近来没什么特别要做的事，下班回来的空闲时间也比较多，所以抽空看看懒加载是怎么实现的，特别是看了下 `react-lazy-load` 的库的实现。\n\n## 懒加载\n\n这里懒加载场景不是路由分割打包那种，而是单个页面中有一个很长的列表，列表中的图片进行懒加载的效果。\n\n在 `jquery` 时代，这种列表图片懒加载效果就已经有了，那么我们想一想这种在滚动的时候才去加载图片等资源的方式该如何去实现呢？\n\n## 大致原理\n\n浏览器解析 `html` 的时候，在遇到 `img` 标签以及发现 `src` 属性的时候，浏览器就会去发请求拿图片去了。这里就是切入点，根据这种现象，做下面几件事：\n\n1. 把列表中所有的图片的 `img` 标签的 `src` 设为空\n2. 把真实的图片路径存成一个 `dom` 属性，打个比方: `<img data-src='/xxxxx.jpg' />`\n3. 写一个检测列表某一项是否是可见状态\n4. 全局滚动事件做一个监听，检测当前列表的项是否是可见的，如果可见则给 `img` 标签上存着真实图片路径赋值给 `src` 属性\n\n## react-lazy-load\n\n知道懒加载的大概原理，来看一下 `react-lazy-load` 是怎么做的。\n\n大体看了下 `react-lazy-load` 的实现的总体思路就更加简单了，本质上就是让需要懒加载的组件包含在这个包提供的 `LazyLoad` 组件中，不渲染这个组件，然后去监听这个 `LazyLoad` 组件是否已经是可见了，如果是可见了那么就去强制渲染包含在 `LazyLoad` 组件内部需要懒加载的组件了。\n\n这种方式相较于手动去控制 `img` 标签来的实在是太方便了，完全以组件为单位，对组件进行懒加载。这样的话，完全就不需要感知组件内部的逻辑和渲染逻辑，无论这个需要懒加载的组件内部是有几个 `img` 标签，也完全不用去手动操控 `src` 属性的赋值。\n\n### react-lazy-load 之 render\n\n```js\nclass LazyLoad extends React.Component{\n    constructor(props) {\n        super(props)\n        this.visible = false\n    }\n    componentDidMount() {\n        // 主要是监听事件\n        // 省略此处代码\n    }\n    shouldComponentUpdate() {\n        return this.visible\n    }\n    componentWillUnmount() {\n        // 主要是移除监听事件\n        // 省略\n    }\n    render () {\n        return this.visible\n                ? this.props.children\n                : this.props.placeholder\n                    ? this.props.placeholder\n                    : <div style={{ height: this.props.height }} className=\"lazyload-placeholder\" />\n    }\n}\n```\n\n从 `render` 函数能够看出来，依据当前 `visible` 的值来确定是否渲染 `this.props.children`，如果为 `false` 则去渲染节点的占位符。如果外部传入一个占位节点，就用这个传入的占位节点，否则就用默认的占位符去占位。注意到：`shouldComponentUpdate` 依据 `this.visible` 的值去判断是否更新组件。剩下的，该去看看如何监听事件以及修改 `this.visible`、强制重新渲染组件的。\n\n### react-lazy-load 之 componentDidMount\n\n```js\n  componentDidMount() {\n    // It's unlikely to change delay type on the fly, this is mainly\n    // designed for tests\n    const needResetFinalLazyLoadHandler = (this.props.debounce !== undefined && delayType === 'throttle')\n      || (delayType === 'debounce' && this.props.debounce === undefined);\n\n    if (needResetFinalLazyLoadHandler) {\n      off(window, 'scroll', finalLazyLoadHandler, passiveEvent);\n      off(window, 'resize', finalLazyLoadHandler, passiveEvent);\n      finalLazyLoadHandler = null;\n    }\n\n    if (!finalLazyLoadHandler) {\n      if (this.props.debounce !== undefined) {\n        finalLazyLoadHandler = debounce(lazyLoadHandler, typeof this.props.debounce === 'number' ?\n                                                         this.props.debounce :\n                                                         300);\n        delayType = 'debounce';\n      } else if (this.props.throttle !== undefined) {\n        finalLazyLoadHandler = throttle(lazyLoadHandler, typeof this.props.throttle === 'number' ?\n                                                         this.props.throttle :\n                                                         300);\n        delayType = 'throttle';\n      } else {\n        finalLazyLoadHandler = lazyLoadHandler;\n      }\n    }\n\n    if (this.props.overflow) {\n      const parent = scrollParent(ReactDom.findDOMNode(this));\n      if (parent && typeof parent.getAttribute === 'function') {\n        const listenerCount = 1 + (+parent.getAttribute(LISTEN_FLAG));\n        if (listenerCount === 1) {\n          parent.addEventListener('scroll', finalLazyLoadHandler, passiveEvent);\n        }\n        parent.setAttribute(LISTEN_FLAG, listenerCount);\n      }\n    } else if (listeners.length === 0 || needResetFinalLazyLoadHandler) {\n      const { scroll, resize } = this.props;\n\n      if (scroll) {\n        on(window, 'scroll', finalLazyLoadHandler, passiveEvent);\n      }\n\n      if (resize) {\n        on(window, 'resize', finalLazyLoadHandler, passiveEvent);\n      }\n    }\n\n    listeners.push(this);\n    checkVisible(this);\n  }\n```\n\n`needResetFinalLazyLoadHandler` 先别关注，按他给注释说测试用。 `finalLazyLoadHandler` 依据外部 `debounce` 和 `throttle` 来选择是防抖还是节流还是都不用。根据外部传入的`overflow` 来确定是否是在某一个节点中 `overflow` 的下拉框的懒加载还是普通的整个 `window` 的懒加载。然后就是依据是 `scroll` 还是 `resize` 来给 `window` 增加监听事件 `finalLazyLoadHandler`。 最后就是把这个组件实例放到了 `listeners` 这个数组里，然后调用 `checkVisible` 检查是否可见。\n\n### react-lazy-load 之 checkVisible\n\n```js\n/**\n * Detect if element is visible in viewport, if so, set `visible` state to true.\n * If `once` prop is provided true, remove component as listener after checkVisible\n *\n * @param  {React} component   React component that respond to scroll and resize\n */\nconst checkVisible = function checkVisible(component) {\n  const node = ReactDom.findDOMNode(component);\n  if (!node) {\n    return;\n  }\n\n  const parent = scrollParent(node);\n  const isOverflow = component.props.overflow &&\n                     parent !== node.ownerDocument &&\n                     parent !== document &&\n                     parent !== document.documentElement;\n  const visible = isOverflow ?\n                  checkOverflowVisible(component, parent) :\n                  checkNormalVisible(component);\n  if (visible) {\n    // Avoid extra render if previously is visible\n    if (!component.visible) {\n      if (component.props.once) {\n        pending.push(component);\n      }\n\n      component.visible = true;\n      component.forceUpdate();\n    }\n  } else if (!(component.props.once && component.visible)) {\n    component.visible = false;\n    if (component.props.unmountIfInvisible) {\n      component.forceUpdate();\n    }\n  }\n};\n```\n\n`parent` 就是找到这个组件的上层组件的 `dom` 节点，通过 `checkOverflowVisible` 和 `checkNormalVisible`这两个函数拿到该节点是否在可视区域内得到 `visible`。然后依据 `visible`的值修改 `component` 的 `visible`的值，然后调用组件的 `forceUpdate` 方法，强制让组件重新渲染。主要到组件的 `visible` 并不是挂载到 `state` 上，所以这里不是用 `setState` 来重新渲染。\n\n### react-lazy-load 之 checkNormalVisible\n\n```js\n/**\n * Check if `component` is visible in document\n * @param  {node} component React component\n * @return {bool}\n */\nconst checkNormalVisible = function checkNormalVisible(component) {\n  const node = ReactDom.findDOMNode(component);\n\n  // If this element is hidden by css rules somehow, it's definitely invisible\n  if (!(node.offsetWidth || node.offsetHeight || node.getClientRects().length)) return false;\n\n  let top;\n  let elementHeight;\n\n  try {\n    ({ top, height: elementHeight } = node.getBoundingClientRect());\n  } catch (e) {\n    ({ top, height: elementHeight } = defaultBoundingClientRect);\n  }\n\n  const windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;\n\n  const offsets = Array.isArray(component.props.offset) ?\n                component.props.offset :\n                [component.props.offset, component.props.offset]; // Be compatible with previous API\n\n  return (top - offsets[0] <= windowInnerHeight) &&\n         (top + elementHeight + offsets[1] >= 0);\n};\n```\n\n主要逻辑就是拿到组件的 `dom` 节点的 `getBoundingClientRect` 返回值和 `window.innerHeight` 进行比较来判断是否是在可视范围内。这里在比较的时候还有个 `component.props.offset` 也参与了比较，说明设置了 `offset` 的时候，组件快要出现在可视范围的时候就会去重新渲染组件而不是出现在可视范围内才去重新渲染。\n\n### react-lazy-load 之 lazyLoadHandler\n\n`lazyLoadHandler` 是组件绑定事件时会触发的函数。\n\n```js\nconst lazyLoadHandler = () => {\n  for (let i = 0; i < listeners.length; ++i) {\n    const listener = listeners[i];\n    checkVisible(listener);\n  }\n  // Remove `once` component in listeners\n  purgePending();\n};\n```\n\n每次监听事件执行的时候，都去检查一下组件，如果满足条件就去强制渲染组件。\n\n### react-lazy-load 之 componentWillUnmount\n\n```js\n componentWillUnmount() {\n    if (this.props.overflow) {\n      const parent = scrollParent(ReactDom.findDOMNode(this));\n      if (parent && typeof parent.getAttribute === 'function') {\n        const listenerCount = (+parent.getAttribute(LISTEN_FLAG)) - 1;\n        if (listenerCount === 0) {\n          parent.removeEventListener('scroll', finalLazyLoadHandler, passiveEvent);\n          parent.removeAttribute(LISTEN_FLAG);\n        } else {\n          parent.setAttribute(LISTEN_FLAG, listenerCount);\n        }\n      }\n    }\n\n    const index = listeners.indexOf(this);\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n\n    if (listeners.length === 0) {\n      off(window, 'resize', finalLazyLoadHandler, passiveEvent);\n      off(window, 'scroll', finalLazyLoadHandler, passiveEvent);\n    }\n  }\n```\n\n组件卸载的时候，把一些绑定事件解绑一下，细节也不说了。\n\n## 总结\n\n抛开 `react-lazy-load` 一些实现细节，从总体把握整个懒加载的过程，其实懒加载的原理并不难。当时我也看了一下 `vue` 那边的 `vue-lazyLoad` 这个库想写一个对比的文章，我以为这个 `vue` 库的内容会写的和 `react-lazy-load` 差不多，结果发现 `vue-lazyLoad` 代码很长而且好像比较复杂，所以也就没看了。\n\n---\n\n![Vincent van Gogh – Blossoming Almond Branch in a Glass with a Book](懒加载/433381594.jpg)\n\n> Vincent van Gogh – Blossoming Almond Branch in a Glass with a Book 1888","slug":"懒加载","published":1,"updated":"2018-08-26T03:52:41.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmfcbjt0022ssv6oqete25b","content":"<h1 id=\"react-lazy-load粗读\"><a href=\"#react-lazy-load粗读\" class=\"headerlink\" title=\"react-lazy-load粗读\"></a>react-lazy-load粗读</h1><p>近来没什么特别要做的事，下班回来的空闲时间也比较多，所以抽空看看懒加载是怎么实现的，特别是看了下 <code>react-lazy-load</code> 的库的实现。</p>\n<h2 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h2><p>这里懒加载场景不是路由分割打包那种，而是单个页面中有一个很长的列表，列表中的图片进行懒加载的效果。</p>\n<p>在 <code>jquery</code> 时代，这种列表图片懒加载效果就已经有了，那么我们想一想这种在滚动的时候才去加载图片等资源的方式该如何去实现呢？</p>\n<h2 id=\"大致原理\"><a href=\"#大致原理\" class=\"headerlink\" title=\"大致原理\"></a>大致原理</h2><p>浏览器解析 <code>html</code> 的时候，在遇到 <code>img</code> 标签以及发现 <code>src</code> 属性的时候，浏览器就会去发请求拿图片去了。这里就是切入点，根据这种现象，做下面几件事：</p>\n<ol>\n<li>把列表中所有的图片的 <code>img</code> 标签的 <code>src</code> 设为空</li>\n<li>把真实的图片路径存成一个 <code>dom</code> 属性，打个比方: <code>&lt;img data-src=&#39;/xxxxx.jpg&#39; /&gt;</code></li>\n<li>写一个检测列表某一项是否是可见状态</li>\n<li>全局滚动事件做一个监听，检测当前列表的项是否是可见的，如果可见则给 <code>img</code> 标签上存着真实图片路径赋值给 <code>src</code> 属性</li>\n</ol>\n<h2 id=\"react-lazy-load\"><a href=\"#react-lazy-load\" class=\"headerlink\" title=\"react-lazy-load\"></a>react-lazy-load</h2><p>知道懒加载的大概原理，来看一下 <code>react-lazy-load</code> 是怎么做的。</p>\n<p>大体看了下 <code>react-lazy-load</code> 的实现的总体思路就更加简单了，本质上就是让需要懒加载的组件包含在这个包提供的 <code>LazyLoad</code> 组件中，不渲染这个组件，然后去监听这个 <code>LazyLoad</code> 组件是否已经是可见了，如果是可见了那么就去强制渲染包含在 <code>LazyLoad</code> 组件内部需要懒加载的组件了。</p>\n<p>这种方式相较于手动去控制 <code>img</code> 标签来的实在是太方便了，完全以组件为单位，对组件进行懒加载。这样的话，完全就不需要感知组件内部的逻辑和渲染逻辑，无论这个需要懒加载的组件内部是有几个 <code>img</code> 标签，也完全不用去手动操控 <code>src</code> 属性的赋值。</p>\n<h3 id=\"react-lazy-load-之-render\"><a href=\"#react-lazy-load-之-render\" class=\"headerlink\" title=\"react-lazy-load 之 render\"></a>react-lazy-load 之 render</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyLoad</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.visible = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 主要是监听事件</span></span><br><span class=\"line\">        <span class=\"comment\">// 省略此处代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    shouldComponentUpdate() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.visible</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentWillUnmount() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 主要是移除监听事件</span></span><br><span class=\"line\">        <span class=\"comment\">// 省略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.visible</span><br><span class=\"line\">                ? <span class=\"keyword\">this</span>.props.children</span><br><span class=\"line\">                : <span class=\"keyword\">this</span>.props.placeholder</span><br><span class=\"line\">                    ? <span class=\"keyword\">this</span>.props.placeholder</span><br><span class=\"line\">                    : <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">height:</span> <span class=\"attr\">this.props.height</span> &#125;&#125; <span class=\"attr\">className</span>=<span class=\"string\">\"lazyload-placeholder\"</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>从 <code>render</code> 函数能够看出来，依据当前 <code>visible</code> 的值来确定是否渲染 <code>this.props.children</code>，如果为 <code>false</code> 则去渲染节点的占位符。如果外部传入一个占位节点，就用这个传入的占位节点，否则就用默认的占位符去占位。注意到：<code>shouldComponentUpdate</code> 依据 <code>this.visible</code> 的值去判断是否更新组件。剩下的，该去看看如何监听事件以及修改 <code>this.visible</code>、强制重新渲染组件的。</p>\n<h3 id=\"react-lazy-load-之-componentDidMount\"><a href=\"#react-lazy-load-之-componentDidMount\" class=\"headerlink\" title=\"react-lazy-load 之 componentDidMount\"></a>react-lazy-load 之 componentDidMount</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// It's unlikely to change delay type on the fly, this is mainly</span></span><br><span class=\"line\">  <span class=\"comment\">// designed for tests</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> needResetFinalLazyLoadHandler = (<span class=\"keyword\">this</span>.props.debounce !== <span class=\"literal\">undefined</span> &amp;&amp; delayType === <span class=\"string\">'throttle'</span>)</span><br><span class=\"line\">    || (delayType === <span class=\"string\">'debounce'</span> &amp;&amp; <span class=\"keyword\">this</span>.props.debounce === <span class=\"literal\">undefined</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (needResetFinalLazyLoadHandler) &#123;</span><br><span class=\"line\">    off(<span class=\"built_in\">window</span>, <span class=\"string\">'scroll'</span>, finalLazyLoadHandler, passiveEvent);</span><br><span class=\"line\">    off(<span class=\"built_in\">window</span>, <span class=\"string\">'resize'</span>, finalLazyLoadHandler, passiveEvent);</span><br><span class=\"line\">    finalLazyLoadHandler = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!finalLazyLoadHandler) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.props.debounce !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      finalLazyLoadHandler = debounce(lazyLoadHandler, <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.props.debounce === <span class=\"string\">'number'</span> ?</span><br><span class=\"line\">                                                       <span class=\"keyword\">this</span>.props.debounce :</span><br><span class=\"line\">                                                       <span class=\"number\">300</span>);</span><br><span class=\"line\">      delayType = <span class=\"string\">'debounce'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.props.throttle !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      finalLazyLoadHandler = throttle(lazyLoadHandler, <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.props.throttle === <span class=\"string\">'number'</span> ?</span><br><span class=\"line\">                                                       <span class=\"keyword\">this</span>.props.throttle :</span><br><span class=\"line\">                                                       <span class=\"number\">300</span>);</span><br><span class=\"line\">      delayType = <span class=\"string\">'throttle'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      finalLazyLoadHandler = lazyLoadHandler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.props.overflow) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parent = scrollParent(ReactDom.findDOMNode(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent &amp;&amp; <span class=\"keyword\">typeof</span> parent.getAttribute === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> listenerCount = <span class=\"number\">1</span> + (+parent.getAttribute(LISTEN_FLAG));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (listenerCount === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        parent.addEventListener(<span class=\"string\">'scroll'</span>, finalLazyLoadHandler, passiveEvent);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      parent.setAttribute(LISTEN_FLAG, listenerCount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (listeners.length === <span class=\"number\">0</span> || needResetFinalLazyLoadHandler) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; scroll, resize &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (scroll) &#123;</span><br><span class=\"line\">      on(<span class=\"built_in\">window</span>, <span class=\"string\">'scroll'</span>, finalLazyLoadHandler, passiveEvent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resize) &#123;</span><br><span class=\"line\">      on(<span class=\"built_in\">window</span>, <span class=\"string\">'resize'</span>, finalLazyLoadHandler, passiveEvent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  listeners.push(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  checkVisible(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>needResetFinalLazyLoadHandler</code> 先别关注，按他给注释说测试用。 <code>finalLazyLoadHandler</code> 依据外部 <code>debounce</code> 和 <code>throttle</code> 来选择是防抖还是节流还是都不用。根据外部传入的<code>overflow</code> 来确定是否是在某一个节点中 <code>overflow</code> 的下拉框的懒加载还是普通的整个 <code>window</code> 的懒加载。然后就是依据是 <code>scroll</code> 还是 <code>resize</code> 来给 <code>window</code> 增加监听事件 <code>finalLazyLoadHandler</code>。 最后就是把这个组件实例放到了 <code>listeners</code> 这个数组里，然后调用 <code>checkVisible</code> 检查是否可见。</p>\n<h3 id=\"react-lazy-load-之-checkVisible\"><a href=\"#react-lazy-load-之-checkVisible\" class=\"headerlink\" title=\"react-lazy-load 之 checkVisible\"></a>react-lazy-load 之 checkVisible</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Detect if element is visible in viewport, if so, set `visible` state to true.</span></span><br><span class=\"line\"><span class=\"comment\"> * If `once` prop is provided true, remove component as listener after checkVisible</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;React&#125; component   React component that respond to scroll and resize</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkVisible = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkVisible</span>(<span class=\"params\">component</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = ReactDom.findDOMNode(component);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> parent = scrollParent(node);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isOverflow = component.props.overflow &amp;&amp;</span><br><span class=\"line\">                     parent !== node.ownerDocument &amp;&amp;</span><br><span class=\"line\">                     parent !== <span class=\"built_in\">document</span> &amp;&amp;</span><br><span class=\"line\">                     parent !== <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> visible = isOverflow ?</span><br><span class=\"line\">                  checkOverflowVisible(component, parent) :</span><br><span class=\"line\">                  checkNormalVisible(component);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (visible) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Avoid extra render if previously is visible</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!component.visible) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (component.props.once) &#123;</span><br><span class=\"line\">        pending.push(component);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      component.visible = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      component.forceUpdate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!(component.props.once &amp;&amp; component.visible)) &#123;</span><br><span class=\"line\">    component.visible = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (component.props.unmountIfInvisible) &#123;</span><br><span class=\"line\">      component.forceUpdate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>parent</code> 就是找到这个组件的上层组件的 <code>dom</code> 节点，通过 <code>checkOverflowVisible</code> 和 <code>checkNormalVisible</code>这两个函数拿到该节点是否在可视区域内得到 <code>visible</code>。然后依据 <code>visible</code>的值修改 <code>component</code> 的 <code>visible</code>的值，然后调用组件的 <code>forceUpdate</code> 方法，强制让组件重新渲染。主要到组件的 <code>visible</code> 并不是挂载到 <code>state</code> 上，所以这里不是用 <code>setState</code> 来重新渲染。</p>\n<h3 id=\"react-lazy-load-之-checkNormalVisible\"><a href=\"#react-lazy-load-之-checkNormalVisible\" class=\"headerlink\" title=\"react-lazy-load 之 checkNormalVisible\"></a>react-lazy-load 之 checkNormalVisible</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Check if `component` is visible in document</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;node&#125; component React component</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;bool&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNormalVisible = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkNormalVisible</span>(<span class=\"params\">component</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = ReactDom.findDOMNode(component);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// If this element is hidden by css rules somehow, it's definitely invisible</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(node.offsetWidth || node.offsetHeight || node.getClientRects().length)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> top;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> elementHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    (&#123; top, <span class=\"attr\">height</span>: elementHeight &#125; = node.getBoundingClientRect());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    (&#123; top, <span class=\"attr\">height</span>: elementHeight &#125; = defaultBoundingClientRect);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> windowInnerHeight = <span class=\"built_in\">window</span>.innerHeight || <span class=\"built_in\">document</span>.documentElement.clientHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> offsets = <span class=\"built_in\">Array</span>.isArray(component.props.offset) ?</span><br><span class=\"line\">                component.props.offset :</span><br><span class=\"line\">                [component.props.offset, component.props.offset]; <span class=\"comment\">// Be compatible with previous API</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (top - offsets[<span class=\"number\">0</span>] &lt;= windowInnerHeight) &amp;&amp;</span><br><span class=\"line\">         (top + elementHeight + offsets[<span class=\"number\">1</span>] &gt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>主要逻辑就是拿到组件的 <code>dom</code> 节点的 <code>getBoundingClientRect</code> 返回值和 <code>window.innerHeight</code> 进行比较来判断是否是在可视范围内。这里在比较的时候还有个 <code>component.props.offset</code> 也参与了比较，说明设置了 <code>offset</code> 的时候，组件快要出现在可视范围的时候就会去重新渲染组件而不是出现在可视范围内才去重新渲染。</p>\n<h3 id=\"react-lazy-load-之-lazyLoadHandler\"><a href=\"#react-lazy-load-之-lazyLoadHandler\" class=\"headerlink\" title=\"react-lazy-load 之 lazyLoadHandler\"></a>react-lazy-load 之 lazyLoadHandler</h3><p><code>lazyLoadHandler</code> 是组件绑定事件时会触发的函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> lazyLoadHandler = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; listeners.length; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> listener = listeners[i];</span><br><span class=\"line\">    checkVisible(listener);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Remove `once` component in listeners</span></span><br><span class=\"line\">  purgePending();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>每次监听事件执行的时候，都去检查一下组件，如果满足条件就去强制渲染组件。</p>\n<h3 id=\"react-lazy-load-之-componentWillUnmount\"><a href=\"#react-lazy-load-之-componentWillUnmount\" class=\"headerlink\" title=\"react-lazy-load 之 componentWillUnmount\"></a>react-lazy-load 之 componentWillUnmount</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillUnmount() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.props.overflow) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> parent = scrollParent(ReactDom.findDOMNode(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (parent &amp;&amp; <span class=\"keyword\">typeof</span> parent.getAttribute === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> listenerCount = (+parent.getAttribute(LISTEN_FLAG)) - <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (listenerCount === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         parent.removeEventListener(<span class=\"string\">'scroll'</span>, finalLazyLoadHandler, passiveEvent);</span><br><span class=\"line\">         parent.removeAttribute(LISTEN_FLAG);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         parent.setAttribute(LISTEN_FLAG, listenerCount);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">const</span> index = listeners.indexOf(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (index !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">     listeners.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (listeners.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     off(<span class=\"built_in\">window</span>, <span class=\"string\">'resize'</span>, finalLazyLoadHandler, passiveEvent);</span><br><span class=\"line\">     off(<span class=\"built_in\">window</span>, <span class=\"string\">'scroll'</span>, finalLazyLoadHandler, passiveEvent);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>组件卸载的时候，把一些绑定事件解绑一下，细节也不说了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>抛开 <code>react-lazy-load</code> 一些实现细节，从总体把握整个懒加载的过程，其实懒加载的原理并不难。当时我也看了一下 <code>vue</code> 那边的 <code>vue-lazyLoad</code> 这个库想写一个对比的文章，我以为这个 <code>vue</code> 库的内容会写的和 <code>react-lazy-load</code> 差不多，结果发现 <code>vue-lazyLoad</code> 代码很长而且好像比较复杂，所以也就没看了。</p>\n<hr>\n<p><img src=\"/2018/08/14/懒加载/433381594.jpg\" alt=\"Vincent van Gogh – Blossoming Almond Branch in a Glass with a Book\"></p>\n<blockquote>\n<p>Vincent van Gogh – Blossoming Almond Branch in a Glass with a Book 1888</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"react-lazy-load粗读\"><a href=\"#react-lazy-load粗读\" class=\"headerlink\" title=\"react-lazy-load粗读\"></a>react-lazy-load粗读</h1><p>近来没什么特别要做的事，下班回来的空闲时间也比较多，所以抽空看看懒加载是怎么实现的，特别是看了下 <code>react-lazy-load</code> 的库的实现。</p>\n<h2 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h2><p>这里懒加载场景不是路由分割打包那种，而是单个页面中有一个很长的列表，列表中的图片进行懒加载的效果。</p>\n<p>在 <code>jquery</code> 时代，这种列表图片懒加载效果就已经有了，那么我们想一想这种在滚动的时候才去加载图片等资源的方式该如何去实现呢？</p>\n<h2 id=\"大致原理\"><a href=\"#大致原理\" class=\"headerlink\" title=\"大致原理\"></a>大致原理</h2><p>浏览器解析 <code>html</code> 的时候，在遇到 <code>img</code> 标签以及发现 <code>src</code> 属性的时候，浏览器就会去发请求拿图片去了。这里就是切入点，根据这种现象，做下面几件事：</p>\n<ol>\n<li>把列表中所有的图片的 <code>img</code> 标签的 <code>src</code> 设为空</li>\n<li>把真实的图片路径存成一个 <code>dom</code> 属性，打个比方: <code>&lt;img data-src=&#39;/xxxxx.jpg&#39; /&gt;</code></li>\n<li>写一个检测列表某一项是否是可见状态</li>\n<li>全局滚动事件做一个监听，检测当前列表的项是否是可见的，如果可见则给 <code>img</code> 标签上存着真实图片路径赋值给 <code>src</code> 属性</li>\n</ol>\n<h2 id=\"react-lazy-load\"><a href=\"#react-lazy-load\" class=\"headerlink\" title=\"react-lazy-load\"></a>react-lazy-load</h2><p>知道懒加载的大概原理，来看一下 <code>react-lazy-load</code> 是怎么做的。</p>\n<p>大体看了下 <code>react-lazy-load</code> 的实现的总体思路就更加简单了，本质上就是让需要懒加载的组件包含在这个包提供的 <code>LazyLoad</code> 组件中，不渲染这个组件，然后去监听这个 <code>LazyLoad</code> 组件是否已经是可见了，如果是可见了那么就去强制渲染包含在 <code>LazyLoad</code> 组件内部需要懒加载的组件了。</p>\n<p>这种方式相较于手动去控制 <code>img</code> 标签来的实在是太方便了，完全以组件为单位，对组件进行懒加载。这样的话，完全就不需要感知组件内部的逻辑和渲染逻辑，无论这个需要懒加载的组件内部是有几个 <code>img</code> 标签，也完全不用去手动操控 <code>src</code> 属性的赋值。</p>\n<h3 id=\"react-lazy-load-之-render\"><a href=\"#react-lazy-load-之-render\" class=\"headerlink\" title=\"react-lazy-load 之 render\"></a>react-lazy-load 之 render</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyLoad</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.visible = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 主要是监听事件</span></span><br><span class=\"line\">        <span class=\"comment\">// 省略此处代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    shouldComponentUpdate() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.visible</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentWillUnmount() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 主要是移除监听事件</span></span><br><span class=\"line\">        <span class=\"comment\">// 省略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.visible</span><br><span class=\"line\">                ? <span class=\"keyword\">this</span>.props.children</span><br><span class=\"line\">                : <span class=\"keyword\">this</span>.props.placeholder</span><br><span class=\"line\">                    ? <span class=\"keyword\">this</span>.props.placeholder</span><br><span class=\"line\">                    : <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">height:</span> <span class=\"attr\">this.props.height</span> &#125;&#125; <span class=\"attr\">className</span>=<span class=\"string\">\"lazyload-placeholder\"</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>从 <code>render</code> 函数能够看出来，依据当前 <code>visible</code> 的值来确定是否渲染 <code>this.props.children</code>，如果为 <code>false</code> 则去渲染节点的占位符。如果外部传入一个占位节点，就用这个传入的占位节点，否则就用默认的占位符去占位。注意到：<code>shouldComponentUpdate</code> 依据 <code>this.visible</code> 的值去判断是否更新组件。剩下的，该去看看如何监听事件以及修改 <code>this.visible</code>、强制重新渲染组件的。</p>\n<h3 id=\"react-lazy-load-之-componentDidMount\"><a href=\"#react-lazy-load-之-componentDidMount\" class=\"headerlink\" title=\"react-lazy-load 之 componentDidMount\"></a>react-lazy-load 之 componentDidMount</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// It's unlikely to change delay type on the fly, this is mainly</span></span><br><span class=\"line\">  <span class=\"comment\">// designed for tests</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> needResetFinalLazyLoadHandler = (<span class=\"keyword\">this</span>.props.debounce !== <span class=\"literal\">undefined</span> &amp;&amp; delayType === <span class=\"string\">'throttle'</span>)</span><br><span class=\"line\">    || (delayType === <span class=\"string\">'debounce'</span> &amp;&amp; <span class=\"keyword\">this</span>.props.debounce === <span class=\"literal\">undefined</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (needResetFinalLazyLoadHandler) &#123;</span><br><span class=\"line\">    off(<span class=\"built_in\">window</span>, <span class=\"string\">'scroll'</span>, finalLazyLoadHandler, passiveEvent);</span><br><span class=\"line\">    off(<span class=\"built_in\">window</span>, <span class=\"string\">'resize'</span>, finalLazyLoadHandler, passiveEvent);</span><br><span class=\"line\">    finalLazyLoadHandler = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!finalLazyLoadHandler) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.props.debounce !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      finalLazyLoadHandler = debounce(lazyLoadHandler, <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.props.debounce === <span class=\"string\">'number'</span> ?</span><br><span class=\"line\">                                                       <span class=\"keyword\">this</span>.props.debounce :</span><br><span class=\"line\">                                                       <span class=\"number\">300</span>);</span><br><span class=\"line\">      delayType = <span class=\"string\">'debounce'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.props.throttle !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      finalLazyLoadHandler = throttle(lazyLoadHandler, <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.props.throttle === <span class=\"string\">'number'</span> ?</span><br><span class=\"line\">                                                       <span class=\"keyword\">this</span>.props.throttle :</span><br><span class=\"line\">                                                       <span class=\"number\">300</span>);</span><br><span class=\"line\">      delayType = <span class=\"string\">'throttle'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      finalLazyLoadHandler = lazyLoadHandler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.props.overflow) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parent = scrollParent(ReactDom.findDOMNode(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent &amp;&amp; <span class=\"keyword\">typeof</span> parent.getAttribute === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> listenerCount = <span class=\"number\">1</span> + (+parent.getAttribute(LISTEN_FLAG));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (listenerCount === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        parent.addEventListener(<span class=\"string\">'scroll'</span>, finalLazyLoadHandler, passiveEvent);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      parent.setAttribute(LISTEN_FLAG, listenerCount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (listeners.length === <span class=\"number\">0</span> || needResetFinalLazyLoadHandler) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; scroll, resize &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (scroll) &#123;</span><br><span class=\"line\">      on(<span class=\"built_in\">window</span>, <span class=\"string\">'scroll'</span>, finalLazyLoadHandler, passiveEvent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resize) &#123;</span><br><span class=\"line\">      on(<span class=\"built_in\">window</span>, <span class=\"string\">'resize'</span>, finalLazyLoadHandler, passiveEvent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  listeners.push(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  checkVisible(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>needResetFinalLazyLoadHandler</code> 先别关注，按他给注释说测试用。 <code>finalLazyLoadHandler</code> 依据外部 <code>debounce</code> 和 <code>throttle</code> 来选择是防抖还是节流还是都不用。根据外部传入的<code>overflow</code> 来确定是否是在某一个节点中 <code>overflow</code> 的下拉框的懒加载还是普通的整个 <code>window</code> 的懒加载。然后就是依据是 <code>scroll</code> 还是 <code>resize</code> 来给 <code>window</code> 增加监听事件 <code>finalLazyLoadHandler</code>。 最后就是把这个组件实例放到了 <code>listeners</code> 这个数组里，然后调用 <code>checkVisible</code> 检查是否可见。</p>\n<h3 id=\"react-lazy-load-之-checkVisible\"><a href=\"#react-lazy-load-之-checkVisible\" class=\"headerlink\" title=\"react-lazy-load 之 checkVisible\"></a>react-lazy-load 之 checkVisible</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Detect if element is visible in viewport, if so, set `visible` state to true.</span></span><br><span class=\"line\"><span class=\"comment\"> * If `once` prop is provided true, remove component as listener after checkVisible</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;React&#125; component   React component that respond to scroll and resize</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkVisible = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkVisible</span>(<span class=\"params\">component</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = ReactDom.findDOMNode(component);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> parent = scrollParent(node);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isOverflow = component.props.overflow &amp;&amp;</span><br><span class=\"line\">                     parent !== node.ownerDocument &amp;&amp;</span><br><span class=\"line\">                     parent !== <span class=\"built_in\">document</span> &amp;&amp;</span><br><span class=\"line\">                     parent !== <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> visible = isOverflow ?</span><br><span class=\"line\">                  checkOverflowVisible(component, parent) :</span><br><span class=\"line\">                  checkNormalVisible(component);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (visible) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Avoid extra render if previously is visible</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!component.visible) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (component.props.once) &#123;</span><br><span class=\"line\">        pending.push(component);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      component.visible = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      component.forceUpdate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!(component.props.once &amp;&amp; component.visible)) &#123;</span><br><span class=\"line\">    component.visible = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (component.props.unmountIfInvisible) &#123;</span><br><span class=\"line\">      component.forceUpdate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>parent</code> 就是找到这个组件的上层组件的 <code>dom</code> 节点，通过 <code>checkOverflowVisible</code> 和 <code>checkNormalVisible</code>这两个函数拿到该节点是否在可视区域内得到 <code>visible</code>。然后依据 <code>visible</code>的值修改 <code>component</code> 的 <code>visible</code>的值，然后调用组件的 <code>forceUpdate</code> 方法，强制让组件重新渲染。主要到组件的 <code>visible</code> 并不是挂载到 <code>state</code> 上，所以这里不是用 <code>setState</code> 来重新渲染。</p>\n<h3 id=\"react-lazy-load-之-checkNormalVisible\"><a href=\"#react-lazy-load-之-checkNormalVisible\" class=\"headerlink\" title=\"react-lazy-load 之 checkNormalVisible\"></a>react-lazy-load 之 checkNormalVisible</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Check if `component` is visible in document</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;node&#125; component React component</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;bool&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkNormalVisible = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkNormalVisible</span>(<span class=\"params\">component</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = ReactDom.findDOMNode(component);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// If this element is hidden by css rules somehow, it's definitely invisible</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(node.offsetWidth || node.offsetHeight || node.getClientRects().length)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> top;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> elementHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    (&#123; top, <span class=\"attr\">height</span>: elementHeight &#125; = node.getBoundingClientRect());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    (&#123; top, <span class=\"attr\">height</span>: elementHeight &#125; = defaultBoundingClientRect);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> windowInnerHeight = <span class=\"built_in\">window</span>.innerHeight || <span class=\"built_in\">document</span>.documentElement.clientHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> offsets = <span class=\"built_in\">Array</span>.isArray(component.props.offset) ?</span><br><span class=\"line\">                component.props.offset :</span><br><span class=\"line\">                [component.props.offset, component.props.offset]; <span class=\"comment\">// Be compatible with previous API</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (top - offsets[<span class=\"number\">0</span>] &lt;= windowInnerHeight) &amp;&amp;</span><br><span class=\"line\">         (top + elementHeight + offsets[<span class=\"number\">1</span>] &gt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>主要逻辑就是拿到组件的 <code>dom</code> 节点的 <code>getBoundingClientRect</code> 返回值和 <code>window.innerHeight</code> 进行比较来判断是否是在可视范围内。这里在比较的时候还有个 <code>component.props.offset</code> 也参与了比较，说明设置了 <code>offset</code> 的时候，组件快要出现在可视范围的时候就会去重新渲染组件而不是出现在可视范围内才去重新渲染。</p>\n<h3 id=\"react-lazy-load-之-lazyLoadHandler\"><a href=\"#react-lazy-load-之-lazyLoadHandler\" class=\"headerlink\" title=\"react-lazy-load 之 lazyLoadHandler\"></a>react-lazy-load 之 lazyLoadHandler</h3><p><code>lazyLoadHandler</code> 是组件绑定事件时会触发的函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> lazyLoadHandler = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; listeners.length; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> listener = listeners[i];</span><br><span class=\"line\">    checkVisible(listener);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Remove `once` component in listeners</span></span><br><span class=\"line\">  purgePending();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>每次监听事件执行的时候，都去检查一下组件，如果满足条件就去强制渲染组件。</p>\n<h3 id=\"react-lazy-load-之-componentWillUnmount\"><a href=\"#react-lazy-load-之-componentWillUnmount\" class=\"headerlink\" title=\"react-lazy-load 之 componentWillUnmount\"></a>react-lazy-load 之 componentWillUnmount</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillUnmount() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.props.overflow) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> parent = scrollParent(ReactDom.findDOMNode(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (parent &amp;&amp; <span class=\"keyword\">typeof</span> parent.getAttribute === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> listenerCount = (+parent.getAttribute(LISTEN_FLAG)) - <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (listenerCount === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         parent.removeEventListener(<span class=\"string\">'scroll'</span>, finalLazyLoadHandler, passiveEvent);</span><br><span class=\"line\">         parent.removeAttribute(LISTEN_FLAG);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         parent.setAttribute(LISTEN_FLAG, listenerCount);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">const</span> index = listeners.indexOf(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (index !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">     listeners.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (listeners.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     off(<span class=\"built_in\">window</span>, <span class=\"string\">'resize'</span>, finalLazyLoadHandler, passiveEvent);</span><br><span class=\"line\">     off(<span class=\"built_in\">window</span>, <span class=\"string\">'scroll'</span>, finalLazyLoadHandler, passiveEvent);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>组件卸载的时候，把一些绑定事件解绑一下，细节也不说了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>抛开 <code>react-lazy-load</code> 一些实现细节，从总体把握整个懒加载的过程，其实懒加载的原理并不难。当时我也看了一下 <code>vue</code> 那边的 <code>vue-lazyLoad</code> 这个库想写一个对比的文章，我以为这个 <code>vue</code> 库的内容会写的和 <code>react-lazy-load</code> 差不多，结果发现 <code>vue-lazyLoad</code> 代码很长而且好像比较复杂，所以也就没看了。</p>\n<hr>\n<p><img src=\"/2018/08/14/懒加载/433381594.jpg\" alt=\"Vincent van Gogh – Blossoming Almond Branch in a Glass with a Book\"></p>\n<blockquote>\n<p>Vincent van Gogh – Blossoming Almond Branch in a Glass with a Book 1888</p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/pic/1301854874.jpg","slug":"1301854874.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","modified":1,"renderable":0},{"_id":"source/_posts/pic/1959017488.jpg","slug":"1959017488.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","modified":1,"renderable":0},{"_id":"source/_posts/pic/1997264555.jpg","slug":"1997264555.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","modified":1,"renderable":0},{"_id":"source/_posts/pic/2048547518.jpg","slug":"2048547518.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","modified":1,"renderable":0},{"_id":"source/_posts/pic/565924812.jpg","slug":"565924812.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","modified":1,"renderable":0},{"_id":"source/_posts/pic/433381594.jpg","slug":"433381594.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","modified":1,"renderable":0},{"_id":"source/_posts/pic/944233120.jpg","slug":"944233120.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","modified":1,"renderable":0},{"_id":"source/_posts/redux之createStore/565924812.jpg","slug":"565924812.jpg","post":"cjlmfcbgc000gssv6pyfwhu9t","modified":1,"renderable":0},{"_id":"source/_posts/你好，世界/1959017488.jpg","slug":"1959017488.jpg","post":"cjlmfcbi40011ssv6t6dvpirb","modified":1,"renderable":0},{"_id":"source/_posts/react-motion翻译及学习/944233120.jpg","slug":"944233120.jpg","post":"cjlmfcbfk0009ssv69ps8yr43","modified":1,"renderable":0},{"_id":"source/_posts/几个题目/1301854874.jpg","slug":"1301854874.jpg","post":"cjlmfcbj5001mssv6t5ictwln","modified":1,"renderable":0},{"_id":"source/_posts/小时候吃的/1997264555.jpg","slug":"1997264555.jpg","post":"cjlmfcbig001cssv61gcv2uya","modified":1,"renderable":0},{"_id":"source/_posts/redux之compose/196334101.jpg","slug":"196334101.jpg","post":"cjlmfcbfw000bssv6lfv9pun4","modified":1,"renderable":0},{"_id":"source/_posts/pic/898024871.jpg","slug":"898024871.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","modified":1,"renderable":0},{"_id":"source/_posts/三月的烟雨/898024871.jpg","slug":"898024871.jpg","post":"cjlmfcbhs000xssv6lcnsu9us","modified":1,"renderable":0},{"_id":"source/_posts/pic/196334101.jpg","slug":"196334101.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","modified":1,"renderable":0},{"_id":"source/_posts/懒加载/433381594.jpg","slug":"433381594.jpg","post":"cjlmfcbjt0022ssv6oqete25b","modified":1,"renderable":0},{"_id":"source/_posts/vue、react隐式实例化/596444702.jpg","post":"cjlmfcbg0000essv6e7bbebgl","slug":"596444702.jpg","modified":1,"renderable":1},{"_id":"source/_posts/一次面试记录/456066894.jpg","post":"cjlmfcbh4000nssv6h32nd6wk","slug":"456066894.jpg","modified":1,"renderable":1},{"_id":"source/_posts/vue与react组件对比学习/877090454.jpg","post":"cjlmfcbhc000rssv6zgsdgr58","slug":"877090454.jpg","modified":1,"renderable":1},{"_id":"source/_posts/vue较少关注的地方/3526.jpg","post":"cjlmfcbhg000vssv6rkmgtwjp","slug":"3526.jpg","modified":1,"renderable":1},{"_id":"source/_posts/四月的清风/1132638050.jpg","post":"cjlmfcbic0015ssv62xa7j0dc","slug":"1132638050.jpg","modified":1,"renderable":1},{"_id":"source/_posts/前端部署nginx配置/4282315052.jpg","post":"cjlmfcbic0019ssv65wyd8fam","slug":"4282315052.jpg","modified":1,"renderable":1},{"_id":"source/_posts/家乡/1762221382.jpg","post":"cjlmfcbix001gssv6i9gr0mk8","slug":"1762221382.jpg","modified":1,"renderable":1},{"_id":"source/_posts/牢骚/431359834.jpg","post":"cjlmfcbj1001jssv6tvr235fj","slug":"431359834.jpg","modified":1,"renderable":1},{"_id":"source/_posts/看到的面试题/713080393.jpg","post":"cjlmfcbj9001qssv6yctlr7j1","slug":"713080393.jpg","modified":1,"renderable":1},{"_id":"source/_posts/神奇的reduce/1917180847.jpg","post":"cjlmfcbjh001tssv6e1jxhga2","slug":"1917180847.jpg","modified":1,"renderable":1},{"_id":"source/_posts/绕不开的promise/1012308194.jpg","post":"cjlmfcbjl001zssv6t2ue71e4","slug":"1012308194.jpg","modified":1,"renderable":1},{"_id":"source/_posts/维生素指北/a.jpg","post":"cjlmfcbjh001xssv60nzmocqz","slug":"a.jpg","modified":1,"renderable":1},{"_id":"source/_posts/维生素指北/c.jpg","post":"cjlmfcbjh001xssv60nzmocqz","slug":"c.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/1012308194.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","slug":"1012308194.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/1132638050.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","slug":"1132638050.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/1762221382.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","slug":"1762221382.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/1917180847.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","slug":"1917180847.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/2900977792.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","slug":"2900977792.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/3526.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","slug":"3526.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/4282315052.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","slug":"4282315052.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/431359834.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","slug":"431359834.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/456066894.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","slug":"456066894.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/596444702.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","slug":"596444702.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/713080393.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","slug":"713080393.jpg","modified":1,"renderable":1},{"_id":"source/_posts/pic/877090454.jpg","post":"cjlmfcbgk000jssv65j3lo6s3","slug":"877090454.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjlmfcbck0000ssv6pbsebd7j","category_id":"cjlmfcbcs0001ssv6w6m2x38v","_id":"cjlmfcbd40004ssv689kn7bhf"},{"post_id":"cjlmfcbfk0009ssv69ps8yr43","category_id":"cjlmfcbcs0001ssv6w6m2x38v","_id":"cjlmfcbgc000hssv6tu9naq08"},{"post_id":"cjlmfcbfw000bssv6lfv9pun4","category_id":"cjlmfcbcs0001ssv6w6m2x38v","_id":"cjlmfcbgs000kssv6o3etsta4"},{"post_id":"cjlmfcbg0000essv6e7bbebgl","category_id":"cjlmfcbcs0001ssv6w6m2x38v","_id":"cjlmfcbh4000ossv6hz2hm9di"},{"post_id":"cjlmfcbgc000gssv6pyfwhu9t","category_id":"cjlmfcbcs0001ssv6w6m2x38v","_id":"cjlmfcbhg000sssv6b4kqr57p"},{"post_id":"cjlmfcbh4000nssv6h32nd6wk","category_id":"cjlmfcbcs0001ssv6w6m2x38v","_id":"cjlmfcbhs000yssv6gasu7fip"},{"post_id":"cjlmfcbhc000rssv6zgsdgr58","category_id":"cjlmfcbcs0001ssv6w6m2x38v","_id":"cjlmfcbi80012ssv6pab9ja03"},{"post_id":"cjlmfcbhg000vssv6rkmgtwjp","category_id":"cjlmfcbcs0001ssv6w6m2x38v","_id":"cjlmfcbic0016ssv6qru39r6k"},{"post_id":"cjlmfcbgk000jssv65j3lo6s3","category_id":"cjlmfcbhc000pssv6mw25l2on","_id":"cjlmfcbic001assv6k7i9gpa9"},{"post_id":"cjlmfcbi40011ssv6t6dvpirb","category_id":"cjlmfcbhc000pssv6mw25l2on","_id":"cjlmfcbig001essv66i8jwhre"},{"post_id":"cjlmfcbic0019ssv65wyd8fam","category_id":"cjlmfcbcs0001ssv6w6m2x38v","_id":"cjlmfcbj5001kssv6vcnq7w3b"},{"post_id":"cjlmfcbhs000xssv6lcnsu9us","category_id":"cjlmfcbi80013ssv69o7v873w","_id":"cjlmfcbj9001nssv6psz8shwx"},{"post_id":"cjlmfcbig001cssv61gcv2uya","category_id":"cjlmfcbi80013ssv69o7v873w","_id":"cjlmfcbjd001rssv6aedabdhf"},{"post_id":"cjlmfcbix001gssv6i9gr0mk8","category_id":"cjlmfcbi80013ssv69o7v873w","_id":"cjlmfcbjh001ussv68c3g11ym"},{"post_id":"cjlmfcbic0015ssv62xa7j0dc","category_id":"cjlmfcbi80013ssv69o7v873w","_id":"cjlmfcbjl001yssv6yo7mnyyn"},{"post_id":"cjlmfcbj1001jssv6tvr235fj","category_id":"cjlmfcbi80013ssv69o7v873w","_id":"cjlmfcbjp0020ssv6bev2e0pi"},{"post_id":"cjlmfcbj5001mssv6t5ictwln","category_id":"cjlmfcbcs0001ssv6w6m2x38v","_id":"cjlmfcbjx0023ssv6jig2wgzb"},{"post_id":"cjlmfcbj9001qssv6yctlr7j1","category_id":"cjlmfcbcs0001ssv6w6m2x38v","_id":"cjlmfcbjx0025ssv65laq6c8n"},{"post_id":"cjlmfcbjh001tssv6e1jxhga2","category_id":"cjlmfcbcs0001ssv6w6m2x38v","_id":"cjlmfcbk10028ssv6c4ohhmt0"},{"post_id":"cjlmfcbjh001xssv60nzmocqz","category_id":"cjlmfcbi80013ssv69o7v873w","_id":"cjlmfcbk5002assv6zp6xxln5"},{"post_id":"cjlmfcbjl001zssv6t2ue71e4","category_id":"cjlmfcbcs0001ssv6w6m2x38v","_id":"cjlmfcbk5002dssv606vuyjm7"},{"post_id":"cjlmfcbjt0022ssv6oqete25b","category_id":"cjlmfcbcs0001ssv6w6m2x38v","_id":"cjlmfcbk9002fssv6gwlco7bp"}],"PostTag":[{"post_id":"cjlmfcbck0000ssv6pbsebd7j","tag_id":"cjlmfcbcw0002ssv6eb328qro","_id":"cjlmfcbdk0006ssv6teiju7iv"},{"post_id":"cjlmfcbck0000ssv6pbsebd7j","tag_id":"cjlmfcbd00003ssv68acssriq","_id":"cjlmfcbdk0007ssv609h33rqw"},{"post_id":"cjlmfcbck0000ssv6pbsebd7j","tag_id":"cjlmfcbd40005ssv6k6nnfas7","_id":"cjlmfcbdk0008ssv6dshrzoz8"},{"post_id":"cjlmfcbfw000bssv6lfv9pun4","tag_id":"cjlmfcbcw0002ssv6eb328qro","_id":"cjlmfcbgc000fssv6gvz9bo4e"},{"post_id":"cjlmfcbfw000bssv6lfv9pun4","tag_id":"cjlmfcbd00003ssv68acssriq","_id":"cjlmfcbgk000issv6fpkowckq"},{"post_id":"cjlmfcbfw000bssv6lfv9pun4","tag_id":"cjlmfcbd40005ssv6k6nnfas7","_id":"cjlmfcbh4000mssv6lx4uiq4o"},{"post_id":"cjlmfcbgc000gssv6pyfwhu9t","tag_id":"cjlmfcbcw0002ssv6eb328qro","_id":"cjlmfcbhc000qssv6nwjglfj3"},{"post_id":"cjlmfcbgc000gssv6pyfwhu9t","tag_id":"cjlmfcbd00003ssv68acssriq","_id":"cjlmfcbhg000ussv6kt40khi9"},{"post_id":"cjlmfcbgc000gssv6pyfwhu9t","tag_id":"cjlmfcbd40005ssv6k6nnfas7","_id":"cjlmfcbhs000wssv6xuqvnqk3"},{"post_id":"cjlmfcbfk0009ssv69ps8yr43","tag_id":"cjlmfcbd00003ssv68acssriq","_id":"cjlmfcbi40010ssv65vpp6vv8"},{"post_id":"cjlmfcbfk0009ssv69ps8yr43","tag_id":"cjlmfcbg0000dssv6835pmjr8","_id":"cjlmfcbi80014ssv6ykzlxqxa"},{"post_id":"cjlmfcbfk0009ssv69ps8yr43","tag_id":"cjlmfcbgs000lssv6t5ojkiid","_id":"cjlmfcbic0017ssv6lwlrii2j"},{"post_id":"cjlmfcbhg000vssv6rkmgtwjp","tag_id":"cjlmfcbhg000tssv6dgyirkur","_id":"cjlmfcbig001bssv6mv5wqcaw"},{"post_id":"cjlmfcbg0000essv6e7bbebgl","tag_id":"cjlmfcbhg000tssv6dgyirkur","_id":"cjlmfcbit001fssv66r6w6gd0"},{"post_id":"cjlmfcbg0000essv6e7bbebgl","tag_id":"cjlmfcbd00003ssv68acssriq","_id":"cjlmfcbix001issv66nkbgtvg"},{"post_id":"cjlmfcbgk000jssv65j3lo6s3","tag_id":"cjlmfcbhw000zssv6f3wf6vm4","_id":"cjlmfcbj5001lssv668e1cngn"},{"post_id":"cjlmfcbh4000nssv6h32nd6wk","tag_id":"cjlmfcbic0018ssv6g0bdesgs","_id":"cjlmfcbj9001pssv6g9e28b9o"},{"post_id":"cjlmfcbhc000rssv6zgsdgr58","tag_id":"cjlmfcbhg000tssv6dgyirkur","_id":"cjlmfcbjh001sssv6vpo0b933"},{"post_id":"cjlmfcbhc000rssv6zgsdgr58","tag_id":"cjlmfcbd00003ssv68acssriq","_id":"cjlmfcbjh001wssv6y07s9s5e"},{"post_id":"cjlmfcbic0019ssv65wyd8fam","tag_id":"cjlmfcbj9001ossv6ynapxtva","_id":"cjlmfcbjx0024ssv66vp1foqg"},{"post_id":"cjlmfcbic0019ssv65wyd8fam","tag_id":"cjlmfcbjh001vssv6yzwrnad4","_id":"cjlmfcbk10026ssv6f9cxqoox"},{"post_id":"cjlmfcbj5001mssv6t5ictwln","tag_id":"cjlmfcbic0018ssv6g0bdesgs","_id":"cjlmfcbk50029ssv6j03jc541"},{"post_id":"cjlmfcbj5001mssv6t5ictwln","tag_id":"cjlmfcbjp0021ssv6gwmdgfwx","_id":"cjlmfcbk5002bssv6ypz2geo3"},{"post_id":"cjlmfcbj9001qssv6yctlr7j1","tag_id":"cjlmfcbic0018ssv6g0bdesgs","_id":"cjlmfcbk5002essv6ppjw8bip"},{"post_id":"cjlmfcbj9001qssv6yctlr7j1","tag_id":"cjlmfcbjp0021ssv6gwmdgfwx","_id":"cjlmfcbk9002gssv6xckhw6xp"},{"post_id":"cjlmfcbjh001tssv6e1jxhga2","tag_id":"cjlmfcbk5002cssv6j18wsyyo","_id":"cjlmfcbk9002jssv6tmxt8z7l"},{"post_id":"cjlmfcbjh001tssv6e1jxhga2","tag_id":"cjlmfcbk9002hssv6b570y69k","_id":"cjlmfcbk9002kssv6w6fq9scr"},{"post_id":"cjlmfcbjh001xssv60nzmocqz","tag_id":"cjlmfcbk9002issv6a5wm5su3","_id":"cjlmfcbkd002nssv67tjjhj9k"},{"post_id":"cjlmfcbjh001xssv60nzmocqz","tag_id":"cjlmfcbkd002lssv6lkvym6cl","_id":"cjlmfcbkd002ossv6a1al4bx4"},{"post_id":"cjlmfcbjl001zssv6t2ue71e4","tag_id":"cjlmfcbkd002mssv6cdh2x6bc","_id":"cjlmfcbkh002qssv66ous9b80"},{"post_id":"cjlmfcbjt0022ssv6oqete25b","tag_id":"cjlmfcbkd002pssv603ikarnm","_id":"cjlmfcbkh002rssv664r00mkq"},{"post_id":"cjlmfcbjt0022ssv6oqete25b","tag_id":"cjlmfcbd00003ssv68acssriq","_id":"cjlmfcbkh002sssv6tebwq9n5"},{"post_id":"cjlmfcbjt0022ssv6oqete25b","tag_id":"cjlmfcbd40005ssv6k6nnfas7","_id":"cjlmfcbkh002tssv6w4uuwx6z"}],"Tag":[{"name":"redux","_id":"cjlmfcbcw0002ssv6eb328qro"},{"name":"react","_id":"cjlmfcbd00003ssv68acssriq"},{"name":"源码","_id":"cjlmfcbd40005ssv6k6nnfas7"},{"name":"react-motion","_id":"cjlmfcbg0000dssv6835pmjr8"},{"name":"翻译","_id":"cjlmfcbgs000lssv6t5ojkiid"},{"name":"vue","_id":"cjlmfcbhg000tssv6dgyirkur"},{"name":"图库","_id":"cjlmfcbhw000zssv6f3wf6vm4"},{"name":"面试","_id":"cjlmfcbic0018ssv6g0bdesgs"},{"name":"nginx","_id":"cjlmfcbj9001ossv6ynapxtva"},{"name":"部署","_id":"cjlmfcbjh001vssv6yzwrnad4"},{"name":"题目","_id":"cjlmfcbjp0021ssv6gwmdgfwx"},{"name":"reduce","_id":"cjlmfcbk5002cssv6j18wsyyo"},{"name":"数组","_id":"cjlmfcbk9002hssv6b570y69k"},{"name":"维生素","_id":"cjlmfcbk9002issv6a5wm5su3"},{"name":"健康","_id":"cjlmfcbkd002lssv6lkvym6cl"},{"name":"promise","_id":"cjlmfcbkd002mssv6cdh2x6bc"},{"name":"懒加载","_id":"cjlmfcbkd002pssv603ikarnm"}]}}